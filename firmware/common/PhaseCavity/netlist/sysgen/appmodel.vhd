-- Generated from Simulink block exampleModel_bus_axi/AppModel/Subsystem
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_subsystem is
  port (
    cav1_p1_if_amp : in std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_phase : in std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_i : in std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_q : in std_logic_vector( 18-1 downto 0 );
    cav1_p1_dc_real : in std_logic_vector( 18-1 downto 0 );
    cav1_p1_dc_img : in std_logic_vector( 18-1 downto 0 );
    cav1_p1_dc_freq : in std_logic_vector( 32-1 downto 0 );
    cav1_p1_integrated_i : in std_logic_vector( 20-1 downto 0 );
    cav1_p1_integrated_q : in std_logic_vector( 20-1 downto 0 );
    cav1_p1_phase_out : in std_logic_vector( 18-1 downto 0 );
    cav1_p1_amp_out : in std_logic_vector( 18-1 downto 0 );
    cav1_p1_comparison_i : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_amp : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_phase : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_i : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_q : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_dc_real : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_dc_img : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_dc_freq : in std_logic_vector( 32-1 downto 0 );
    cav1_p2_integrated_i : in std_logic_vector( 20-1 downto 0 );
    cav1_p2_integrated_q : in std_logic_vector( 20-1 downto 0 );
    cav1_p2_phase_out : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_amp_out : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_comparison_i : in std_logic_vector( 18-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    p1_1 : out std_logic_vector( 18-1 downto 0 );
    p2_1 : out std_logic_vector( 18-1 downto 0 );
    p1_2 : out std_logic_vector( 18-1 downto 0 );
    p1_3 : out std_logic_vector( 18-1 downto 0 );
    p1_4 : out std_logic_vector( 18-1 downto 0 );
    p1_5 : out std_logic_vector( 18-1 downto 0 );
    p1_6 : out std_logic_vector( 18-1 downto 0 );
    p1_7 : out std_logic_vector( 32-1 downto 0 );
    p1_8 : out std_logic_vector( 20-1 downto 0 );
    p1_9 : out std_logic_vector( 20-1 downto 0 );
    p1_10 : out std_logic_vector( 18-1 downto 0 );
    p1_11 : out std_logic_vector( 18-1 downto 0 );
    p1_12 : out std_logic_vector( 18-1 downto 0 );
    p1_13 : out std_logic_vector( 18-1 downto 0 );
    p1_14 : out std_logic_vector( 18-1 downto 0 );
    p2_2 : out std_logic_vector( 18-1 downto 0 );
    p2_3 : out std_logic_vector( 18-1 downto 0 );
    p2_4 : out std_logic_vector( 18-1 downto 0 );
    p2_5 : out std_logic_vector( 18-1 downto 0 );
    p2_6 : out std_logic_vector( 18-1 downto 0 );
    p2_7 : out std_logic_vector( 32-1 downto 0 );
    p2_8 : out std_logic_vector( 20-1 downto 0 );
    p2_9 : out std_logic_vector( 20-1 downto 0 );
    p2_10 : out std_logic_vector( 18-1 downto 0 );
    p2_11 : out std_logic_vector( 18-1 downto 0 );
    p2_12 : out std_logic_vector( 18-1 downto 0 );
    p2_13 : out std_logic_vector( 18-1 downto 0 );
    p2_14 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_subsystem;
architecture structural of appmodel_subsystem is 
  signal c1p1_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal c1p1_integ_i : std_logic_vector( 20-1 downto 0 );
  signal c1p1_integ_q : std_logic_vector( 20-1 downto 0 );
  signal c1p2_integ_i : std_logic_vector( 20-1 downto 0 );
  signal c1p1_amp_out : std_logic_vector( 18-1 downto 0 );
  signal c1p1_comp_i : std_logic_vector( 18-1 downto 0 );
  signal c1p1_if_phi : std_logic_vector( 18-1 downto 0 );
  signal c1p1_if_i : std_logic_vector( 18-1 downto 0 );
  signal c1p1_if_amp : std_logic_vector( 18-1 downto 0 );
  signal c1p2_if_amp : std_logic_vector( 18-1 downto 0 );
  signal c1p1_if_q : std_logic_vector( 18-1 downto 0 );
  signal c1p1_phi_out : std_logic_vector( 18-1 downto 0 );
  signal c1p1_dc_i : std_logic_vector( 18-1 downto 0 );
  signal c1p1_dc_q : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal c1p2_integ_q : std_logic_vector( 20-1 downto 0 );
  signal c1p2_phi_out : std_logic_vector( 18-1 downto 0 );
  signal c1p2_amp_out : std_logic_vector( 18-1 downto 0 );
  signal c1p2_comp_i : std_logic_vector( 18-1 downto 0 );
  signal c1p2_comp_q : std_logic_vector( 18-1 downto 0 );
  signal c1p2_comp_phi : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal convert9_dout_net_x0 : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net : std_logic_vector( 20-1 downto 0 );
  signal register13_q_net : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net : std_logic_vector( 18-1 downto 0 );
  signal addsub_s_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert9_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net_x0 : std_logic_vector( 20-1 downto 0 );
  signal register13_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal addsub_s_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal c1p1_comp_q : std_logic_vector( 18-1 downto 0 );
  signal c1p1_comp_phi : std_logic_vector( 18-1 downto 0 );
  signal c1p2_if_phi : std_logic_vector( 18-1 downto 0 );
  signal convert6_dout_net : std_logic_vector( 18-1 downto 0 );
  signal c1p2_if_i : std_logic_vector( 18-1 downto 0 );
  signal c1p2_if_q : std_logic_vector( 18-1 downto 0 );
  signal c1p2_dc_i : std_logic_vector( 18-1 downto 0 );
  signal c1p2_dc_q : std_logic_vector( 18-1 downto 0 );
  signal c1p2_dc_freq : std_logic_vector( 32-1 downto 0 );
begin
  p1_1 <= c1p1_if_amp;
  p2_1 <= c1p2_if_amp;
  p1_2 <= c1p1_if_phi;
  p1_3 <= c1p1_if_i;
  p1_4 <= c1p1_if_q;
  p1_5 <= c1p1_dc_i;
  p1_6 <= c1p1_dc_q;
  p1_7 <= c1p1_dc_freq;
  p1_8 <= c1p1_integ_i;
  p1_9 <= c1p1_integ_q;
  p1_10 <= c1p1_phi_out;
  p1_11 <= c1p1_amp_out;
  p1_12 <= c1p1_comp_i;
  p1_13 <= c1p1_comp_q;
  p1_14 <= c1p1_comp_phi;
  p2_2 <= c1p2_if_phi;
  p2_3 <= c1p2_if_i;
  p2_4 <= c1p2_if_q;
  p2_5 <= c1p2_dc_i;
  p2_6 <= c1p2_dc_q;
  p2_7 <= c1p2_dc_freq;
  p2_8 <= c1p2_integ_i;
  p2_9 <= c1p2_integ_q;
  p2_10 <= c1p2_phi_out;
  p2_11 <= c1p2_amp_out;
  p2_12 <= c1p2_comp_i;
  p2_13 <= c1p2_comp_q;
  p2_14 <= c1p2_comp_phi;
  down_sample1_q_net <= cav1_p1_if_amp;
  down_sample_q_net <= cav1_p1_if_phase;
  down_sample1_q_net_x2 <= cav1_p1_if_i;
  down_sample_q_net_x2 <= cav1_p1_if_q;
  convert6_dout_net <= cav1_p1_dc_real;
  convert5_dout_net <= cav1_p1_dc_img;
  convert_dout_net_x0 <= cav1_p1_dc_freq;
  convert9_dout_net_x0 <= cav1_p1_integrated_i;
  convert10_dout_net <= cav1_p1_integrated_q;
  register13_q_net <= cav1_p1_phase_out;
  register14_q_net <= cav1_p1_amp_out;
  addsub_s_net <= cav1_p1_comparison_i;
  down_sample1_q_net_x0 <= cav1_p2_if_amp;
  down_sample_q_net_x0 <= cav1_p2_if_phase;
  down_sample1_q_net_x1 <= cav1_p2_if_i;
  down_sample_q_net_x1 <= cav1_p2_if_q;
  convert1_dout_net <= cav1_p2_dc_real;
  convert_dout_net_x1 <= cav1_p2_dc_img;
  convert_dout_net <= cav1_p2_dc_freq;
  convert9_dout_net <= cav1_p2_integrated_i;
  convert10_dout_net_x0 <= cav1_p2_integrated_q;
  register13_q_net_x0 <= cav1_p2_phase_out;
  register14_q_net_x0 <= cav1_p2_amp_out;
  addsub_s_net_x0 <= cav1_p2_comparison_i;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  register1 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample_q_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_if_phi
  );
  register10 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register13_q_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_phi_out
  );
  register11 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register14_q_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_amp_out
  );
  register12 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => addsub_s_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_comp_i
  );
  register13 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => addsub_s_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_comp_q
  );
  register14 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => addsub_s_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_comp_phi
  );
  register15 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample_q_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_if_phi
  );
  register16 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register13_q_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_phi_out
  );
  register17 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register14_q_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_amp_out
  );
  register18 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => addsub_s_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_comp_i
  );
  register19 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => addsub_s_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_comp_q
  );
  register2 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample1_q_net_x2,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_if_i
  );
  register20 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => addsub_s_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_comp_phi
  );
  register21 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample1_q_net_x1,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_if_i
  );
  register22 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample1_q_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_if_amp
  );
  register23 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample_q_net_x1,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_if_q
  );
  register24 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert1_dout_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_dc_i
  );
  register25 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert_dout_net_x1,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_dc_q
  );
  register26 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert_dout_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_dc_freq
  );
  register27 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert9_dout_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_integ_i
  );
  register28 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert10_dout_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p2_integ_q
  );
  register3 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample1_q_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_if_amp
  );
  register4 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample_q_net_x2,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_if_q
  );
  register5 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert6_dout_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_dc_i
  );
  register6 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert5_dout_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_dc_q
  );
  register7 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert_dout_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_dc_freq
  );
  register8 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert9_dout_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_integ_i
  );
  register9 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert10_dout_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c1p1_integ_q
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/Subsystem2
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_subsystem2 is
  port (
    in1_1 : in std_logic_vector( 4-1 downto 0 );
    in1_2 : in std_logic_vector( 4-1 downto 0 );
    in1_3 : in std_logic_vector( 16-1 downto 0 );
    in1_4 : in std_logic_vector( 16-1 downto 0 );
    in1_5 : in std_logic_vector( 16-1 downto 0 );
    in1_6 : in std_logic_vector( 16-1 downto 0 );
    in1_7 : in std_logic_vector( 1-1 downto 0 );
    in1_8 : in std_logic_vector( 18-1 downto 0 );
    in1_9 : in std_logic_vector( 18-1 downto 0 );
    in1_10 : in std_logic_vector( 32-1 downto 0 );
    clk_1_x0 : in std_logic;
    ce_1 : in std_logic;
    clk_1 : in std_logic;
    ce_1_x0 : in std_logic;
    cav1_p1_chan_sel : out std_logic_vector( 4-1 downto 0 );
    cav1_p2_chan_sel : out std_logic_vector( 4-1 downto 0 );
    cav1_p1_window_start : out std_logic_vector( 16-1 downto 0 );
    cav1_p1_window_stop : out std_logic_vector( 16-1 downto 0 );
    cav1_nco_phase_reset : out std_logic_vector( 1-1 downto 0 );
    cav1_nco_phase_adj : out std_logic_vector( 32-1 downto 0 );
    cav1_p2_window_start : out std_logic_vector( 16-1 downto 0 );
    cav1_p2_window_stop : out std_logic_vector( 16-1 downto 0 );
    cav1_p1_cal_coef : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_cal_coef : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_subsystem2;
architecture structural of appmodel_subsystem2 is 
  signal c1p1_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal c1p2_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal c1p1_win_start : std_logic_vector( 16-1 downto 0 );
  signal c1p1_win_stop : std_logic_vector( 16-1 downto 0 );
  signal c1p2_win_start : std_logic_vector( 16-1 downto 0 );
  signal c1p2_win_stop : std_logic_vector( 16-1 downto 0 );
  signal c1_nco_reset : std_logic_vector( 1-1 downto 0 );
  signal c1p1_cal_coeff : std_logic_vector( 18-1 downto 0 );
  signal c1p2_cal_coeff : std_logic_vector( 18-1 downto 0 );
  signal c1_nco_phi : std_logic_vector( 32-1 downto 0 );
  signal register29_q_net : std_logic_vector( 4-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal register31_q_net : std_logic_vector( 16-1 downto 0 );
  signal register32_q_net : std_logic_vector( 16-1 downto 0 );
  signal register35_q_net : std_logic_vector( 1-1 downto 0 );
  signal register36_q_net : std_logic_vector( 32-1 downto 0 );
  signal register33_q_net : std_logic_vector( 16-1 downto 0 );
  signal register34_q_net : std_logic_vector( 16-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net : std_logic_vector( 18-1 downto 0 );
  signal q_clk_net_x0 : std_logic;
  signal d_ce_net_x0 : std_logic;
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
begin
  c1p1_chan_sel <= in1_1;
  c1p2_chan_sel <= in1_2;
  c1p1_win_start <= in1_3;
  c1p1_win_stop <= in1_4;
  c1p2_win_start <= in1_5;
  c1p2_win_stop <= in1_6;
  c1_nco_reset <= in1_7;
  c1p1_cal_coeff <= in1_8;
  c1p2_cal_coeff <= in1_9;
  c1_nco_phi <= in1_10;
  cav1_p1_chan_sel <= register29_q_net;
  cav1_p2_chan_sel <= register30_q_net;
  cav1_p1_window_start <= register31_q_net;
  cav1_p1_window_stop <= register32_q_net;
  cav1_nco_phase_reset <= register35_q_net;
  cav1_nco_phase_adj <= register36_q_net;
  cav1_p2_window_start <= register33_q_net;
  cav1_p2_window_stop <= register34_q_net;
  cav1_p1_cal_coef <= register1_q_net;
  cav1_p2_cal_coef <= register2_q_net;
  q_clk_net_x0 <= clk_1_x0;
  d_ce_net_x0 <= ce_1;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1_x0;
  register1 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c1p1_cal_coeff,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register1_q_net
  );
  register2 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c1p2_cal_coeff,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register2_q_net
  );
  register29 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c1p1_chan_sel,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register29_q_net
  );
  register30 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c1p2_chan_sel,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register30_q_net
  );
  register31 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c1p1_win_start,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register31_q_net
  );
  register32 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 16,
    init_value => b"0000000001100100"
  )
  port map (
    en => "1",
    rst => "0",
    d => c1p1_win_stop,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register32_q_net
  );
  register33 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c1p2_win_start,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register33_q_net
  );
  register34 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 16,
    init_value => b"0000000001100100"
  )
  port map (
    en => "1",
    rst => "0",
    d => c1p2_win_stop,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register34_q_net
  );
  register35 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => c1_nco_reset,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register35_q_net
  );
  register36 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c1_nco_phi,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register36_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/Subsystem3
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_subsystem3_x0 is
  port (
    rf_ref_amp : in std_logic_vector( 18-1 downto 0 );
    rf_ref_phase : in std_logic_vector( 18-1 downto 0 );
    rf_ref_i : in std_logic_vector( 18-1 downto 0 );
    rf_ref_q : in std_logic_vector( 18-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    out1_1 : out std_logic_vector( 18-1 downto 0 );
    out1_2 : out std_logic_vector( 18-1 downto 0 );
    out1_3 : out std_logic_vector( 18-1 downto 0 );
    out1_4 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_subsystem3_x0;
architecture structural of appmodel_subsystem3_x0 is 
  signal ref_amp : std_logic_vector( 18-1 downto 0 );
  signal ref_phi : std_logic_vector( 18-1 downto 0 );
  signal ref_i : std_logic_vector( 18-1 downto 0 );
  signal ref_q : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
begin
  out1_1 <= ref_amp;
  out1_2 <= ref_phi;
  out1_3 <= ref_i;
  out1_4 <= ref_q;
  down_sample1_q_net_x0 <= rf_ref_amp;
  down_sample_q_net_x0 <= rf_ref_phase;
  down_sample1_q_net <= rf_ref_i;
  down_sample_q_net <= rf_ref_q;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  register1 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample_q_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => ref_phi
  );
  register2 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample1_q_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => ref_i
  );
  register3 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample1_q_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => ref_amp
  );
  register4 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample_q_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => ref_q
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/Subsystem4
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_subsystem4 is
  port (
    in1_3 : in std_logic_vector( 4-1 downto 0 );
    clk_1_x0 : in std_logic;
    ce_1 : in std_logic;
    clk_1 : in std_logic;
    ce_1_x0 : in std_logic;
    rf_ref_chan_sel : out std_logic_vector( 4-1 downto 0 )
  );
end appmodel_subsystem4;
architecture structural of appmodel_subsystem4 is 
  signal ref_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal register2_q_net : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net_x0 : std_logic;
  signal d_ce_net_x0 : std_logic;
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
begin
  ref_chan_sel <= in1_3;
  rf_ref_chan_sel <= register2_q_net;
  q_clk_net_x0 <= clk_1_x0;
  d_ce_net_x0 <= ce_1;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1_x0;
  register2 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => ref_chan_sel,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register2_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/Subsystem5
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_subsystem5 is
  port (
    cav2_p1_if_amp : in std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_phase : in std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_i : in std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_q : in std_logic_vector( 18-1 downto 0 );
    cav2_p1_dc_real : in std_logic_vector( 18-1 downto 0 );
    cav2_p1_dc_img : in std_logic_vector( 18-1 downto 0 );
    cav2_p1_dc_freq : in std_logic_vector( 32-1 downto 0 );
    cav2_p1_integrated_i : in std_logic_vector( 20-1 downto 0 );
    cav2_p1_integrated_q : in std_logic_vector( 20-1 downto 0 );
    cav2_p1_phase_out : in std_logic_vector( 18-1 downto 0 );
    cav2_p1_amp_out : in std_logic_vector( 18-1 downto 0 );
    cav2_p1_comparison_i : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_amp : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_phase : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_i : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_q : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_dc_real : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_dc_img : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_dc_freq : in std_logic_vector( 32-1 downto 0 );
    cav2_p2_integrated_i : in std_logic_vector( 20-1 downto 0 );
    cav2_p2_integrated_q : in std_logic_vector( 20-1 downto 0 );
    cav2_p2_phase_out : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_amp_out : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_comparison_i : in std_logic_vector( 18-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    p1_1 : out std_logic_vector( 18-1 downto 0 );
    p2_1 : out std_logic_vector( 18-1 downto 0 );
    p1_2 : out std_logic_vector( 18-1 downto 0 );
    p1_3 : out std_logic_vector( 18-1 downto 0 );
    p1_4 : out std_logic_vector( 18-1 downto 0 );
    p1_5 : out std_logic_vector( 18-1 downto 0 );
    p1_6 : out std_logic_vector( 18-1 downto 0 );
    p1_7 : out std_logic_vector( 32-1 downto 0 );
    p1_8 : out std_logic_vector( 20-1 downto 0 );
    p1_9 : out std_logic_vector( 20-1 downto 0 );
    p1_10 : out std_logic_vector( 18-1 downto 0 );
    p1_11 : out std_logic_vector( 18-1 downto 0 );
    p1_12 : out std_logic_vector( 18-1 downto 0 );
    p1_13 : out std_logic_vector( 18-1 downto 0 );
    p1_14 : out std_logic_vector( 18-1 downto 0 );
    p2_2 : out std_logic_vector( 18-1 downto 0 );
    p2_3 : out std_logic_vector( 18-1 downto 0 );
    p2_4 : out std_logic_vector( 18-1 downto 0 );
    p2_5 : out std_logic_vector( 18-1 downto 0 );
    p2_6 : out std_logic_vector( 18-1 downto 0 );
    p2_7 : out std_logic_vector( 32-1 downto 0 );
    p2_8 : out std_logic_vector( 20-1 downto 0 );
    p2_9 : out std_logic_vector( 20-1 downto 0 );
    p2_10 : out std_logic_vector( 18-1 downto 0 );
    p2_11 : out std_logic_vector( 18-1 downto 0 );
    p2_12 : out std_logic_vector( 18-1 downto 0 );
    p2_13 : out std_logic_vector( 18-1 downto 0 );
    p2_14 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_subsystem5;
architecture structural of appmodel_subsystem5 is 
  signal d_ce_net : std_logic;
  signal c2p1_if_amp : std_logic_vector( 18-1 downto 0 );
  signal c2p2_if_amp : std_logic_vector( 18-1 downto 0 );
  signal c2p1_if_phi : std_logic_vector( 18-1 downto 0 );
  signal c2p1_if_i : std_logic_vector( 18-1 downto 0 );
  signal c2p1_if_q : std_logic_vector( 18-1 downto 0 );
  signal c2p1_dc_i : std_logic_vector( 18-1 downto 0 );
  signal c2p1_dc_q : std_logic_vector( 18-1 downto 0 );
  signal c2p1_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal c2p1_integ_i : std_logic_vector( 20-1 downto 0 );
  signal c2p1_integ_q : std_logic_vector( 20-1 downto 0 );
  signal c2p1_phi_out : std_logic_vector( 18-1 downto 0 );
  signal c2p1_amp_out : std_logic_vector( 18-1 downto 0 );
  signal c2p1_comp_i : std_logic_vector( 18-1 downto 0 );
  signal c2p1_comp_q : std_logic_vector( 18-1 downto 0 );
  signal c2p1_comp_phi : std_logic_vector( 18-1 downto 0 );
  signal c2p2_if_phi : std_logic_vector( 18-1 downto 0 );
  signal c2p2_if_i : std_logic_vector( 18-1 downto 0 );
  signal c2p2_if_q : std_logic_vector( 18-1 downto 0 );
  signal c2p2_dc_i : std_logic_vector( 18-1 downto 0 );
  signal c2p2_dc_q : std_logic_vector( 18-1 downto 0 );
  signal c2p2_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal c2p2_integ_i : std_logic_vector( 20-1 downto 0 );
  signal c2p2_integ_q : std_logic_vector( 20-1 downto 0 );
  signal c2p2_phi_out : std_logic_vector( 18-1 downto 0 );
  signal c2p2_amp_out : std_logic_vector( 18-1 downto 0 );
  signal c2p2_comp_i : std_logic_vector( 18-1 downto 0 );
  signal c2p2_comp_q : std_logic_vector( 18-1 downto 0 );
  signal c2p2_comp_phi : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal convert9_dout_net_x0 : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net : std_logic_vector( 20-1 downto 0 );
  signal register13_q_net : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net : std_logic_vector( 18-1 downto 0 );
  signal addsub_s_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert6_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert9_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net_x0 : std_logic_vector( 20-1 downto 0 );
  signal register13_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal addsub_s_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal q_clk_net : std_logic;
begin
  p1_1 <= c2p1_if_amp;
  p2_1 <= c2p2_if_amp;
  p1_2 <= c2p1_if_phi;
  p1_3 <= c2p1_if_i;
  p1_4 <= c2p1_if_q;
  p1_5 <= c2p1_dc_i;
  p1_6 <= c2p1_dc_q;
  p1_7 <= c2p1_dc_freq;
  p1_8 <= c2p1_integ_i;
  p1_9 <= c2p1_integ_q;
  p1_10 <= c2p1_phi_out;
  p1_11 <= c2p1_amp_out;
  p1_12 <= c2p1_comp_i;
  p1_13 <= c2p1_comp_q;
  p1_14 <= c2p1_comp_phi;
  p2_2 <= c2p2_if_phi;
  p2_3 <= c2p2_if_i;
  p2_4 <= c2p2_if_q;
  p2_5 <= c2p2_dc_i;
  p2_6 <= c2p2_dc_q;
  p2_7 <= c2p2_dc_freq;
  p2_8 <= c2p2_integ_i;
  p2_9 <= c2p2_integ_q;
  p2_10 <= c2p2_phi_out;
  p2_11 <= c2p2_amp_out;
  p2_12 <= c2p2_comp_i;
  p2_13 <= c2p2_comp_q;
  p2_14 <= c2p2_comp_phi;
  down_sample1_q_net <= cav2_p1_if_amp;
  down_sample_q_net <= cav2_p1_if_phase;
  down_sample1_q_net_x2 <= cav2_p1_if_i;
  down_sample_q_net_x2 <= cav2_p1_if_q;
  convert1_dout_net <= cav2_p1_dc_real;
  convert5_dout_net <= cav2_p1_dc_img;
  convert_dout_net_x0 <= cav2_p1_dc_freq;
  convert9_dout_net_x0 <= cav2_p1_integrated_i;
  convert10_dout_net <= cav2_p1_integrated_q;
  register13_q_net <= cav2_p1_phase_out;
  register14_q_net <= cav2_p1_amp_out;
  addsub_s_net <= cav2_p1_comparison_i;
  down_sample1_q_net_x0 <= cav2_p2_if_amp;
  down_sample_q_net_x0 <= cav2_p2_if_phase;
  down_sample1_q_net_x1 <= cav2_p2_if_i;
  down_sample_q_net_x1 <= cav2_p2_if_q;
  convert2_dout_net <= cav2_p2_dc_real;
  convert6_dout_net <= cav2_p2_dc_img;
  convert_dout_net <= cav2_p2_dc_freq;
  convert9_dout_net <= cav2_p2_integrated_i;
  convert10_dout_net_x0 <= cav2_p2_integrated_q;
  register13_q_net_x0 <= cav2_p2_phase_out;
  register14_q_net_x0 <= cav2_p2_amp_out;
  addsub_s_net_x0 <= cav2_p2_comparison_i;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  register1 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample_q_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_if_phi
  );
  register10 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register14_q_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_amp_out
  );
  register11 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => addsub_s_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_comp_i
  );
  register12 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => addsub_s_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_comp_q
  );
  register13 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => addsub_s_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_comp_phi
  );
  register14 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample_q_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_if_phi
  );
  register15 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register14_q_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_amp_out
  );
  register16 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => addsub_s_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_comp_i
  );
  register17 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => addsub_s_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_comp_q
  );
  register18 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => addsub_s_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_comp_phi
  );
  register19 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample1_q_net_x1,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_if_i
  );
  register2 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample1_q_net_x2,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_if_i
  );
  register20 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample1_q_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_if_amp
  );
  register21 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample_q_net_x1,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_if_q
  );
  register22 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample1_q_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_if_amp
  );
  register23 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert2_dout_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_dc_i
  );
  register24 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert6_dout_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_dc_q
  );
  register25 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert_dout_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_dc_freq
  );
  register26 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert9_dout_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_integ_i
  );
  register27 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert10_dout_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_integ_q
  );
  register28 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register13_q_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p2_phi_out
  );
  register3 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample_q_net_x2,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_if_q
  );
  register4 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert1_dout_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_dc_i
  );
  register5 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert5_dout_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_dc_q
  );
  register6 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert_dout_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_dc_freq
  );
  register7 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert9_dout_net_x0,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_integ_i
  );
  register8 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert10_dout_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_integ_q
  );
  register9 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register13_q_net,
    d_clk => d_clk_net,
    q_ce => q_ce_net,
    q_clk => q_clk_net,
    d_ce => d_ce_net,
    q => c2p1_phi_out
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/Subsystem7
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_subsystem7 is
  port (
    in1_1 : in std_logic_vector( 4-1 downto 0 );
    in1_2 : in std_logic_vector( 4-1 downto 0 );
    in1_3 : in std_logic_vector( 16-1 downto 0 );
    in1_4 : in std_logic_vector( 16-1 downto 0 );
    in1_5 : in std_logic_vector( 16-1 downto 0 );
    in1_6 : in std_logic_vector( 16-1 downto 0 );
    in1_7 : in std_logic_vector( 1-1 downto 0 );
    in1_8 : in std_logic_vector( 18-1 downto 0 );
    in1_9 : in std_logic_vector( 18-1 downto 0 );
    in1_10 : in std_logic_vector( 32-1 downto 0 );
    clk_1_x0 : in std_logic;
    ce_1 : in std_logic;
    clk_1 : in std_logic;
    ce_1_x0 : in std_logic;
    cav2_p1_cal_coef : out std_logic_vector( 18-1 downto 0 );
    cav2_nco_phase_reset : out std_logic_vector( 1-1 downto 0 );
    cav2_nco_phase_adj : out std_logic_vector( 32-1 downto 0 );
    cav2_p2_window_start : out std_logic_vector( 16-1 downto 0 );
    cav2_p2_window_stop : out std_logic_vector( 16-1 downto 0 );
    cav2_p2_cal_coef : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_chan_sel : out std_logic_vector( 4-1 downto 0 );
    cav2_p2_chan_sel : out std_logic_vector( 4-1 downto 0 );
    cav2_p1_window_start : out std_logic_vector( 16-1 downto 0 );
    cav2_p1_window_stop : out std_logic_vector( 16-1 downto 0 )
  );
end appmodel_subsystem7;
architecture structural of appmodel_subsystem7 is 
  signal c2p1_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal c2p2_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal c2p1_win_start : std_logic_vector( 16-1 downto 0 );
  signal c2p1_win_stop : std_logic_vector( 16-1 downto 0 );
  signal c2p2_win_start : std_logic_vector( 16-1 downto 0 );
  signal c2p2_win_stop : std_logic_vector( 16-1 downto 0 );
  signal c2_nco_reset : std_logic_vector( 1-1 downto 0 );
  signal c2p1_cal_coeff : std_logic_vector( 18-1 downto 0 );
  signal c2p2_cal_coeff : std_logic_vector( 18-1 downto 0 );
  signal c2_nco_phi : std_logic_vector( 32-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register35_q_net : std_logic_vector( 1-1 downto 0 );
  signal register36_q_net : std_logic_vector( 32-1 downto 0 );
  signal register33_q_net : std_logic_vector( 16-1 downto 0 );
  signal register34_q_net : std_logic_vector( 16-1 downto 0 );
  signal register2_q_net : std_logic_vector( 18-1 downto 0 );
  signal register29_q_net : std_logic_vector( 4-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal register31_q_net : std_logic_vector( 16-1 downto 0 );
  signal register32_q_net : std_logic_vector( 16-1 downto 0 );
  signal q_clk_net_x0 : std_logic;
  signal d_ce_net_x0 : std_logic;
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
begin
  c2p1_chan_sel <= in1_1;
  c2p2_chan_sel <= in1_2;
  c2p1_win_start <= in1_3;
  c2p1_win_stop <= in1_4;
  c2p2_win_start <= in1_5;
  c2p2_win_stop <= in1_6;
  c2_nco_reset <= in1_7;
  c2p1_cal_coeff <= in1_8;
  c2p2_cal_coeff <= in1_9;
  c2_nco_phi <= in1_10;
  cav2_p1_cal_coef <= register1_q_net;
  cav2_nco_phase_reset <= register35_q_net;
  cav2_nco_phase_adj <= register36_q_net;
  cav2_p2_window_start <= register33_q_net;
  cav2_p2_window_stop <= register34_q_net;
  cav2_p2_cal_coef <= register2_q_net;
  cav2_p1_chan_sel <= register29_q_net;
  cav2_p2_chan_sel <= register30_q_net;
  cav2_p1_window_start <= register31_q_net;
  cav2_p1_window_stop <= register32_q_net;
  q_clk_net_x0 <= clk_1_x0;
  d_ce_net_x0 <= ce_1;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1_x0;
  register29 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c2p1_chan_sel,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register29_q_net
  );
  register30 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c2p2_chan_sel,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register30_q_net
  );
  register31 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c2p1_win_start,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register31_q_net
  );
  register32 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c2p1_win_stop,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register32_q_net
  );
  register33 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c2p2_win_start,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register33_q_net
  );
  register34 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c2p2_win_stop,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register34_q_net
  );
  register35 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => c2_nco_reset,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register35_q_net
  );
  register36 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c2_nco_phi,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register36_q_net
  );
  register1 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c2p1_cal_coeff,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register1_q_net
  );
  register2 : entity work.appmodel_xlAsynRegister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => c2p2_cal_coeff,
    d_clk => q_clk_net,
    q_ce => d_ce_net,
    q_clk => q_clk_net_x0,
    d_ce => d_ce_net_x0,
    q => register2_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/axi_lite
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_axi_lite is
  port (
    in1_1 : in std_logic_vector( 18-1 downto 0 );
    in2_1 : in std_logic_vector( 18-1 downto 0 );
    in3_1 : in std_logic_vector( 18-1 downto 0 );
    in4_1 : in std_logic_vector( 18-1 downto 0 );
    in5_1 : in std_logic_vector( 18-1 downto 0 );
    in1_2 : in std_logic_vector( 18-1 downto 0 );
    in1_3 : in std_logic_vector( 18-1 downto 0 );
    in1_4 : in std_logic_vector( 18-1 downto 0 );
    in2_2 : in std_logic_vector( 18-1 downto 0 );
    in2_3 : in std_logic_vector( 18-1 downto 0 );
    in2_4 : in std_logic_vector( 18-1 downto 0 );
    in2_5 : in std_logic_vector( 18-1 downto 0 );
    in2_6 : in std_logic_vector( 18-1 downto 0 );
    in2_7 : in std_logic_vector( 32-1 downto 0 );
    in2_8 : in std_logic_vector( 20-1 downto 0 );
    in2_9 : in std_logic_vector( 20-1 downto 0 );
    in2_10 : in std_logic_vector( 18-1 downto 0 );
    in2_11 : in std_logic_vector( 18-1 downto 0 );
    in2_12 : in std_logic_vector( 18-1 downto 0 );
    in2_13 : in std_logic_vector( 18-1 downto 0 );
    in2_14 : in std_logic_vector( 18-1 downto 0 );
    in3_2 : in std_logic_vector( 18-1 downto 0 );
    in3_3 : in std_logic_vector( 18-1 downto 0 );
    in3_4 : in std_logic_vector( 18-1 downto 0 );
    in3_5 : in std_logic_vector( 18-1 downto 0 );
    in3_6 : in std_logic_vector( 18-1 downto 0 );
    in3_7 : in std_logic_vector( 32-1 downto 0 );
    in3_8 : in std_logic_vector( 20-1 downto 0 );
    in3_9 : in std_logic_vector( 20-1 downto 0 );
    in3_10 : in std_logic_vector( 18-1 downto 0 );
    in3_11 : in std_logic_vector( 18-1 downto 0 );
    in3_12 : in std_logic_vector( 18-1 downto 0 );
    in3_13 : in std_logic_vector( 18-1 downto 0 );
    in3_14 : in std_logic_vector( 18-1 downto 0 );
    in4_2 : in std_logic_vector( 18-1 downto 0 );
    in4_3 : in std_logic_vector( 18-1 downto 0 );
    in4_4 : in std_logic_vector( 18-1 downto 0 );
    in4_5 : in std_logic_vector( 18-1 downto 0 );
    in4_6 : in std_logic_vector( 18-1 downto 0 );
    in4_7 : in std_logic_vector( 32-1 downto 0 );
    in4_8 : in std_logic_vector( 20-1 downto 0 );
    in4_9 : in std_logic_vector( 20-1 downto 0 );
    in4_10 : in std_logic_vector( 18-1 downto 0 );
    in4_11 : in std_logic_vector( 18-1 downto 0 );
    in4_12 : in std_logic_vector( 18-1 downto 0 );
    in4_13 : in std_logic_vector( 18-1 downto 0 );
    in4_14 : in std_logic_vector( 18-1 downto 0 );
    in5_2 : in std_logic_vector( 18-1 downto 0 );
    in5_3 : in std_logic_vector( 18-1 downto 0 );
    in5_4 : in std_logic_vector( 18-1 downto 0 );
    in5_5 : in std_logic_vector( 18-1 downto 0 );
    in5_6 : in std_logic_vector( 18-1 downto 0 );
    in5_7 : in std_logic_vector( 32-1 downto 0 );
    in5_8 : in std_logic_vector( 20-1 downto 0 );
    in5_9 : in std_logic_vector( 20-1 downto 0 );
    in5_10 : in std_logic_vector( 18-1 downto 0 );
    in5_11 : in std_logic_vector( 18-1 downto 0 );
    in5_12 : in std_logic_vector( 18-1 downto 0 );
    in5_13 : in std_logic_vector( 18-1 downto 0 );
    in5_14 : in std_logic_vector( 18-1 downto 0 );
    cav1_nco_phase_adj : in std_logic_vector( 32-1 downto 0 );
    cav1_nco_phase_reset : in std_logic_vector( 1-1 downto 0 );
    cav1_p1_calibration_coeff : in std_logic_vector( 18-1 downto 0 );
    cav1_p1_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav1_p1_window_start : in std_logic_vector( 16-1 downto 0 );
    cav1_p1_window_stop : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_calibration_coeff : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav1_p2_window_start : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_window_stop : in std_logic_vector( 16-1 downto 0 );
    cav2_nco_phase_adj : in std_logic_vector( 32-1 downto 0 );
    cav2_nco_phase_reset : in std_logic_vector( 1-1 downto 0 );
    cav2_p1_calibration_coeff : in std_logic_vector( 18-1 downto 0 );
    cav2_p1_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav2_p1_window_start : in std_logic_vector( 16-1 downto 0 );
    cav2_p1_window_stop : in std_logic_vector( 16-1 downto 0 );
    cav2_p2_calibration_coeff : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav2_p2_window_start : in std_logic_vector( 16-1 downto 0 );
    cav2_p2_window_stop : in std_logic_vector( 16-1 downto 0 );
    rf_ref_chan_sel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_8 : in std_logic;
    ce_8 : in std_logic;
    out2_1 : out std_logic_vector( 4-1 downto 0 );
    out3_1 : out std_logic_vector( 4-1 downto 0 );
    out1_3 : out std_logic_vector( 4-1 downto 0 );
    out2_2 : out std_logic_vector( 4-1 downto 0 );
    out2_3 : out std_logic_vector( 16-1 downto 0 );
    out2_4 : out std_logic_vector( 16-1 downto 0 );
    out2_5 : out std_logic_vector( 16-1 downto 0 );
    out2_6 : out std_logic_vector( 16-1 downto 0 );
    out2_7 : out std_logic_vector( 1-1 downto 0 );
    out2_8 : out std_logic_vector( 18-1 downto 0 );
    out2_9 : out std_logic_vector( 18-1 downto 0 );
    out2_10 : out std_logic_vector( 32-1 downto 0 );
    out3_2 : out std_logic_vector( 4-1 downto 0 );
    out3_3 : out std_logic_vector( 16-1 downto 0 );
    out3_4 : out std_logic_vector( 16-1 downto 0 );
    out3_5 : out std_logic_vector( 16-1 downto 0 );
    out3_6 : out std_logic_vector( 16-1 downto 0 );
    out3_7 : out std_logic_vector( 1-1 downto 0 );
    out3_8 : out std_logic_vector( 18-1 downto 0 );
    out3_9 : out std_logic_vector( 18-1 downto 0 );
    out3_10 : out std_logic_vector( 32-1 downto 0 );
    cav1_p1_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav1_p1_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav1_p1_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav1_p1_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav1_p2_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav1_p2_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav1_p2_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav2_p1_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav2_p1_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav2_p1_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav2_p2_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav2_p2_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav2_p2_phase_out : out std_logic_vector( 18-1 downto 0 );
    rf_ref_amp : out std_logic_vector( 18-1 downto 0 );
    rf_ref_i : out std_logic_vector( 18-1 downto 0 );
    rf_ref_phase : out std_logic_vector( 18-1 downto 0 );
    rf_ref_q : out std_logic_vector( 18-1 downto 0 );
    status_0 : out std_logic_vector( 32-1 downto 0 )
  );
end appmodel_axi_lite;
architecture structural of appmodel_axi_lite is 
  signal c1p1_integ_q : std_logic_vector( 20-1 downto 0 );
  signal c1p2_comp_q : std_logic_vector( 18-1 downto 0 );
  signal c1p1_phi_out : std_logic_vector( 18-1 downto 0 );
  signal c1p1_amp_out : std_logic_vector( 18-1 downto 0 );
  signal c1p1_comp_i : std_logic_vector( 18-1 downto 0 );
  signal c1p1_comp_q : std_logic_vector( 18-1 downto 0 );
  signal c1p1_comp_phi : std_logic_vector( 18-1 downto 0 );
  signal c1p2_if_phi : std_logic_vector( 18-1 downto 0 );
  signal c1p2_if_i : std_logic_vector( 18-1 downto 0 );
  signal c1p2_if_q : std_logic_vector( 18-1 downto 0 );
  signal c1p2_dc_i : std_logic_vector( 18-1 downto 0 );
  signal c1p2_dc_q : std_logic_vector( 18-1 downto 0 );
  signal c1p2_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal c1p2_integ_i : std_logic_vector( 20-1 downto 0 );
  signal c1p2_integ_q : std_logic_vector( 20-1 downto 0 );
  signal c1p2_phi_out : std_logic_vector( 18-1 downto 0 );
  signal c1p2_amp_out : std_logic_vector( 18-1 downto 0 );
  signal register60_q_net : std_logic_vector( 4-1 downto 0 );
  signal register61_q_net : std_logic_vector( 4-1 downto 0 );
  signal register62_q_net : std_logic_vector( 4-1 downto 0 );
  signal register63_q_net : std_logic_vector( 4-1 downto 0 );
  signal register64_q_net : std_logic_vector( 16-1 downto 0 );
  signal register65_q_net : std_logic_vector( 16-1 downto 0 );
  signal register66_q_net : std_logic_vector( 16-1 downto 0 );
  signal register67_q_net : std_logic_vector( 16-1 downto 0 );
  signal register68_q_net : std_logic_vector( 16-1 downto 0 );
  signal register69_q_net : std_logic_vector( 16-1 downto 0 );
  signal register70_q_net : std_logic_vector( 16-1 downto 0 );
  signal register71_q_net : std_logic_vector( 16-1 downto 0 );
  signal register72_q_net : std_logic_vector( 1-1 downto 0 );
  signal register73_q_net : std_logic_vector( 1-1 downto 0 );
  signal register74_q_net : std_logic_vector( 32-1 downto 0 );
  signal register75_q_net : std_logic_vector( 32-1 downto 0 );
  signal register77_q_net : std_logic_vector( 18-1 downto 0 );
  signal register79_q_net : std_logic_vector( 18-1 downto 0 );
  signal register81_q_net : std_logic_vector( 18-1 downto 0 );
  signal register83_q_net : std_logic_vector( 18-1 downto 0 );
  signal register88_q_net : std_logic_vector( 4-1 downto 0 );
  signal register89_q_net : std_logic_vector( 4-1 downto 0 );
  signal register128_q_net : std_logic_vector( 18-1 downto 0 );
  signal register118_q_net : std_logic_vector( 20-1 downto 0 );
  signal register119_q_net : std_logic_vector( 20-1 downto 0 );
  signal register120_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_window_start_net : std_logic_vector( 16-1 downto 0 );
  signal cav2_p2_window_stop_net : std_logic_vector( 16-1 downto 0 );
  signal register76_q_net : std_logic_vector( 18-1 downto 0 );
  signal rf_ref_chan_sel_net : std_logic_vector( 4-1 downto 0 );
  signal register80_q_net : std_logic_vector( 18-1 downto 0 );
  signal register78_q_net : std_logic_vector( 18-1 downto 0 );
  signal register82_q_net : std_logic_vector( 18-1 downto 0 );
  signal register27_q_net : std_logic_vector( 32-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal dest_clk_net : std_logic;
  signal dest_ce_net : std_logic;
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal c1p1_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal c2p1_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal ref_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal c1p2_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal c1p1_win_start : std_logic_vector( 16-1 downto 0 );
  signal c1p1_win_stop : std_logic_vector( 16-1 downto 0 );
  signal c1p2_win_start : std_logic_vector( 16-1 downto 0 );
  signal c1p2_win_stop : std_logic_vector( 16-1 downto 0 );
  signal c1_nco_reset : std_logic_vector( 1-1 downto 0 );
  signal c1p1_cal_coeff : std_logic_vector( 18-1 downto 0 );
  signal c1p2_cal_coeff : std_logic_vector( 18-1 downto 0 );
  signal c1_nco_phi : std_logic_vector( 32-1 downto 0 );
  signal c2p2_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal c2p1_win_start : std_logic_vector( 16-1 downto 0 );
  signal c2p1_win_stop : std_logic_vector( 16-1 downto 0 );
  signal c2p2_win_start : std_logic_vector( 16-1 downto 0 );
  signal register10_q_net : std_logic_vector( 20-1 downto 0 );
  signal c2p2_win_stop : std_logic_vector( 16-1 downto 0 );
  signal c2_nco_reset : std_logic_vector( 1-1 downto 0 );
  signal c2p1_cal_coeff : std_logic_vector( 18-1 downto 0 );
  signal c2p2_cal_coeff : std_logic_vector( 18-1 downto 0 );
  signal c2_nco_phi : std_logic_vector( 32-1 downto 0 );
  signal ref_amp : std_logic_vector( 18-1 downto 0 );
  signal c1p1_if_amp : std_logic_vector( 18-1 downto 0 );
  signal c1p2_if_amp : std_logic_vector( 18-1 downto 0 );
  signal c2p1_if_amp : std_logic_vector( 18-1 downto 0 );
  signal c2p2_if_amp : std_logic_vector( 18-1 downto 0 );
  signal ref_phi : std_logic_vector( 18-1 downto 0 );
  signal ref_i : std_logic_vector( 18-1 downto 0 );
  signal ref_q : std_logic_vector( 18-1 downto 0 );
  signal c1p1_if_phi : std_logic_vector( 18-1 downto 0 );
  signal c1p1_if_i : std_logic_vector( 18-1 downto 0 );
  signal c1p1_if_q : std_logic_vector( 18-1 downto 0 );
  signal c1p1_dc_i : std_logic_vector( 18-1 downto 0 );
  signal c1p1_dc_q : std_logic_vector( 18-1 downto 0 );
  signal c1p1_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal c1p1_integ_i : std_logic_vector( 20-1 downto 0 );
  signal down_sample52_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample53_q_net : std_logic_vector( 32-1 downto 0 );
  signal down_sample54_q_net : std_logic_vector( 20-1 downto 0 );
  signal c1p2_comp_i : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_window_start_net : std_logic_vector( 16-1 downto 0 );
  signal c1p2_comp_phi : std_logic_vector( 18-1 downto 0 );
  signal c2p1_if_phi : std_logic_vector( 18-1 downto 0 );
  signal c2p1_if_i : std_logic_vector( 18-1 downto 0 );
  signal c2p1_if_q : std_logic_vector( 18-1 downto 0 );
  signal c2p1_dc_i : std_logic_vector( 18-1 downto 0 );
  signal c2p1_dc_q : std_logic_vector( 18-1 downto 0 );
  signal c2p1_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal c2p1_integ_i : std_logic_vector( 20-1 downto 0 );
  signal c2p1_integ_q : std_logic_vector( 20-1 downto 0 );
  signal c2p1_phi_out : std_logic_vector( 18-1 downto 0 );
  signal c2p1_amp_out : std_logic_vector( 18-1 downto 0 );
  signal c2p1_comp_i : std_logic_vector( 18-1 downto 0 );
  signal c2p1_comp_q : std_logic_vector( 18-1 downto 0 );
  signal c2p1_comp_phi : std_logic_vector( 18-1 downto 0 );
  signal c2p2_if_phi : std_logic_vector( 18-1 downto 0 );
  signal c2p2_if_i : std_logic_vector( 18-1 downto 0 );
  signal c2p2_if_q : std_logic_vector( 18-1 downto 0 );
  signal c2p2_dc_i : std_logic_vector( 18-1 downto 0 );
  signal c2p2_dc_q : std_logic_vector( 18-1 downto 0 );
  signal c2p2_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal c2p2_integ_i : std_logic_vector( 20-1 downto 0 );
  signal c2p2_integ_q : std_logic_vector( 20-1 downto 0 );
  signal c2p2_phi_out : std_logic_vector( 18-1 downto 0 );
  signal c2p2_amp_out : std_logic_vector( 18-1 downto 0 );
  signal c2p2_comp_i : std_logic_vector( 18-1 downto 0 );
  signal c2p2_comp_q : std_logic_vector( 18-1 downto 0 );
  signal c2p2_comp_phi : std_logic_vector( 18-1 downto 0 );
  signal cav1_nco_phase_adj_net : std_logic_vector( 32-1 downto 0 );
  signal cav1_nco_phase_reset_net : std_logic_vector( 1-1 downto 0 );
  signal register13_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_calibration_coeff_net : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_chan_sel_net : std_logic_vector( 4-1 downto 0 );
  signal register14_q_net : std_logic_vector( 18-1 downto 0 );
  signal register16_q_net : std_logic_vector( 18-1 downto 0 );
  signal register15_q_net : std_logic_vector( 18-1 downto 0 );
  signal register9_q_net : std_logic_vector( 32-1 downto 0 );
  signal register8_q_net : std_logic_vector( 18-1 downto 0 );
  signal register7_q_net : std_logic_vector( 18-1 downto 0 );
  signal register3_q_net : std_logic_vector( 18-1 downto 0 );
  signal register5_q_net : std_logic_vector( 18-1 downto 0 );
  signal register4_q_net : std_logic_vector( 18-1 downto 0 );
  signal register6_q_net : std_logic_vector( 18-1 downto 0 );
  signal register122_q_net : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net : std_logic_vector( 20-1 downto 0 );
  signal register12_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_window_stop_net : std_logic_vector( 16-1 downto 0 );
  signal register20_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_calibration_coeff_net : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_chan_sel_net : std_logic_vector( 4-1 downto 0 );
  signal register21_q_net : std_logic_vector( 18-1 downto 0 );
  signal register23_q_net : std_logic_vector( 18-1 downto 0 );
  signal register22_q_net : std_logic_vector( 18-1 downto 0 );
  signal register30_q_net : std_logic_vector( 32-1 downto 0 );
  signal register29_q_net : std_logic_vector( 18-1 downto 0 );
  signal register28_q_net : std_logic_vector( 18-1 downto 0 );
  signal register24_q_net : std_logic_vector( 18-1 downto 0 );
  signal register26_q_net : std_logic_vector( 18-1 downto 0 );
  signal register25_q_net : std_logic_vector( 18-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register17_q_net : std_logic_vector( 20-1 downto 0 );
  signal register18_q_net : std_logic_vector( 20-1 downto 0 );
  signal register19_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_window_start_net : std_logic_vector( 16-1 downto 0 );
  signal cav1_p2_window_stop_net : std_logic_vector( 16-1 downto 0 );
  signal cav2_nco_phase_adj_net : std_logic_vector( 32-1 downto 0 );
  signal cav2_nco_phase_reset_net : std_logic_vector( 1-1 downto 0 );
  signal register93_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_calibration_coeff_net : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_chan_sel_net : std_logic_vector( 4-1 downto 0 );
  signal register94_q_net : std_logic_vector( 18-1 downto 0 );
  signal register96_q_net : std_logic_vector( 18-1 downto 0 );
  signal register95_q_net : std_logic_vector( 18-1 downto 0 );
  signal register103_q_net : std_logic_vector( 32-1 downto 0 );
  signal register102_q_net : std_logic_vector( 18-1 downto 0 );
  signal register101_q_net : std_logic_vector( 18-1 downto 0 );
  signal register97_q_net : std_logic_vector( 18-1 downto 0 );
  signal register99_q_net : std_logic_vector( 18-1 downto 0 );
  signal register98_q_net : std_logic_vector( 18-1 downto 0 );
  signal register100_q_net : std_logic_vector( 18-1 downto 0 );
  signal register90_q_net : std_logic_vector( 20-1 downto 0 );
  signal register91_q_net : std_logic_vector( 20-1 downto 0 );
  signal register92_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_window_start_net : std_logic_vector( 16-1 downto 0 );
  signal cav2_p1_window_stop_net : std_logic_vector( 16-1 downto 0 );
  signal register121_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_calibration_coeff_net : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_chan_sel_net : std_logic_vector( 4-1 downto 0 );
  signal register124_q_net : std_logic_vector( 18-1 downto 0 );
  signal register123_q_net : std_logic_vector( 18-1 downto 0 );
  signal register131_q_net : std_logic_vector( 32-1 downto 0 );
  signal register130_q_net : std_logic_vector( 18-1 downto 0 );
  signal register129_q_net : std_logic_vector( 18-1 downto 0 );
  signal register125_q_net : std_logic_vector( 18-1 downto 0 );
  signal register127_q_net : std_logic_vector( 18-1 downto 0 );
  signal register126_q_net : std_logic_vector( 18-1 downto 0 );
  signal register34_q_net : std_logic_vector( 18-1 downto 0 );
  signal register146_q_net : std_logic_vector( 4-1 downto 0 );
  signal register147_q_net : std_logic_vector( 4-1 downto 0 );
  signal register148_q_net : std_logic_vector( 4-1 downto 0 );
  signal register149_q_net : std_logic_vector( 4-1 downto 0 );
  signal down_sample10_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample11_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample12_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample13_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample14_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample15_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample16_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample17_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample18_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample19_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample2_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample20_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample21_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample22_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample23_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample24_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample25_q_net : std_logic_vector( 32-1 downto 0 );
  signal down_sample26_q_net : std_logic_vector( 20-1 downto 0 );
  signal down_sample27_q_net : std_logic_vector( 20-1 downto 0 );
  signal down_sample28_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample29_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample3_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample30_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample31_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample32_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample33_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample34_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample35_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample36_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample37_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample38_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample39_q_net : std_logic_vector( 32-1 downto 0 );
  signal down_sample4_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample40_q_net : std_logic_vector( 20-1 downto 0 );
  signal down_sample41_q_net : std_logic_vector( 20-1 downto 0 );
  signal down_sample42_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample43_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample44_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample45_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample46_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample47_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample48_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample49_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample5_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample50_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample51_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample55_q_net : std_logic_vector( 20-1 downto 0 );
  signal down_sample56_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample57_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample58_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample59_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample6_q_net : std_logic_vector( 32-1 downto 0 );
  signal down_sample60_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample7_q_net : std_logic_vector( 20-1 downto 0 );
  signal down_sample8_q_net : std_logic_vector( 20-1 downto 0 );
  signal down_sample9_q_net : std_logic_vector( 18-1 downto 0 );
  signal register46_q_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net : std_logic_vector( 20-1 downto 0 );
  signal register107_q_net : std_logic_vector( 18-1 downto 0 );
  signal register108_q_net : std_logic_vector( 18-1 downto 0 );
  signal register109_q_net : std_logic_vector( 18-1 downto 0 );
  signal register110_q_net : std_logic_vector( 32-1 downto 0 );
  signal register104_q_net : std_logic_vector( 18-1 downto 0 );
  signal register105_q_net : std_logic_vector( 18-1 downto 0 );
  signal register106_q_net : std_logic_vector( 18-1 downto 0 );
  signal register31_q_net : std_logic_vector( 20-1 downto 0 );
  signal register111_q_net : std_logic_vector( 20-1 downto 0 );
  signal register112_q_net : std_logic_vector( 20-1 downto 0 );
  signal register113_q_net : std_logic_vector( 18-1 downto 0 );
  signal register114_q_net : std_logic_vector( 18-1 downto 0 );
  signal register115_q_net : std_logic_vector( 18-1 downto 0 );
  signal register116_q_net : std_logic_vector( 18-1 downto 0 );
  signal register117_q_net : std_logic_vector( 18-1 downto 0 );
  signal register139_q_net : std_logic_vector( 20-1 downto 0 );
  signal register140_q_net : std_logic_vector( 20-1 downto 0 );
  signal register32_q_net : std_logic_vector( 18-1 downto 0 );
  signal register141_q_net : std_logic_vector( 18-1 downto 0 );
  signal register142_q_net : std_logic_vector( 18-1 downto 0 );
  signal register143_q_net : std_logic_vector( 18-1 downto 0 );
  signal register144_q_net : std_logic_vector( 18-1 downto 0 );
  signal register145_q_net : std_logic_vector( 18-1 downto 0 );
  signal register132_q_net : std_logic_vector( 18-1 downto 0 );
  signal register133_q_net : std_logic_vector( 18-1 downto 0 );
  signal register134_q_net : std_logic_vector( 18-1 downto 0 );
  signal register135_q_net : std_logic_vector( 18-1 downto 0 );
  signal register136_q_net : std_logic_vector( 18-1 downto 0 );
  signal register33_q_net : std_logic_vector( 18-1 downto 0 );
  signal register137_q_net : std_logic_vector( 18-1 downto 0 );
  signal register138_q_net : std_logic_vector( 32-1 downto 0 );
  signal register35_q_net : std_logic_vector( 18-1 downto 0 );
  signal register150_q_net : std_logic_vector( 16-1 downto 0 );
  signal register151_q_net : std_logic_vector( 16-1 downto 0 );
  signal register152_q_net : std_logic_vector( 16-1 downto 0 );
  signal register153_q_net : std_logic_vector( 16-1 downto 0 );
  signal register154_q_net : std_logic_vector( 16-1 downto 0 );
  signal register155_q_net : std_logic_vector( 16-1 downto 0 );
  signal register156_q_net : std_logic_vector( 16-1 downto 0 );
  signal register157_q_net : std_logic_vector( 16-1 downto 0 );
  signal register158_q_net : std_logic_vector( 1-1 downto 0 );
  signal register159_q_net : std_logic_vector( 1-1 downto 0 );
  signal register36_q_net : std_logic_vector( 18-1 downto 0 );
  signal register160_q_net : std_logic_vector( 32-1 downto 0 );
  signal register161_q_net : std_logic_vector( 32-1 downto 0 );
  signal register47_q_net : std_logic_vector( 20-1 downto 0 );
  signal register48_q_net : std_logic_vector( 20-1 downto 0 );
  signal register49_q_net : std_logic_vector( 18-1 downto 0 );
  signal register198_q_net : std_logic_vector( 18-1 downto 0 );
  signal register199_q_net : std_logic_vector( 18-1 downto 0 );
  signal register50_q_net : std_logic_vector( 18-1 downto 0 );
  signal register200_q_net : std_logic_vector( 18-1 downto 0 );
  signal register201_q_net : std_logic_vector( 18-1 downto 0 );
  signal register202_q_net : std_logic_vector( 18-1 downto 0 );
  signal register203_q_net : std_logic_vector( 18-1 downto 0 );
  signal register204_q_net : std_logic_vector( 18-1 downto 0 );
  signal register205_q_net : std_logic_vector( 18-1 downto 0 );
  signal register51_q_net : std_logic_vector( 18-1 downto 0 );
  signal register52_q_net : std_logic_vector( 18-1 downto 0 );
  signal register53_q_net : std_logic_vector( 18-1 downto 0 );
  signal register54_q_net : std_logic_vector( 18-1 downto 0 );
  signal register55_q_net : std_logic_vector( 18-1 downto 0 );
  signal register56_q_net : std_logic_vector( 18-1 downto 0 );
  signal versionnumber_op_net : std_logic_vector( 32-1 downto 0 );
  signal register57_q_net : std_logic_vector( 18-1 downto 0 );
  signal register58_q_net : std_logic_vector( 18-1 downto 0 );
  signal register39_q_net : std_logic_vector( 18-1 downto 0 );
  signal register59_q_net : std_logic_vector( 32-1 downto 0 );
  signal register40_q_net : std_logic_vector( 18-1 downto 0 );
  signal register41_q_net : std_logic_vector( 18-1 downto 0 );
  signal register42_q_net : std_logic_vector( 18-1 downto 0 );
  signal register43_q_net : std_logic_vector( 18-1 downto 0 );
  signal register44_q_net : std_logic_vector( 18-1 downto 0 );
  signal register45_q_net : std_logic_vector( 32-1 downto 0 );
begin
  out2_1 <= c1p1_chan_sel;
  out3_1 <= c2p1_chan_sel;
  out1_3 <= ref_chan_sel;
  out2_2 <= c1p2_chan_sel;
  out2_3 <= c1p1_win_start;
  out2_4 <= c1p1_win_stop;
  out2_5 <= c1p2_win_start;
  out2_6 <= c1p2_win_stop;
  out2_7 <= c1_nco_reset;
  out2_8 <= c1p1_cal_coeff;
  out2_9 <= c1p2_cal_coeff;
  out2_10 <= c1_nco_phi;
  out3_2 <= c2p2_chan_sel;
  out3_3 <= c2p1_win_start;
  out3_4 <= c2p1_win_stop;
  out3_5 <= c2p2_win_start;
  out3_6 <= c2p2_win_stop;
  out3_7 <= c2_nco_reset;
  out3_8 <= c2p1_cal_coeff;
  out3_9 <= c2p2_cal_coeff;
  out3_10 <= c2_nco_phi;
  ref_amp <= in1_1;
  c1p1_if_amp <= in2_1;
  c1p2_if_amp <= in3_1;
  c2p1_if_amp <= in4_1;
  c2p2_if_amp <= in5_1;
  ref_phi <= in1_2;
  ref_i <= in1_3;
  ref_q <= in1_4;
  c1p1_if_phi <= in2_2;
  c1p1_if_i <= in2_3;
  c1p1_if_q <= in2_4;
  c1p1_dc_i <= in2_5;
  c1p1_dc_q <= in2_6;
  c1p1_dc_freq <= in2_7;
  c1p1_integ_i <= in2_8;
  c1p1_integ_q <= in2_9;
  c1p1_phi_out <= in2_10;
  c1p1_amp_out <= in2_11;
  c1p1_comp_i <= in2_12;
  c1p1_comp_q <= in2_13;
  c1p1_comp_phi <= in2_14;
  c1p2_if_phi <= in3_2;
  c1p2_if_i <= in3_3;
  c1p2_if_q <= in3_4;
  c1p2_dc_i <= in3_5;
  c1p2_dc_q <= in3_6;
  c1p2_dc_freq <= in3_7;
  c1p2_integ_i <= in3_8;
  c1p2_integ_q <= in3_9;
  c1p2_phi_out <= in3_10;
  c1p2_amp_out <= in3_11;
  c1p2_comp_i <= in3_12;
  c1p2_comp_q <= in3_13;
  c1p2_comp_phi <= in3_14;
  c2p1_if_phi <= in4_2;
  c2p1_if_i <= in4_3;
  c2p1_if_q <= in4_4;
  c2p1_dc_i <= in4_5;
  c2p1_dc_q <= in4_6;
  c2p1_dc_freq <= in4_7;
  c2p1_integ_i <= in4_8;
  c2p1_integ_q <= in4_9;
  c2p1_phi_out <= in4_10;
  c2p1_amp_out <= in4_11;
  c2p1_comp_i <= in4_12;
  c2p1_comp_q <= in4_13;
  c2p1_comp_phi <= in4_14;
  c2p2_if_phi <= in5_2;
  c2p2_if_i <= in5_3;
  c2p2_if_q <= in5_4;
  c2p2_dc_i <= in5_5;
  c2p2_dc_q <= in5_6;
  c2p2_dc_freq <= in5_7;
  c2p2_integ_i <= in5_8;
  c2p2_integ_q <= in5_9;
  c2p2_phi_out <= in5_10;
  c2p2_amp_out <= in5_11;
  c2p2_comp_i <= in5_12;
  c2p2_comp_q <= in5_13;
  c2p2_comp_phi <= in5_14;
  cav1_nco_phase_adj_net <= cav1_nco_phase_adj;
  cav1_nco_phase_reset_net <= cav1_nco_phase_reset;
  cav1_p1_amp_out <= register13_q_net;
  cav1_p1_calibration_coeff_net <= cav1_p1_calibration_coeff;
  cav1_p1_chan_sel_net <= cav1_p1_chan_sel;
  cav1_p1_comparison_i <= register14_q_net;
  cav1_p1_comparison_phase <= register16_q_net;
  cav1_p1_comparison_q <= register15_q_net;
  cav1_p1_dc_freq <= register9_q_net;
  cav1_p1_dc_img <= register8_q_net;
  cav1_p1_dc_real <= register7_q_net;
  cav1_p1_if_amp <= register3_q_net;
  cav1_p1_if_i <= register5_q_net;
  cav1_p1_if_phase <= register4_q_net;
  cav1_p1_if_q <= register6_q_net;
  cav1_p1_integrated_i <= register10_q_net;
  cav1_p1_integrated_q <= register11_q_net;
  cav1_p1_phase_out <= register12_q_net;
  cav1_p1_window_start_net <= cav1_p1_window_start;
  cav1_p1_window_stop_net <= cav1_p1_window_stop;
  cav1_p2_amp_out <= register20_q_net;
  cav1_p2_calibration_coeff_net <= cav1_p2_calibration_coeff;
  cav1_p2_chan_sel_net <= cav1_p2_chan_sel;
  cav1_p2_comparison_i <= register21_q_net;
  cav1_p2_comparison_phase <= register23_q_net;
  cav1_p2_comparison_q <= register22_q_net;
  cav1_p2_dc_freq <= register30_q_net;
  cav1_p2_dc_img <= register29_q_net;
  cav1_p2_dc_real <= register28_q_net;
  cav1_p2_if_amp <= register24_q_net;
  cav1_p2_if_i <= register26_q_net;
  cav1_p2_if_phase <= register25_q_net;
  cav1_p2_if_q <= register1_q_net;
  cav1_p2_integrated_i <= register17_q_net;
  cav1_p2_integrated_q <= register18_q_net;
  cav1_p2_phase_out <= register19_q_net;
  cav1_p2_window_start_net <= cav1_p2_window_start;
  cav1_p2_window_stop_net <= cav1_p2_window_stop;
  cav2_nco_phase_adj_net <= cav2_nco_phase_adj;
  cav2_nco_phase_reset_net <= cav2_nco_phase_reset;
  cav2_p1_amp_out <= register93_q_net;
  cav2_p1_calibration_coeff_net <= cav2_p1_calibration_coeff;
  cav2_p1_chan_sel_net <= cav2_p1_chan_sel;
  cav2_p1_comparison_i <= register94_q_net;
  cav2_p1_comparison_phase <= register96_q_net;
  cav2_p1_comparison_q <= register95_q_net;
  cav2_p1_dc_freq <= register103_q_net;
  cav2_p1_dc_img <= register102_q_net;
  cav2_p1_dc_real <= register101_q_net;
  cav2_p1_if_amp <= register97_q_net;
  cav2_p1_if_i <= register99_q_net;
  cav2_p1_if_phase <= register98_q_net;
  cav2_p1_if_q <= register100_q_net;
  cav2_p1_integrated_i <= register90_q_net;
  cav2_p1_integrated_q <= register91_q_net;
  cav2_p1_phase_out <= register92_q_net;
  cav2_p1_window_start_net <= cav2_p1_window_start;
  cav2_p1_window_stop_net <= cav2_p1_window_stop;
  cav2_p2_amp_out <= register121_q_net;
  cav2_p2_calibration_coeff_net <= cav2_p2_calibration_coeff;
  cav2_p2_chan_sel_net <= cav2_p2_chan_sel;
  cav2_p2_comparison_i <= register122_q_net;
  cav2_p2_comparison_phase <= register124_q_net;
  cav2_p2_comparison_q <= register123_q_net;
  cav2_p2_dc_freq <= register131_q_net;
  cav2_p2_dc_img <= register130_q_net;
  cav2_p2_dc_real <= register129_q_net;
  cav2_p2_if_amp <= register125_q_net;
  cav2_p2_if_i <= register127_q_net;
  cav2_p2_if_phase <= register126_q_net;
  cav2_p2_if_q <= register128_q_net;
  cav2_p2_integrated_i <= register118_q_net;
  cav2_p2_integrated_q <= register119_q_net;
  cav2_p2_phase_out <= register120_q_net;
  cav2_p2_window_start_net <= cav2_p2_window_start;
  cav2_p2_window_stop_net <= cav2_p2_window_stop;
  rf_ref_amp <= register76_q_net;
  rf_ref_chan_sel_net <= rf_ref_chan_sel;
  rf_ref_i <= register80_q_net;
  rf_ref_phase <= register78_q_net;
  rf_ref_q <= register82_q_net;
  status_0 <= register27_q_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  dest_clk_net <= clk_8;
  dest_ce_net <= ce_8;
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_if_phi,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample1_q_net
  );
  down_sample10 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 16,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 16,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_amp_out,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample10_q_net
  );
  down_sample11 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_if_amp,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample11_q_net
  );
  down_sample12 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_comp_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample12_q_net
  );
  down_sample13 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_comp_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample13_q_net
  );
  down_sample14 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_comp_phi,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample14_q_net
  );
  down_sample15 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_if_phi,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample15_q_net
  );
  down_sample16 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 16,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 16,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_amp_out,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample16_q_net
  );
  down_sample17 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_if_amp,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample17_q_net
  );
  down_sample18 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_comp_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample18_q_net
  );
  down_sample19 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_comp_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample19_q_net
  );
  down_sample2 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_if_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample2_q_net
  );
  down_sample20 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_comp_phi,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample20_q_net
  );
  down_sample21 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_if_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample21_q_net
  );
  down_sample22 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_if_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample22_q_net
  );
  down_sample23 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 16,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 16,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_dc_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample23_q_net
  );
  down_sample24 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 16,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 16,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_dc_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample24_q_net
  );
  down_sample25 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 32,
    d_width => 32,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 32,
    q_width => 32
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_dc_freq,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample25_q_net
  );
  down_sample26 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 18,
    d_width => 20,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 18,
    q_width => 20
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_integ_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample26_q_net
  );
  down_sample27 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 18,
    d_width => 20,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 18,
    q_width => 20
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_integ_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample27_q_net
  );
  down_sample28 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p2_phi_out,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample28_q_net
  );
  down_sample29 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => ref_amp,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample29_q_net
  );
  down_sample3 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_if_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample3_q_net
  );
  down_sample30 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => ref_phi,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample30_q_net
  );
  down_sample31 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => ref_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample31_q_net
  );
  down_sample32 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => ref_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample32_q_net
  );
  down_sample33 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_if_amp,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample33_q_net
  );
  down_sample34 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_if_phi,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample34_q_net
  );
  down_sample35 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_if_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample35_q_net
  );
  down_sample36 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_if_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample36_q_net
  );
  down_sample37 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 16,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 16,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_dc_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample37_q_net
  );
  down_sample38 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 16,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 16,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_dc_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample38_q_net
  );
  down_sample39 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 32,
    d_width => 32,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 32,
    q_width => 32
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_dc_freq,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample39_q_net
  );
  down_sample4 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 16,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 16,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_dc_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample4_q_net
  );
  down_sample40 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 18,
    d_width => 20,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 18,
    q_width => 20
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_integ_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample40_q_net
  );
  down_sample41 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 18,
    d_width => 20,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 18,
    q_width => 20
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_integ_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample41_q_net
  );
  down_sample42 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_phi_out,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample42_q_net
  );
  down_sample43 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 16,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 16,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_amp_out,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample43_q_net
  );
  down_sample44 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_comp_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample44_q_net
  );
  down_sample45 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_comp_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample45_q_net
  );
  down_sample46 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p1_comp_phi,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample46_q_net
  );
  down_sample47 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_if_amp,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample47_q_net
  );
  down_sample48 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_if_phi,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample48_q_net
  );
  down_sample49 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_if_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample49_q_net
  );
  down_sample5 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 16,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 16,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_dc_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample5_q_net
  );
  down_sample50 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_if_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample50_q_net
  );
  down_sample51 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 16,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 16,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_dc_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample51_q_net
  );
  down_sample52 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 16,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 16,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_dc_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample52_q_net
  );
  down_sample53 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 32,
    d_width => 32,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 32,
    q_width => 32
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_dc_freq,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample53_q_net
  );
  down_sample54 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 18,
    d_width => 20,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 18,
    q_width => 20
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_integ_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample54_q_net
  );
  down_sample55 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 18,
    d_width => 20,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 18,
    q_width => 20
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_integ_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample55_q_net
  );
  down_sample56 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_phi_out,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample56_q_net
  );
  down_sample57 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 16,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 16,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_amp_out,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample57_q_net
  );
  down_sample58 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_comp_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample58_q_net
  );
  down_sample59 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_comp_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample59_q_net
  );
  down_sample6 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 32,
    d_width => 32,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 32,
    q_width => 32
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_dc_freq,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample6_q_net
  );
  down_sample60 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c2p2_comp_phi,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample60_q_net
  );
  down_sample7 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 18,
    d_width => 20,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 18,
    q_width => 20
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_integ_i,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample7_q_net
  );
  down_sample8 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 18,
    d_width => 20,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 18,
    q_width => 20
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_integ_q,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample8_q_net
  );
  down_sample9 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 15,
    d_width => 18,
    ds_ratio => 8,
    latency => 1,
    phase => 7,
    q_arith => xlSigned,
    q_bin_pt => 15,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => c1p1_phi_out,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => dest_clk_net,
    dest_ce => dest_ce_net,
    q => down_sample9_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register46_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register1_q_net
  );
  register10 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register2_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register10_q_net
  );
  register100 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register107_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register100_q_net
  );
  register101 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register108_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register101_q_net
  );
  register102 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register109_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register102_q_net
  );
  register103 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register110_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register103_q_net
  );
  register104 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample33_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register104_q_net
  );
  register105 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample34_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register105_q_net
  );
  register106 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample35_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register106_q_net
  );
  register107 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample36_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register107_q_net
  );
  register108 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample37_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register108_q_net
  );
  register109 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample38_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register109_q_net
  );
  register11 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register31_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register11_q_net
  );
  register110 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample39_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register110_q_net
  );
  register111 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample40_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register111_q_net
  );
  register112 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample41_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register112_q_net
  );
  register113 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample42_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register113_q_net
  );
  register114 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample43_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register114_q_net
  );
  register115 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample44_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register115_q_net
  );
  register116 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample45_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register116_q_net
  );
  register117 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample46_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register117_q_net
  );
  register118 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register139_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register118_q_net
  );
  register119 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register140_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register119_q_net
  );
  register12 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register32_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register12_q_net
  );
  register120 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register141_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register120_q_net
  );
  register121 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register142_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register121_q_net
  );
  register122 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register143_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register122_q_net
  );
  register123 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register144_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register123_q_net
  );
  register124 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register145_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register124_q_net
  );
  register125 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register132_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register125_q_net
  );
  register126 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register133_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register126_q_net
  );
  register127 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register134_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register127_q_net
  );
  register128 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register135_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register128_q_net
  );
  register129 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register136_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register129_q_net
  );
  register13 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register33_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register13_q_net
  );
  register130 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register137_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register130_q_net
  );
  register131 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register138_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register131_q_net
  );
  register132 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample47_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register132_q_net
  );
  register133 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample48_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register133_q_net
  );
  register134 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample49_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register134_q_net
  );
  register135 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample50_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register135_q_net
  );
  register136 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample51_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register136_q_net
  );
  register137 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample52_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register137_q_net
  );
  register138 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample53_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register138_q_net
  );
  register139 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample54_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register139_q_net
  );
  register14 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register34_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register14_q_net
  );
  register140 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample55_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register140_q_net
  );
  register141 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample56_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register141_q_net
  );
  register142 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample57_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register142_q_net
  );
  register143 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample58_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register143_q_net
  );
  register144 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample59_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register144_q_net
  );
  register145 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample60_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register145_q_net
  );
  register146 : entity work.appmodel_xlregister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register147_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register146_q_net
  );
  register147 : entity work.appmodel_xlregister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav2_p1_chan_sel_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register147_q_net
  );
  register148 : entity work.appmodel_xlregister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register149_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register148_q_net
  );
  register149 : entity work.appmodel_xlregister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav2_p2_chan_sel_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register149_q_net
  );
  register15 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register35_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register15_q_net
  );
  register150 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register151_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register150_q_net
  );
  register151 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav2_p1_window_start_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register151_q_net
  );
  register152 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register153_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register152_q_net
  );
  register153 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav2_p1_window_stop_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register153_q_net
  );
  register154 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register155_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register154_q_net
  );
  register155 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav2_p2_window_start_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register155_q_net
  );
  register156 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register157_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register156_q_net
  );
  register157 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav2_p2_window_stop_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register157_q_net
  );
  register158 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => register159_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register158_q_net
  );
  register159 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav2_nco_phase_reset_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register159_q_net
  );
  register16 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register36_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register16_q_net
  );
  register160 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register161_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register160_q_net
  );
  register161 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav2_nco_phase_adj_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register161_q_net
  );
  register17 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register47_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register17_q_net
  );
  register18 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register48_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register18_q_net
  );
  register19 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register49_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register19_q_net
  );
  register198 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register199_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register198_q_net
  );
  register199 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav1_p1_calibration_coeff_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register199_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample7_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register2_q_net
  );
  register20 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register50_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register20_q_net
  );
  register200 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register201_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register200_q_net
  );
  register201 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav1_p2_calibration_coeff_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register201_q_net
  );
  register202 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register203_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register202_q_net
  );
  register203 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav2_p1_calibration_coeff_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register203_q_net
  );
  register204 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register205_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register204_q_net
  );
  register205 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav2_p2_calibration_coeff_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register205_q_net
  );
  register21 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register51_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register21_q_net
  );
  register22 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register52_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register22_q_net
  );
  register23 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register53_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register23_q_net
  );
  register24 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register54_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register24_q_net
  );
  register25 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register55_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register25_q_net
  );
  register26 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register56_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register26_q_net
  );
  register27 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => versionnumber_op_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register27_q_net
  );
  register28 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register57_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register28_q_net
  );
  register29 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register58_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register29_q_net
  );
  register3 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register39_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register3_q_net
  );
  register30 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register59_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register30_q_net
  );
  register31 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample8_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register31_q_net
  );
  register32 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample9_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register32_q_net
  );
  register33 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample10_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register33_q_net
  );
  register34 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample12_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register34_q_net
  );
  register35 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample13_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register35_q_net
  );
  register36 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample14_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register36_q_net
  );
  register39 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample11_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register39_q_net
  );
  register4 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register40_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register4_q_net
  );
  register40 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample1_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register40_q_net
  );
  register41 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample2_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register41_q_net
  );
  register42 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample3_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register42_q_net
  );
  register43 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample4_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register43_q_net
  );
  register44 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample5_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register44_q_net
  );
  register45 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample6_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register45_q_net
  );
  register46 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample22_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register46_q_net
  );
  register47 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample26_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register47_q_net
  );
  register48 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample27_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register48_q_net
  );
  register49 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample28_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register49_q_net
  );
  register5 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register41_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register5_q_net
  );
  register50 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample16_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register50_q_net
  );
  register51 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample18_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register51_q_net
  );
  register52 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample19_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register52_q_net
  );
  register53 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample20_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register53_q_net
  );
  register54 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample17_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register54_q_net
  );
  register55 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample15_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register55_q_net
  );
  register56 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample21_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register56_q_net
  );
  register57 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample23_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register57_q_net
  );
  register58 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample24_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register58_q_net
  );
  register59 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample25_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register59_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register42_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register6_q_net
  );
  register60 : entity work.appmodel_xlregister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register61_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register60_q_net
  );
  register61 : entity work.appmodel_xlregister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav1_p1_chan_sel_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register61_q_net
  );
  register62 : entity work.appmodel_xlregister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register63_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register62_q_net
  );
  register63 : entity work.appmodel_xlregister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav1_p2_chan_sel_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register63_q_net
  );
  register64 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register65_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register64_q_net
  );
  register65 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav1_p1_window_start_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register65_q_net
  );
  register66 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000001100100"
  )
  port map (
    en => "1",
    rst => "0",
    d => register67_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register66_q_net
  );
  register67 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000001100100"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav1_p1_window_stop_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register67_q_net
  );
  register68 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register69_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register68_q_net
  );
  register69 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav1_p2_window_start_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register69_q_net
  );
  register7 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register43_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register7_q_net
  );
  register70 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000001100100"
  )
  port map (
    en => "1",
    rst => "0",
    d => register71_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register70_q_net
  );
  register71 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000001100100"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav1_p2_window_stop_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register71_q_net
  );
  register72 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => register73_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register72_q_net
  );
  register73 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav1_nco_phase_reset_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register73_q_net
  );
  register74 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register75_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register74_q_net
  );
  register75 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => cav1_nco_phase_adj_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register75_q_net
  );
  register76 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register77_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register76_q_net
  );
  register77 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample29_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register77_q_net
  );
  register78 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register79_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register78_q_net
  );
  register79 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample30_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register79_q_net
  );
  register8 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register44_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register8_q_net
  );
  register80 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register81_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register80_q_net
  );
  register81 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample31_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register81_q_net
  );
  register82 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register83_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register82_q_net
  );
  register83 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => down_sample32_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register83_q_net
  );
  register88 : entity work.appmodel_xlregister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register89_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register88_q_net
  );
  register89 : entity work.appmodel_xlregister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => rf_ref_chan_sel_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register89_q_net
  );
  register9 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register45_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register9_q_net
  );
  register90 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register111_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register90_q_net
  );
  register91 : entity work.appmodel_xlregister 
  generic map (
    d_width => 20,
    init_value => b"00000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register112_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register91_q_net
  );
  register92 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register113_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register92_q_net
  );
  register93 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register114_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register93_q_net
  );
  register94 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register115_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register94_q_net
  );
  register95 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register116_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register95_q_net
  );
  register96 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register117_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register96_q_net
  );
  register97 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register104_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register97_q_net
  );
  register98 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register105_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register98_q_net
  );
  register99 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register106_q_net,
    clk => dest_clk_net,
    ce => dest_ce_net,
    q => register99_q_net
  );
  up_sample1 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register72_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c1_nco_reset
  );
  up_sample10 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 4,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 4
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register88_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => ref_chan_sel
  );
  up_sample11 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 4,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 4
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register146_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c2p1_chan_sel
  );
  up_sample12 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 4,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 4
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register148_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c2p2_chan_sel
  );
  up_sample13 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register150_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c2p1_win_start
  );
  up_sample14 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register152_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c2p1_win_stop
  );
  up_sample15 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register154_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c2p2_win_start
  );
  up_sample16 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register156_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c2p2_win_stop
  );
  up_sample17 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register158_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c2_nco_reset
  );
  up_sample18 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 32,
    d_width => 32,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 32,
    q_width => 32
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register160_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c2_nco_phi
  );
  up_sample19 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 4,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 4
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register60_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c1p1_chan_sel
  );
  up_sample2 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register70_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c1p2_win_stop
  );
  up_sample3 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register68_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c1p2_win_start
  );
  up_sample38 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 17,
    d_width => 18,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register198_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c1p1_cal_coeff
  );
  up_sample39 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 17,
    d_width => 18,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register200_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c1p2_cal_coeff
  );
  up_sample4 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register66_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c1p1_win_stop
  );
  up_sample40 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 17,
    d_width => 18,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register202_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c2p1_cal_coeff
  );
  up_sample41 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 17,
    d_width => 18,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register204_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c2p2_cal_coeff
  );
  up_sample5 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register64_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c1p1_win_start
  );
  up_sample6 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 4,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 4
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register62_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c1p2_chan_sel
  );
  up_sample7 : entity work.appmodel_xlusamp 
  generic map (
    copy_samples => 1,
    d_arith => xlUnsigned,
    d_bin_pt => 32,
    d_width => 32,
    latency => 1,
    q_arith => xlUnsigned,
    q_bin_pt => 32,
    q_width => 32
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    d => register74_q_net,
    src_clk => dest_clk_net,
    src_ce => dest_ce_net,
    dest_clk => q_clk_net,
    dest_ce => d_ce_net,
    q => c1_nco_phi
  );
  versionnumber : entity work.sysgen_constant_fa820cfb9b 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => versionnumber_op_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/BSA_streaming
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_bsa_streaming is
  port (
    diag7data_x0 : in std_logic_vector( 18-1 downto 0 );
    diag6data_x0 : in std_logic_vector( 18-1 downto 0 );
    diag5data_x0 : in std_logic_vector( 18-1 downto 0 );
    diag4data_x0 : in std_logic_vector( 18-1 downto 0 );
    diag3data_x0 : in std_logic_vector( 18-1 downto 0 );
    diag2data_x0 : in std_logic_vector( 18-1 downto 0 );
    wfdata_0 : in std_logic_vector( 18-1 downto 0 );
    wfdata_1 : in std_logic_vector( 18-1 downto 0 );
    wfdata_2 : in std_logic_vector( 18-1 downto 0 );
    wfdata_3 : in std_logic_vector( 18-1 downto 0 );
    wfdata_4 : in std_logic_vector( 18-1 downto 0 );
    wfdata_5 : in std_logic_vector( 18-1 downto 0 );
    wfdata_6 : in std_logic_vector( 18-1 downto 0 );
    wfdata_7 : in std_logic_vector( 18-1 downto 0 );
    wfvalid_0 : in std_logic_vector( 1-1 downto 0 );
    wfvalid_1 : in std_logic_vector( 1-1 downto 0 );
    wfvalid_2 : in std_logic_vector( 1-1 downto 0 );
    wfvalid_3 : in std_logic_vector( 1-1 downto 0 );
    wfvalid_4 : in std_logic_vector( 1-1 downto 0 );
    wfvalid_5 : in std_logic_vector( 1-1 downto 0 );
    wfvalid_6 : in std_logic_vector( 1-1 downto 0 );
    wfvalid_7 : in std_logic_vector( 1-1 downto 0 );
    diag1data_x0 : in std_logic_vector( 18-1 downto 0 );
    diag8data : in std_logic_vector( 18-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    diagnrst_ctl : out std_logic_vector( 1-1 downto 0 );
    diag6fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag2sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag3sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag4sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag5sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag6sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag7sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag8sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag5fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag7fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag4fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag3fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag2fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag1fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag8fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diagnsync_ctl : out std_logic_vector( 1-1 downto 0 );
    diag1sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag1data : out std_logic_vector( 32-1 downto 0 );
    diag1fixed : out std_logic_vector( 1-1 downto 0 );
    diag1sevr : out std_logic_vector( 2-1 downto 0 );
    diag2data : out std_logic_vector( 32-1 downto 0 );
    diag2fixed : out std_logic_vector( 1-1 downto 0 );
    diag2sevr : out std_logic_vector( 2-1 downto 0 );
    diag3data : out std_logic_vector( 32-1 downto 0 );
    diag3fixed : out std_logic_vector( 1-1 downto 0 );
    diag3sevr : out std_logic_vector( 2-1 downto 0 );
    diag4data : out std_logic_vector( 32-1 downto 0 );
    diag4fixed : out std_logic_vector( 1-1 downto 0 );
    diag4sevr : out std_logic_vector( 2-1 downto 0 );
    diag5data : out std_logic_vector( 32-1 downto 0 );
    diag5fixed : out std_logic_vector( 1-1 downto 0 );
    diag5sevr : out std_logic_vector( 2-1 downto 0 );
    diag6data : out std_logic_vector( 32-1 downto 0 );
    diag6fixed : out std_logic_vector( 1-1 downto 0 );
    diag6sevr : out std_logic_vector( 2-1 downto 0 );
    diag7data : out std_logic_vector( 32-1 downto 0 );
    diag7fixed : out std_logic_vector( 1-1 downto 0 );
    diag7sevr : out std_logic_vector( 2-1 downto 0 );
    diag8data_x0 : out std_logic_vector( 32-1 downto 0 );
    diag8fixed : out std_logic_vector( 1-1 downto 0 );
    diag8sevr : out std_logic_vector( 2-1 downto 0 );
    diagnclk : out std_logic_vector( 1-1 downto 0 );
    diagnrst : out std_logic_vector( 1-1 downto 0 );
    diagnsync : out std_logic_vector( 1-1 downto 0 );
    wfdata_0_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_1_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_2_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_3_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_4_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_5_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_6_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_7_x0 : out std_logic_vector( 32-1 downto 0 );
    wfvalid_0_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_1_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_2_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_3_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_4_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_5_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_6_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_7_x0 : out std_logic_vector( 1-1 downto 0 );
    diag9fixed : out std_logic_vector( 1-1 downto 0 );
    diag10fixed : out std_logic_vector( 1-1 downto 0 );
    diag11fixed : out std_logic_vector( 1-1 downto 0 );
    diag12fixed : out std_logic_vector( 1-1 downto 0 );
    diag13fixed : out std_logic_vector( 1-1 downto 0 );
    diag14fixed : out std_logic_vector( 1-1 downto 0 );
    diag15fixed : out std_logic_vector( 1-1 downto 0 );
    diag16fixed : out std_logic_vector( 1-1 downto 0 );
    diag26fixed : out std_logic_vector( 1-1 downto 0 );
    diag27fixed : out std_logic_vector( 1-1 downto 0 );
    diag28fixed : out std_logic_vector( 1-1 downto 0 );
    diag29fixed : out std_logic_vector( 1-1 downto 0 );
    diag30fixed : out std_logic_vector( 1-1 downto 0 );
    diag31fixed : out std_logic_vector( 1-1 downto 0 );
    diag17fixed : out std_logic_vector( 1-1 downto 0 );
    diag18fixed : out std_logic_vector( 1-1 downto 0 );
    diag19fixed : out std_logic_vector( 1-1 downto 0 );
    diag20fixed : out std_logic_vector( 1-1 downto 0 );
    diag21fixed : out std_logic_vector( 1-1 downto 0 );
    diag22fixed : out std_logic_vector( 1-1 downto 0 );
    diag23fixed : out std_logic_vector( 1-1 downto 0 );
    diag24fixed : out std_logic_vector( 1-1 downto 0 );
    diag25fixed : out std_logic_vector( 1-1 downto 0 );
    diag9sevr : out std_logic_vector( 2-1 downto 0 );
    diag10sevr : out std_logic_vector( 2-1 downto 0 );
    diag11sevr : out std_logic_vector( 2-1 downto 0 );
    diag12sevr : out std_logic_vector( 2-1 downto 0 );
    diag13sevr : out std_logic_vector( 2-1 downto 0 );
    diag14sevr : out std_logic_vector( 2-1 downto 0 );
    diag15sevr : out std_logic_vector( 2-1 downto 0 );
    diag16sevr : out std_logic_vector( 2-1 downto 0 );
    diag26sevr : out std_logic_vector( 2-1 downto 0 );
    diag27sevr : out std_logic_vector( 2-1 downto 0 );
    diag28sevr : out std_logic_vector( 2-1 downto 0 );
    diag29sevr : out std_logic_vector( 2-1 downto 0 );
    diag30sevr : out std_logic_vector( 2-1 downto 0 );
    diag31sevr : out std_logic_vector( 2-1 downto 0 );
    diag17sevr : out std_logic_vector( 2-1 downto 0 );
    diag18sevr : out std_logic_vector( 2-1 downto 0 );
    diag19sevr : out std_logic_vector( 2-1 downto 0 );
    diag20sevr : out std_logic_vector( 2-1 downto 0 );
    diag21sevr : out std_logic_vector( 2-1 downto 0 );
    diag22sevr : out std_logic_vector( 2-1 downto 0 );
    diag23sevr : out std_logic_vector( 2-1 downto 0 );
    diag24sevr : out std_logic_vector( 2-1 downto 0 );
    diag25sevr : out std_logic_vector( 2-1 downto 0 )
  );
end appmodel_bsa_streaming;
architecture structural of appmodel_bsa_streaming is 
  signal constant7_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant8_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant1_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert17_dout_net : std_logic_vector( 2-1 downto 0 );
  signal constant32_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant20_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant19_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant18_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant17_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant16_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant13_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant22_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant23_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant24_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant25_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant27_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant28_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant29_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant30_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant31_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant32_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant33_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant34_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant35_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant36_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant37_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant38_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant21_op_net : std_logic_vector( 18-1 downto 0 );
  signal mux2_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert13_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux4_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert6_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert14_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux5_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert7_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert15_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux6_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert8_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert16_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux7_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert9_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert57_dout_net : std_logic_vector( 1-1 downto 0 );
  signal mux8_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert10_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert18_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux9_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert19_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux3_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert12_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert20_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert27_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert28_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert29_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert30_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert31_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert32_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert33_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert34_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert35_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert36_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert37_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert38_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert39_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert40_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert41_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert42_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert54_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert55_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert56_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert58_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert51_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert52_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert53_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert67_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert68_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert69_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert70_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert63_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert64_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert62_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert71_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert72_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert73_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert74_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert59_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert60_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert61_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert66_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert65_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert75_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert76_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert77_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert78_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert79_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert80_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert81_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert91_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert92_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert93_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert94_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert95_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert96_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert82_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert83_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert84_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert85_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert86_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert87_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert88_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert89_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert90_dout_net : std_logic_vector( 2-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal register13_q_net : std_logic_vector( 3-1 downto 0 );
  signal register12_q_net : std_logic_vector( 3-1 downto 0 );
  signal register11_q_net : std_logic_vector( 3-1 downto 0 );
  signal register10_q_net : std_logic_vector( 3-1 downto 0 );
  signal register9_q_net : std_logic_vector( 3-1 downto 0 );
  signal register8_q_net : std_logic_vector( 3-1 downto 0 );
  signal register7_q_net : std_logic_vector( 3-1 downto 0 );
  signal register3_q_net : std_logic_vector( 1-1 downto 0 );
  signal register6_q_net : std_logic_vector( 3-1 downto 0 );
  signal convert21_dout_net : std_logic_vector( 18-1 downto 0 );
  signal register21_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert22_dout_net : std_logic_vector( 18-1 downto 0 );
  signal register22_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert23_dout_net : std_logic_vector( 18-1 downto 0 );
  signal register23_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert24_dout_net : std_logic_vector( 18-1 downto 0 );
  signal register24_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert25_dout_net : std_logic_vector( 18-1 downto 0 );
  signal register25_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert26_dout_net : std_logic_vector( 18-1 downto 0 );
  signal register26_q_net : std_logic_vector( 18-1 downto 0 );
  signal register27_q_net : std_logic_vector( 18-1 downto 0 );
  signal register28_q_net : std_logic_vector( 18-1 downto 0 );
  signal register29_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 18-1 downto 0 );
  signal register30_q_net : std_logic_vector( 18-1 downto 0 );
  signal register31_q_net : std_logic_vector( 18-1 downto 0 );
  signal register32_q_net : std_logic_vector( 18-1 downto 0 );
  signal register33_q_net : std_logic_vector( 18-1 downto 0 );
  signal register34_q_net : std_logic_vector( 18-1 downto 0 );
  signal register35_q_net : std_logic_vector( 1-1 downto 0 );
  signal register36_q_net : std_logic_vector( 1-1 downto 0 );
  signal register37_q_net : std_logic_vector( 1-1 downto 0 );
  signal register38_q_net : std_logic_vector( 1-1 downto 0 );
  signal register39_q_net : std_logic_vector( 1-1 downto 0 );
  signal register4_q_net : std_logic_vector( 1-1 downto 0 );
  signal register40_q_net : std_logic_vector( 1-1 downto 0 );
  signal register41_q_net : std_logic_vector( 1-1 downto 0 );
  signal register42_q_net : std_logic_vector( 1-1 downto 0 );
  signal convert43_dout_net : std_logic_vector( 32-1 downto 0 );
  signal register43_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert44_dout_net : std_logic_vector( 32-1 downto 0 );
  signal register44_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert45_dout_net : std_logic_vector( 32-1 downto 0 );
  signal register45_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert46_dout_net : std_logic_vector( 32-1 downto 0 );
  signal register46_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert47_dout_net : std_logic_vector( 32-1 downto 0 );
  signal register47_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert48_dout_net : std_logic_vector( 32-1 downto 0 );
  signal register48_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert49_dout_net : std_logic_vector( 32-1 downto 0 );
  signal register49_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 18-1 downto 0 );
  signal register5_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert50_dout_net : std_logic_vector( 32-1 downto 0 );
  signal register50_q_net : std_logic_vector( 18-1 downto 0 );
  signal register20_q_net : std_logic_vector( 1-1 downto 0 );
  signal register19_q_net : std_logic_vector( 1-1 downto 0 );
  signal register18_q_net : std_logic_vector( 1-1 downto 0 );
  signal register17_q_net : std_logic_vector( 1-1 downto 0 );
  signal counter_op_net : std_logic_vector( 1-1 downto 0 );
  signal register85_q_net : std_logic_vector( 3-1 downto 0 );
  signal register84_q_net : std_logic_vector( 3-1 downto 0 );
  signal register83_q_net : std_logic_vector( 3-1 downto 0 );
  signal register82_q_net : std_logic_vector( 3-1 downto 0 );
  signal register96_q_net : std_logic_vector( 3-1 downto 0 );
  signal register93_q_net : std_logic_vector( 3-1 downto 0 );
  signal register88_q_net : std_logic_vector( 3-1 downto 0 );
  signal register86_q_net : std_logic_vector( 3-1 downto 0 );
  signal register_q_net : std_logic_vector( 18-1 downto 0 );
  signal constant40_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant39_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant38_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant37_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant36_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant35_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant34_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant33_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal register51_q_net : std_logic_vector( 1-1 downto 0 );
  signal register58_q_net : std_logic_vector( 1-1 downto 0 );
  signal register57_q_net : std_logic_vector( 1-1 downto 0 );
  signal register56_q_net : std_logic_vector( 1-1 downto 0 );
  signal register55_q_net : std_logic_vector( 1-1 downto 0 );
  signal register54_q_net : std_logic_vector( 1-1 downto 0 );
  signal constant48_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant47_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant46_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant45_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant44_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant43_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant42_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant13_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal constant14_op_net : std_logic_vector( 3-1 downto 0 );
  signal constant15_op_net : std_logic_vector( 3-1 downto 0 );
  signal constant16_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal constant17_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal register61_q_net : std_logic_vector( 1-1 downto 0 );
  signal register60_q_net : std_logic_vector( 1-1 downto 0 );
  signal register59_q_net : std_logic_vector( 1-1 downto 0 );
  signal register66_q_net : std_logic_vector( 1-1 downto 0 );
  signal register69_q_net : std_logic_vector( 1-1 downto 0 );
  signal register68_q_net : std_logic_vector( 1-1 downto 0 );
  signal register74_q_net : std_logic_vector( 1-1 downto 0 );
  signal register73_q_net : std_logic_vector( 1-1 downto 0 );
  signal register72_q_net : std_logic_vector( 1-1 downto 0 );
  signal register71_q_net : std_logic_vector( 1-1 downto 0 );
  signal register70_q_net : std_logic_vector( 1-1 downto 0 );
  signal register65_q_net : std_logic_vector( 1-1 downto 0 );
  signal register64_q_net : std_logic_vector( 1-1 downto 0 );
  signal register63_q_net : std_logic_vector( 1-1 downto 0 );
  signal register62_q_net : std_logic_vector( 1-1 downto 0 );
  signal constant56_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant55_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant54_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant53_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant52_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant51_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant50_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant63_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant62_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant61_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant60_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant59_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant58_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant18_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal constant19_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal constant20_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal constant21_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal constant22_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal constant23_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal constant24_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal constant25_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal constant26_op_net : std_logic_vector( 3-1 downto 0 );
  signal constant27_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal register77_q_net : std_logic_vector( 3-1 downto 0 );
  signal register76_q_net : std_logic_vector( 3-1 downto 0 );
  signal register75_q_net : std_logic_vector( 3-1 downto 0 );
  signal register67_q_net : std_logic_vector( 3-1 downto 0 );
  signal register81_q_net : std_logic_vector( 3-1 downto 0 );
  signal register80_q_net : std_logic_vector( 3-1 downto 0 );
  signal register79_q_net : std_logic_vector( 3-1 downto 0 );
  signal register78_q_net : std_logic_vector( 3-1 downto 0 );
  signal constant28_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal constant29_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal constant30_op_net_x0 : std_logic_vector( 3-1 downto 0 );
  signal constant65_op_net : std_logic_vector( 3-1 downto 0 );
  signal constant4_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant5_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant6_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant31_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant3_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant64_op_net : std_logic_vector( 3-1 downto 0 );
  signal register2_q_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 1-1 downto 0 );
  signal register16_q_net : std_logic_vector( 1-1 downto 0 );
  signal register15_q_net : std_logic_vector( 1-1 downto 0 );
  signal register14_q_net : std_logic_vector( 1-1 downto 0 );
  signal register91_q_net : std_logic_vector( 3-1 downto 0 );
  signal register90_q_net : std_logic_vector( 3-1 downto 0 );
  signal register89_q_net : std_logic_vector( 3-1 downto 0 );
  signal register87_q_net : std_logic_vector( 3-1 downto 0 );
  signal register95_q_net : std_logic_vector( 3-1 downto 0 );
  signal register94_q_net : std_logic_vector( 3-1 downto 0 );
  signal register92_q_net : std_logic_vector( 3-1 downto 0 );
  signal constant57_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant41_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant49_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant9_op_net : std_logic_vector( 3-1 downto 0 );
  signal constant10_op_net : std_logic_vector( 3-1 downto 0 );
  signal constant11_op_net : std_logic_vector( 3-1 downto 0 );
  signal constant12_op_net : std_logic_vector( 3-1 downto 0 );
  signal register53_q_net : std_logic_vector( 1-1 downto 0 );
  signal register52_q_net : std_logic_vector( 1-1 downto 0 );
begin
  diagnrst_ctl <= constant31_op_net_x0;
  diag6fixed_x0 <= constant3_op_net;
  diag2sevr_ctl <= constant64_op_net;
  diag3sevr_ctl <= constant64_op_net;
  diag4sevr_ctl <= constant64_op_net;
  diag5sevr_ctl <= constant64_op_net;
  diag6sevr_ctl <= constant64_op_net;
  diag7sevr_ctl <= constant64_op_net;
  diag8sevr_ctl <= constant64_op_net;
  diag5fixed_x0 <= constant4_op_net;
  diag7fixed_x0 <= constant2_op_net;
  diag4fixed_x0 <= constant5_op_net;
  diag3fixed_x0 <= constant6_op_net;
  diag2fixed_x0 <= constant7_op_net;
  diag1fixed_x0 <= constant8_op_net;
  diag8fixed_x0 <= constant1_op_net;
  diagnsync_ctl <= constant32_op_net_x0;
  diag1sevr_ctl <= constant64_op_net;
  constant20_op_net <= diag7data_x0;
  constant19_op_net <= diag6data_x0;
  constant18_op_net <= diag5data_x0;
  constant17_op_net <= diag4data_x0;
  constant16_op_net <= diag3data_x0;
  constant13_op_net <= diag2data_x0;
  constant22_op_net <= wfdata_0;
  constant23_op_net <= wfdata_1;
  constant24_op_net <= wfdata_2;
  constant25_op_net <= wfdata_3;
  constant27_op_net <= wfdata_4;
  constant28_op_net <= wfdata_5;
  constant29_op_net <= wfdata_6;
  constant30_op_net <= wfdata_7;
  constant31_op_net <= wfvalid_0;
  constant32_op_net <= wfvalid_1;
  constant33_op_net <= wfvalid_2;
  constant34_op_net <= wfvalid_3;
  constant35_op_net <= wfvalid_4;
  constant36_op_net <= wfvalid_5;
  constant37_op_net <= wfvalid_6;
  constant38_op_net <= wfvalid_7;
  constant_op_net <= diag1data_x0;
  constant21_op_net <= diag8data;
  diag1data <= mux2_y_net;
  diag1fixed <= convert4_dout_net;
  diag1sevr <= convert13_dout_net;
  diag2data <= mux4_y_net;
  diag2fixed <= convert6_dout_net;
  diag2sevr <= convert14_dout_net;
  diag3data <= mux5_y_net;
  diag3fixed <= convert7_dout_net;
  diag3sevr <= convert15_dout_net;
  diag4data <= mux6_y_net;
  diag4fixed <= convert8_dout_net;
  diag4sevr <= convert16_dout_net;
  diag5data <= mux7_y_net;
  diag5fixed <= convert9_dout_net;
  diag5sevr <= convert17_dout_net;
  diag6data <= mux8_y_net;
  diag6fixed <= convert10_dout_net;
  diag6sevr <= convert18_dout_net;
  diag7data <= mux9_y_net;
  diag7fixed <= convert11_dout_net;
  diag7sevr <= convert19_dout_net;
  diag8data_x0 <= mux3_y_net;
  diag8fixed <= convert12_dout_net;
  diag8sevr <= convert20_dout_net;
  diagnclk <= convert2_dout_net;
  diagnrst <= convert_dout_net;
  diagnsync <= convert1_dout_net;
  wfdata_0_x0 <= convert27_dout_net;
  wfdata_1_x0 <= convert28_dout_net;
  wfdata_2_x0 <= convert29_dout_net;
  wfdata_3_x0 <= convert30_dout_net;
  wfdata_4_x0 <= convert31_dout_net;
  wfdata_5_x0 <= convert32_dout_net;
  wfdata_6_x0 <= convert33_dout_net;
  wfdata_7_x0 <= convert34_dout_net;
  wfvalid_0_x0 <= convert35_dout_net;
  wfvalid_1_x0 <= convert36_dout_net;
  wfvalid_2_x0 <= convert37_dout_net;
  wfvalid_3_x0 <= convert38_dout_net;
  wfvalid_4_x0 <= convert39_dout_net;
  wfvalid_5_x0 <= convert40_dout_net;
  wfvalid_6_x0 <= convert41_dout_net;
  wfvalid_7_x0 <= convert42_dout_net;
  diag9fixed <= convert54_dout_net;
  diag10fixed <= convert55_dout_net;
  diag11fixed <= convert56_dout_net;
  diag12fixed <= convert57_dout_net;
  diag13fixed <= convert58_dout_net;
  diag14fixed <= convert51_dout_net;
  diag15fixed <= convert52_dout_net;
  diag16fixed <= convert53_dout_net;
  diag26fixed <= convert67_dout_net;
  diag27fixed <= convert68_dout_net;
  diag28fixed <= convert69_dout_net;
  diag29fixed <= convert70_dout_net;
  diag30fixed <= convert63_dout_net;
  diag31fixed <= convert64_dout_net;
  diag17fixed <= convert62_dout_net;
  diag18fixed <= convert71_dout_net;
  diag19fixed <= convert72_dout_net;
  diag20fixed <= convert73_dout_net;
  diag21fixed <= convert74_dout_net;
  diag22fixed <= convert59_dout_net;
  diag23fixed <= convert60_dout_net;
  diag24fixed <= convert61_dout_net;
  diag25fixed <= convert66_dout_net;
  diag9sevr <= convert65_dout_net;
  diag10sevr <= convert75_dout_net;
  diag11sevr <= convert76_dout_net;
  diag12sevr <= convert77_dout_net;
  diag13sevr <= convert78_dout_net;
  diag14sevr <= convert79_dout_net;
  diag15sevr <= convert80_dout_net;
  diag16sevr <= convert81_dout_net;
  diag26sevr <= convert91_dout_net;
  diag27sevr <= convert92_dout_net;
  diag28sevr <= convert93_dout_net;
  diag29sevr <= convert94_dout_net;
  diag30sevr <= convert95_dout_net;
  diag31sevr <= convert96_dout_net;
  diag17sevr <= convert82_dout_net;
  diag18sevr <= convert83_dout_net;
  diag19sevr <= convert84_dout_net;
  diag20sevr <= convert85_dout_net;
  diag21sevr <= convert86_dout_net;
  diag22sevr <= convert87_dout_net;
  diag23sevr <= convert88_dout_net;
  diag24sevr <= convert89_dout_net;
  diag25sevr <= convert90_dout_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant1 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant1_op_net
  );
  constant2 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant2_op_net
  );
  constant3 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant3_op_net
  );
  constant4 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant4_op_net
  );
  constant5 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant5_op_net
  );
  constant6 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant6_op_net
  );
  constant7 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant7_op_net
  );
  constant8 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant8_op_net
  );
  convert : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert_dout_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  convert10 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register16_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert10_dout_net
  );
  convert11 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register15_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert11_dout_net
  );
  convert12 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register14_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert12_dout_net
  );
  convert13 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register13_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert13_dout_net
  );
  convert14 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register12_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert14_dout_net
  );
  convert15 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register11_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert15_dout_net
  );
  convert16 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register10_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert16_dout_net
  );
  convert17 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register9_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert17_dout_net
  );
  convert18 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register8_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert18_dout_net
  );
  convert19 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register7_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert19_dout_net
  );
  convert2 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlSaturate,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register3_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert2_dout_net
  );
  convert20 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register6_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert20_dout_net
  );
  convert21 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register21_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert21_dout_net
  );
  convert22 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register22_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert22_dout_net
  );
  convert23 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register23_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert23_dout_net
  );
  convert24 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register24_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert24_dout_net
  );
  convert25 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register25_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert25_dout_net
  );
  convert26 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register26_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert26_dout_net
  );
  convert27 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register27_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert27_dout_net
  );
  convert28 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register28_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert28_dout_net
  );
  convert29 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register29_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert29_dout_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => constant_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert3_dout_net
  );
  convert30 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register30_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert30_dout_net
  );
  convert31 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register31_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert31_dout_net
  );
  convert32 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register32_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert32_dout_net
  );
  convert33 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register33_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert33_dout_net
  );
  convert34 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register34_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert34_dout_net
  );
  convert35 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register35_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert35_dout_net
  );
  convert36 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register36_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert36_dout_net
  );
  convert37 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register37_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert37_dout_net
  );
  convert38 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register38_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert38_dout_net
  );
  convert39 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register39_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert39_dout_net
  );
  convert4 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register4_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert4_dout_net
  );
  convert40 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register40_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert40_dout_net
  );
  convert41 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register41_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert41_dout_net
  );
  convert42 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register42_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert42_dout_net
  );
  convert43 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register43_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert43_dout_net
  );
  convert44 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register44_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert44_dout_net
  );
  convert45 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register45_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert45_dout_net
  );
  convert46 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register46_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert46_dout_net
  );
  convert47 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register47_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert47_dout_net
  );
  convert48 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register48_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert48_dout_net
  );
  convert49 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register49_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert49_dout_net
  );
  convert5 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register5_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert5_dout_net
  );
  convert50 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 0,
    dout_width => 32,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register50_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    dout => convert50_dout_net
  );
  convert6 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register20_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert6_dout_net
  );
  convert7 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register19_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert7_dout_net
  );
  convert8 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register18_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert8_dout_net
  );
  convert9 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register17_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert9_dout_net
  );
  counter : entity work.sysgen_counter_ff3e17b056 
  port map (
    clr => '0',
    clk => q_clk_net,
    ce => d_ce_net,
    op => counter_op_net
  );
  convert82 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register85_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert82_dout_net
  );
  convert83 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register84_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert83_dout_net
  );
  convert84 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register83_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert84_dout_net
  );
  convert85 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register82_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert85_dout_net
  );
  convert86 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register96_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert86_dout_net
  );
  convert87 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register93_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert87_dout_net
  );
  convert88 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register88_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert88_dout_net
  );
  convert89 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register86_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert89_dout_net
  );
  mux2 : entity work.sysgen_mux_2368cdf062 
  port map (
    clr => '0',
    sel => constant8_op_net,
    d0 => register_q_net,
    d1 => convert43_dout_net,
    clk => q_clk_net,
    ce => d_ce_net,
    y => mux2_y_net
  );
  mux3 : entity work.sysgen_mux_2368cdf062 
  port map (
    clr => '0',
    sel => constant1_op_net,
    d0 => convert26_dout_net,
    d1 => convert44_dout_net,
    clk => q_clk_net,
    ce => d_ce_net,
    y => mux3_y_net
  );
  mux4 : entity work.sysgen_mux_2368cdf062 
  port map (
    clr => '0',
    sel => constant7_op_net,
    d0 => convert5_dout_net,
    d1 => convert50_dout_net,
    clk => q_clk_net,
    ce => d_ce_net,
    y => mux4_y_net
  );
  mux5 : entity work.sysgen_mux_2368cdf062 
  port map (
    clr => '0',
    sel => constant6_op_net,
    d0 => convert21_dout_net,
    d1 => convert45_dout_net,
    clk => q_clk_net,
    ce => d_ce_net,
    y => mux5_y_net
  );
  mux6 : entity work.sysgen_mux_2368cdf062 
  port map (
    clr => '0',
    sel => constant5_op_net,
    d0 => convert22_dout_net,
    d1 => convert46_dout_net,
    clk => q_clk_net,
    ce => d_ce_net,
    y => mux6_y_net
  );
  mux7 : entity work.sysgen_mux_2368cdf062 
  port map (
    clr => '0',
    sel => constant4_op_net,
    d0 => convert23_dout_net,
    d1 => convert47_dout_net,
    clk => q_clk_net,
    ce => d_ce_net,
    y => mux7_y_net
  );
  mux8 : entity work.sysgen_mux_2368cdf062 
  port map (
    clr => '0',
    sel => constant3_op_net,
    d0 => convert24_dout_net,
    d1 => convert48_dout_net,
    clk => q_clk_net,
    ce => d_ce_net,
    y => mux8_y_net
  );
  mux9 : entity work.sysgen_mux_2368cdf062 
  port map (
    clr => '0',
    sel => constant2_op_net,
    d0 => convert25_dout_net,
    d1 => convert49_dout_net,
    clk => q_clk_net,
    ce => d_ce_net,
    y => mux9_y_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => convert3_dout_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant32_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register1_q_net
  );
  register10 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant64_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register10_q_net
  );
  register11 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant64_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register11_q_net
  );
  register12 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant64_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register12_q_net
  );
  register13 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant64_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register13_q_net
  );
  register14 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant40_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register14_q_net
  );
  register15 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant39_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register15_q_net
  );
  register16 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant38_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register16_q_net
  );
  register17 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant37_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register17_q_net
  );
  register18 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant36_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register18_q_net
  );
  register19 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant35_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register19_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant31_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register2_q_net
  );
  register20 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant34_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register20_q_net
  );
  register21 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant16_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register21_q_net
  );
  register22 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant17_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register22_q_net
  );
  register23 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant18_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register23_q_net
  );
  register24 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant19_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register24_q_net
  );
  register25 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant20_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register25_q_net
  );
  register26 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant21_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register26_q_net
  );
  register27 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant22_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register27_q_net
  );
  register28 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant23_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register28_q_net
  );
  register29 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant24_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register29_q_net
  );
  register3 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => counter_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register3_q_net
  );
  register30 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant25_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register30_q_net
  );
  register31 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant27_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register31_q_net
  );
  register32 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant28_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register32_q_net
  );
  register33 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant29_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register33_q_net
  );
  register34 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant30_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register34_q_net
  );
  register35 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant31_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register35_q_net
  );
  register36 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant32_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register36_q_net
  );
  register37 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant33_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register37_q_net
  );
  register38 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant34_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register38_q_net
  );
  register39 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant35_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register39_q_net
  );
  register4 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant33_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register4_q_net
  );
  register40 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant36_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register40_q_net
  );
  register41 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant37_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register41_q_net
  );
  register42 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant38_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register42_q_net
  );
  register43 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register43_q_net
  );
  register44 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant21_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register44_q_net
  );
  register45 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant16_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register45_q_net
  );
  register46 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant17_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register46_q_net
  );
  register47 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant18_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register47_q_net
  );
  register48 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant19_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register48_q_net
  );
  register49 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant20_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register49_q_net
  );
  register5 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant13_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register5_q_net
  );
  register50 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant13_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register50_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant64_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register6_q_net
  );
  register7 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant64_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register7_q_net
  );
  register8 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant64_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register8_q_net
  );
  register9 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant64_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register9_q_net
  );
  constant37 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant37_op_net_x0
  );
  convert90 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register91_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert90_dout_net
  );
  convert91 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register90_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert91_dout_net
  );
  convert92 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register89_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert92_dout_net
  );
  convert93 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register87_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert93_dout_net
  );
  convert94 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register95_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert94_dout_net
  );
  convert95 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register94_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert95_dout_net
  );
  convert96 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register92_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert96_dout_net
  );
  constant64 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant64_op_net
  );
  constant57 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant57_op_net
  );
  constant41 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant41_op_net
  );
  constant49 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant49_op_net
  );
  constant9 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant9_op_net
  );
  constant10 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant10_op_net
  );
  constant11 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant11_op_net
  );
  constant12 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant12_op_net
  );
  convert51 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register53_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert51_dout_net
  );
  convert52 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register52_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert52_dout_net
  );
  convert53 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register51_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert53_dout_net
  );
  convert54 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register58_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert54_dout_net
  );
  convert55 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register57_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert55_dout_net
  );
  convert56 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register56_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert56_dout_net
  );
  convert57 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register55_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert57_dout_net
  );
  convert58 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register54_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert58_dout_net
  );
  register51 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant48_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register51_q_net
  );
  register52 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant47_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register52_q_net
  );
  register53 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant46_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register53_q_net
  );
  register54 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant45_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register54_q_net
  );
  register55 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant44_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register55_q_net
  );
  register56 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant43_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register56_q_net
  );
  register57 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant42_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register57_q_net
  );
  register58 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant41_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register58_q_net
  );
  constant13 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net_x0
  );
  constant14 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant14_op_net
  );
  constant15 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant15_op_net
  );
  constant16 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant16_op_net_x0
  );
  constant17 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant17_op_net_x0
  );
  convert59 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register61_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert59_dout_net
  );
  convert60 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register60_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert60_dout_net
  );
  convert61 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register59_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert61_dout_net
  );
  convert62 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register66_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert62_dout_net
  );
  convert63 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register69_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert63_dout_net
  );
  convert64 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register68_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert64_dout_net
  );
  constant35 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant35_op_net_x0
  );
  convert66 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register74_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert66_dout_net
  );
  convert67 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register73_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert67_dout_net
  );
  convert68 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register72_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert68_dout_net
  );
  convert69 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register71_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert69_dout_net
  );
  convert70 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register70_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert70_dout_net
  );
  convert71 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register65_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert71_dout_net
  );
  convert72 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register64_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert72_dout_net
  );
  convert73 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register63_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert73_dout_net
  );
  convert74 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register62_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert74_dout_net
  );
  register59 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant56_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register59_q_net
  );
  register60 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant55_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register60_q_net
  );
  register61 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant54_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register61_q_net
  );
  register62 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant53_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register62_q_net
  );
  register63 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant52_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register63_q_net
  );
  register64 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant51_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register64_q_net
  );
  register65 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant50_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register65_q_net
  );
  register66 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant49_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register66_q_net
  );
  register68 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant63_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register68_q_net
  );
  register69 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant62_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register69_q_net
  );
  register70 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant61_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register70_q_net
  );
  register71 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant60_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register71_q_net
  );
  register72 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant59_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register72_q_net
  );
  register73 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant58_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register73_q_net
  );
  register74 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant57_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register74_q_net
  );
  constant50 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant50_op_net
  );
  constant18 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant18_op_net_x0
  );
  constant19 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant19_op_net_x0
  );
  constant20 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant20_op_net_x0
  );
  constant21 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant21_op_net_x0
  );
  constant58 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant58_op_net
  );
  constant36 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant36_op_net_x0
  );
  constant22 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant22_op_net_x0
  );
  constant23 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant23_op_net_x0
  );
  constant24 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant24_op_net_x0
  );
  constant25 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant25_op_net_x0
  );
  constant26 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant26_op_net
  );
  constant27 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant27_op_net_x0
  );
  convert65 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register77_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert65_dout_net
  );
  convert75 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register76_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert75_dout_net
  );
  convert76 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register75_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert76_dout_net
  );
  convert77 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register67_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert77_dout_net
  );
  convert78 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register81_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert78_dout_net
  );
  convert79 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register80_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert79_dout_net
  );
  convert80 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register79_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert80_dout_net
  );
  convert81 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 3,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 2,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register78_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert81_dout_net
  );
  constant28 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant28_op_net_x0
  );
  constant29 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant29_op_net_x0
  );
  constant30 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant30_op_net_x0
  );
  register67 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant12_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register67_q_net
  );
  register75 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant11_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register75_q_net
  );
  register76 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant10_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register76_q_net
  );
  register77 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant9_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register77_q_net
  );
  register78 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant16_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register78_q_net
  );
  register79 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant15_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register79_q_net
  );
  register80 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant14_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register80_q_net
  );
  register81 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant13_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register81_q_net
  );
  constant65 : entity work.sysgen_constant_a4f0c4a132 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant65_op_net
  );
  register82 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant20_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register82_q_net
  );
  register83 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant19_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register83_q_net
  );
  register84 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant18_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register84_q_net
  );
  register85 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant17_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register85_q_net
  );
  register86 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant24_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register86_q_net
  );
  register87 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant28_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register87_q_net
  );
  register88 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant23_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register88_q_net
  );
  register89 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant27_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register89_q_net
  );
  register90 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant26_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register90_q_net
  );
  register91 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant25_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register91_q_net
  );
  register92 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant65_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register92_q_net
  );
  register93 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant22_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register93_q_net
  );
  register94 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant30_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register94_q_net
  );
  register95 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant29_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register95_q_net
  );
  register96 : entity work.appmodel_xlregister 
  generic map (
    d_width => 3,
    init_value => b"000"
  )
  port map (
    en => "1",
    rst => "0",
    d => constant21_op_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register96_q_net
  );
  constant38 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant38_op_net_x0
  );
  constant39 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant39_op_net
  );
  constant40 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant40_op_net
  );
  constant42 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant42_op_net
  );
  constant43 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant43_op_net
  );
  constant44 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant44_op_net
  );
  constant45 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant45_op_net
  );
  constant46 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant46_op_net
  );
  constant47 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant47_op_net
  );
  constant48 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant48_op_net
  );
  constant31 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant31_op_net_x0
  );
  constant32 : entity work.sysgen_constant_a6b4957d83 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant32_op_net_x0
  );
  constant33 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant33_op_net_x0
  );
  constant34 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant34_op_net_x0
  );
  constant51 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant51_op_net
  );
  constant52 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant52_op_net
  );
  constant53 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant53_op_net
  );
  constant54 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant54_op_net
  );
  constant55 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant55_op_net
  );
  constant56 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant56_op_net
  );
  constant59 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant59_op_net
  );
  constant60 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant60_op_net
  );
  constant61 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant61_op_net
  );
  constant62 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant62_op_net
  );
  constant63 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant63_op_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/DDC NCO/four_point_avg1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_four_point_avg1 is
  port (
    in1 : in std_logic_vector( 18-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out1 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_four_point_avg1;
architecture structural of appmodel_four_point_avg1 is 
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 18-1 downto 0 );
  signal cmult_p_net : std_logic_vector( 18-1 downto 0 );
  signal cmult1_p_net : std_logic_vector( 18-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 18-1 downto 0 );
  signal cmult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal cmult3_p_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay2_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 18-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 18-1 downto 0 );
  signal phase : std_logic_vector( 18-1 downto 0 );
  signal d_clk_net : std_logic;
begin
  out1 <= addsub3_s_net;
  phase <= in1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 16,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 19,
    core_name0 => "appmodel_c_addsub_v12_0_i0",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 19,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 16,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult_p_net,
    b => cmult1_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 16,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 19,
    core_name0 => "appmodel_c_addsub_v12_0_i0",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 19,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 16,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult2_p_net,
    b => cmult3_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 16,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 19,
    core_name0 => "appmodel_c_addsub_v12_0_i0",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 19,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 16,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub2_s_net,
    b => addsub1_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  cmult : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_bin_pt => 14,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 16,
    c_output_width => 34,
    core_name0 => "appmodel_mult_gen_v12_0_i1",
    extra_registers => 1,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => phase,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult_p_net
  );
  cmult1 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_bin_pt => 14,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 16,
    c_output_width => 34,
    core_name0 => "appmodel_mult_gen_v12_0_i1",
    extra_registers => 1,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult1_p_net
  );
  cmult2 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_bin_pt => 14,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 16,
    c_output_width => 34,
    core_name0 => "appmodel_mult_gen_v12_0_i1",
    extra_registers => 1,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult2_p_net
  );
  cmult3 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_bin_pt => 14,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 16,
    c_output_width => 34,
    core_name0 => "appmodel_mult_gen_v12_0_i1",
    extra_registers => 1,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay3_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult3_p_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => phase,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/DDC NCO
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_ddc_nco is
  port (
    phase_ctrl : in std_logic_vector( 32-1 downto 0 );
    phase_reset : in std_logic_vector( 1-1 downto 0 );
    flo_c1p2_window : in std_logic_vector( 1-1 downto 0 );
    cav1_p2_if_i : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_q : in std_logic_vector( 18-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    tvalid : out std_logic;
    sine : out std_logic_vector( 26-1 downto 0 );
    cosine : out std_logic_vector( 26-1 downto 0 );
    nco_out_1 : out std_logic_vector( 26-1 downto 0 );
    nco_out_2 : out std_logic_vector( 26-1 downto 0 );
    gateway_out10 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15 : out std_logic_vector( 18-1 downto 0 );
    gateway_out16 : out std_logic_vector( 18-1 downto 0 );
    gateway_out3 : out std_logic_vector( 26-1 downto 0 );
    gateway_out4 : out std_logic_vector( 18-1 downto 0 );
    gateway_out5 : out std_logic_vector( 26-1 downto 0 );
    gateway_out6 : out std_logic_vector( 18-1 downto 0 );
    gateway_out7 : out std_logic_vector( 34-1 downto 0 );
    gateway_out8 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_ddc_nco;
architecture structural of appmodel_ddc_nco is 
  signal dds_compiler_6_0_m_axis_data_tvalid_net : std_logic;
  signal nco_sin : std_logic_vector( 26-1 downto 0 );
  signal nco_cos : std_logic_vector( 26-1 downto 0 );
  signal down_sample6_q_net : std_logic_vector( 32-1 downto 0 );
  signal down_sample5_q_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 18-1 downto 0 );
  signal phase : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 18-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tdata_real_net : std_logic_vector( 34-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tvalid_net : std_logic_vector( 1-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub3_s_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tvalid_net : std_logic;
  signal down_sample3_q_net : std_logic;
  signal clock_enable_probe1_q_net : std_logic_vector( 1-1 downto 0 );
  signal constant21_op_net : std_logic_vector( 1-1 downto 0 );
  signal dds_compiler_6_0_s_axis_phase_tready_net : std_logic;
  signal fir_compiler_7_2_s_axis_data_tready_net : std_logic;
begin
  tvalid <= dds_compiler_6_0_m_axis_data_tvalid_net;
  sine <= nco_sin;
  cosine <= nco_cos;
  nco_out_1 <= nco_sin;
  nco_out_2 <= nco_cos;
  down_sample6_q_net <= phase_ctrl;
  down_sample5_q_net <= phase_reset;
  convert2_dout_net <= flo_c1p2_window;
  down_sample1_q_net <= cav1_p2_if_i;
  down_sample_q_net <= cav1_p2_if_q;
  gateway_out10 <= mult2_p_net;
  gateway_out15 <= convert_dout_net;
  gateway_out16 <= convert1_dout_net;
  gateway_out3 <= nco_sin;
  gateway_out4 <= phase;
  gateway_out5 <= nco_cos;
  gateway_out6 <= cordic_6_0_m_axis_dout_tdata_real_net;
  gateway_out7 <= fir_compiler_7_2_m_axis_data_tdata_real_net;
  gateway_out8 <= fir_compiler_7_2_m_axis_data_tvalid_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  four_point_avg1 : entity work.appmodel_four_point_avg1 
  port map (
    in1 => phase,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out1 => addsub3_s_net
  );
  cordic_6_0 : entity work.xlcordic_9a094de110515cd9af19450d39b68da3 
  port map (
    s_axis_cartesian_tvalid => down_sample3_q_net,
    s_axis_cartesian_tdata_imag => convert_dout_net,
    s_axis_cartesian_tdata_real => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => phase,
    m_axis_dout_tdata_real => cordic_6_0_m_axis_dout_tdata_real_net
  );
  clock_enable_probe1 : entity work.appmodel_xlceprobe 
  generic map (
    d_width => 18,
    q_width => 1
  )
  port map (
    d => down_sample_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => clock_enable_probe1_q_net
  );
  constant21 : entity work.sysgen_constant_a6b4957d83 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant21_op_net
  );
  convert : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 16,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => down_sample_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert_dout_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 16,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => down_sample1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  dds_compiler_6_0 : entity work.xldds_compiler_6ff3ac3ee54f181bad19e02cc7597eff 
  port map (
    s_axis_phase_tvalid => constant21_op_net(0),
    s_axis_phase_tdata_resync => down_sample5_q_net,
    s_axis_phase_tdata_pinc => down_sample6_q_net,
    m_axis_data_tready => constant21_op_net(0),
    clk => d_clk_net,
    ce => q_ce_net,
    s_axis_phase_tready => dds_compiler_6_0_s_axis_phase_tready_net,
    m_axis_data_tvalid => dds_compiler_6_0_m_axis_data_tvalid_net,
    m_axis_data_tdata_sine => nco_sin,
    m_axis_data_tdata_cosine => nco_cos
  );
  down_sample3 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => clock_enable_probe1_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q(0) => down_sample3_q_net
  );
  fir_compiler_7_2 : entity work.xlfir_compiler_3e9784e743af4e9803379b6c81c999a3 
  port map (
    s_axis_data_tdata_real => mult2_p_net,
    src_clk => d_clk_net,
    src_ce => q_ce_net,
    clk => q_clk_net,
    ce => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    clk_logic_12 => d_clk_net,
    ce_logic_12 => q_ce_net,
    s_axis_data_tready => fir_compiler_7_2_s_axis_data_tready_net,
    m_axis_data_tvalid => fir_compiler_7_2_m_axis_data_tvalid_net(0),
    m_axis_data_tdata_real => fir_compiler_7_2_m_axis_data_tdata_real_net
  );
  mult2 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 1,
    b_arith => xlSigned,
    b_bin_pt => 16,
    b_width => 18,
    c_a_type => 1,
    c_a_width => 1,
    c_b_type => 0,
    c_b_width => 18,
    c_baat => 1,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i0",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 15,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => convert2_dout_net,
    b => addsub3_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult2_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/IQ_integration
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_iq_integration_x0 is
  port (
    cav_windowed_imag : in std_logic_vector( 18-1 downto 0 );
    cav_windowed_real : in std_logic_vector( 18-1 downto 0 );
    ref_windowed_i : in std_logic_vector( 18-1 downto 0 );
    ref_windowed_q : in std_logic_vector( 18-1 downto 0 );
    window_profile : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    cav_int_q : out std_logic_vector( 20-1 downto 0 );
    cav_int_i : out std_logic_vector( 20-1 downto 0 );
    ref_int_i : out std_logic_vector( 20-1 downto 0 );
    ref_int_q : out std_logic_vector( 20-1 downto 0 );
    gateway_out : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out15 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7 : out std_logic_vector( 32-1 downto 0 );
    gateway_out9 : out std_logic_vector( 32-1 downto 0 )
  );
end appmodel_iq_integration_x0;
architecture structural of appmodel_iq_integration_x0 is 
  signal convert10_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert9_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 20-1 downto 0 );
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult4_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult5_p_net : std_logic_vector( 18-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 32-1 downto 0 );
  signal register12_q_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator_q_net : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter1_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net : std_logic_vector( 32-1 downto 0 );
  signal register11_q_net : std_logic_vector( 32-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert6_dout_net : std_logic_vector( 1-1 downto 0 );
begin
  cav_int_q <= convert10_dout_net;
  cav_int_i <= convert9_dout_net;
  ref_int_i <= convert2_dout_net;
  ref_int_q <= convert4_dout_net;
  mult2_p_net <= cav_windowed_imag;
  mult_p_net <= cav_windowed_real;
  mult4_p_net <= ref_windowed_i;
  mult5_p_net <= ref_windowed_q;
  convert11_dout_net <= window_profile;
  gateway_out <= inverter_op_net;
  gateway_out1 <= convert2_dout_net;
  gateway_out11 <= register1_q_net;
  gateway_out12 <= convert4_dout_net;
  gateway_out13 <= register12_q_net;
  gateway_out15 <= register2_q_net;
  gateway_out16 <= inverter3_op_net;
  gateway_out17 <= accumulator3_q_net;
  gateway_out2 <= inverter2_op_net;
  gateway_out22 <= convert9_dout_net;
  gateway_out23 <= convert10_dout_net;
  gateway_out3 <= accumulator_q_net;
  gateway_out4 <= accumulator2_q_net;
  gateway_out6 <= inverter1_op_net;
  gateway_out7 <= accumulator1_q_net;
  gateway_out9 <= register11_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  accumulator : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult2_p_net,
    rst => inverter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator_q_net
  );
  accumulator1 : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult_p_net,
    rst => inverter1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator1_q_net
  );
  accumulator2 : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult4_p_net,
    rst => inverter2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator2_q_net
  );
  accumulator3 : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult5_p_net,
    rst => inverter3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator3_q_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  convert10 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register12_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert10_dout_net
  );
  convert2 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert2_dout_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  convert4 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert4_dout_net
  );
  convert5 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert5_dout_net
  );
  convert6 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert6_dout_net
  );
  convert9 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register11_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert9_dout_net
  );
  inverter : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert5_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter_op_net
  );
  inverter1 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert6_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter1_op_net
  );
  inverter2 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter2_op_net
  );
  inverter3 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert3_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter3_op_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator2_q_net,
    en => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register1_q_net
  );
  register11 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator1_q_net,
    en => convert6_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register11_q_net
  );
  register12 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator_q_net,
    en => convert5_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register12_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator3_q_net,
    en => convert3_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register2_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/IQ_integration1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_iq_integration1_x0 is
  port (
    cav_windowed_imag : in std_logic_vector( 18-1 downto 0 );
    cav_windowed_real : in std_logic_vector( 18-1 downto 0 );
    ref_windowed_i : in std_logic_vector( 18-1 downto 0 );
    ref_windowed_q : in std_logic_vector( 18-1 downto 0 );
    window_profile : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    cav_int_q : out std_logic_vector( 20-1 downto 0 );
    cav_int_i : out std_logic_vector( 20-1 downto 0 );
    ref_int_i : out std_logic_vector( 20-1 downto 0 );
    ref_int_q : out std_logic_vector( 20-1 downto 0 );
    gateway_out : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out15 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7 : out std_logic_vector( 32-1 downto 0 );
    gateway_out9 : out std_logic_vector( 32-1 downto 0 )
  );
end appmodel_iq_integration1_x0;
architecture structural of appmodel_iq_integration1_x0 is 
  signal convert10_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert9_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 20-1 downto 0 );
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult4_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult5_p_net : std_logic_vector( 18-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 32-1 downto 0 );
  signal register12_q_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator_q_net : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter1_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net : std_logic_vector( 32-1 downto 0 );
  signal register11_q_net : std_logic_vector( 32-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert6_dout_net : std_logic_vector( 1-1 downto 0 );
begin
  cav_int_q <= convert10_dout_net;
  cav_int_i <= convert9_dout_net;
  ref_int_i <= convert2_dout_net;
  ref_int_q <= convert4_dout_net;
  mult2_p_net <= cav_windowed_imag;
  mult_p_net <= cav_windowed_real;
  mult4_p_net <= ref_windowed_i;
  mult5_p_net <= ref_windowed_q;
  convert11_dout_net <= window_profile;
  gateway_out <= inverter_op_net;
  gateway_out1 <= convert2_dout_net;
  gateway_out11 <= register1_q_net;
  gateway_out12 <= convert4_dout_net;
  gateway_out13 <= register12_q_net;
  gateway_out15 <= register2_q_net;
  gateway_out16 <= inverter3_op_net;
  gateway_out17 <= accumulator3_q_net;
  gateway_out2 <= inverter2_op_net;
  gateway_out22 <= convert9_dout_net;
  gateway_out23 <= convert10_dout_net;
  gateway_out3 <= accumulator_q_net;
  gateway_out4 <= accumulator2_q_net;
  gateway_out6 <= inverter1_op_net;
  gateway_out7 <= accumulator1_q_net;
  gateway_out9 <= register11_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  accumulator : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult2_p_net,
    rst => inverter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator_q_net
  );
  accumulator1 : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult_p_net,
    rst => inverter1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator1_q_net
  );
  accumulator2 : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult4_p_net,
    rst => inverter2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator2_q_net
  );
  accumulator3 : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult5_p_net,
    rst => inverter3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator3_q_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  convert10 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register12_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert10_dout_net
  );
  convert2 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert2_dout_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  convert4 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert4_dout_net
  );
  convert5 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert5_dout_net
  );
  convert6 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert6_dout_net
  );
  convert9 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register11_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert9_dout_net
  );
  inverter : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert5_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter_op_net
  );
  inverter1 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert6_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter1_op_net
  );
  inverter2 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter2_op_net
  );
  inverter3 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert3_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter3_op_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator2_q_net,
    en => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register1_q_net
  );
  register11 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator1_q_net,
    en => convert6_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register11_q_net
  );
  register12 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator_q_net,
    en => convert5_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register12_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator3_q_net,
    en => convert3_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register2_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/Masking_window
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_masking_window_x0 is
  port (
    phi_reset_trig : in std_logic_vector( 1-1 downto 0 );
    start_pt : in std_logic_vector( 16-1 downto 0 );
    stop_pt : in std_logic_vector( 16-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    trig_reset : out std_logic_vector( 1-1 downto 0 );
    counter_x0 : out std_logic_vector( 16-1 downto 0 );
    eval_window : out std_logic_vector( 1-1 downto 0 );
    integral_trig : out std_logic_vector( 1-1 downto 0 );
    flo_window : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_masking_window_x0;
architecture structural of appmodel_masking_window_x0 is 
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal register35_q_net : std_logic_vector( 1-1 downto 0 );
  signal register33_q_net : std_logic_vector( 16-1 downto 0 );
  signal register34_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net : std_logic_vector( 1-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 16-1 downto 0 );
  signal constant11_op_net : std_logic_vector( 16-1 downto 0 );
  signal constant1_op_net : std_logic_vector( 16-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 16-1 downto 0 );
  signal constant3_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal logical1_y_net : std_logic_vector( 1-1 downto 0 );
  signal logical2_y_net : std_logic_vector( 1-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 1-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 1-1 downto 0 );
  signal relational6_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational5_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert8_dout_net : std_logic_vector( 1-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay2_q_net : std_logic_vector( 16-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 16-1 downto 0 );
  signal down_sample2_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay4_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay6_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay7_q_net : std_logic_vector( 16-1 downto 0 );
  signal register10_q_net : std_logic_vector( 1-1 downto 0 );
  signal register5_q_net : std_logic_vector( 16-1 downto 0 );
  signal register6_q_net : std_logic_vector( 16-1 downto 0 );
  signal relational2_op_net : std_logic_vector( 1-1 downto 0 );
begin
  trig_reset <= convert3_dout_net;
  counter_x0 <= counter_op_net;
  eval_window <= convert11_dout_net;
  integral_trig <= convert5_dout_net;
  flo_window <= convert2_dout_net;
  register35_q_net <= phi_reset_trig;
  register33_q_net <= start_pt;
  register34_q_net <= stop_pt;
  gateway_out1 <= delay5_q_net;
  gateway_out2 <= delay3_q_net;
  gateway_out27 <= relational4_op_net;
  gateway_out28 <= relational3_op_net;
  gateway_out29 <= convert11_dout_net;
  gateway_out3 <= convert7_dout_net;
  gateway_out5 <= convert5_dout_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 16,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 16,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 17,
    core_name0 => "appmodel_c_addsub_v12_0_i1",
    extra_registers => 0,
    full_s_arith => 1,
    full_s_width => 17,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlUnsigned,
    s_bin_pt => 0,
    s_width => 16
  )
  port map (
    clr => '0',
    en => "1",
    a => delay3_q_net,
    b => constant11_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  constant1 : entity work.sysgen_constant_ebc8def3a6 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant1_op_net
  );
  constant11 : entity work.sysgen_constant_a49bba6212 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant11_op_net
  );
  constant2 : entity work.sysgen_constant_c75c7568ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant2_op_net
  );
  constant3 : entity work.sysgen_constant_b9d15577be 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant3_op_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  convert11 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => logical1_y_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert11_dout_net
  );
  convert2 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => logical2_y_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert2_dout_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => down_sample_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  convert4 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational6_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert4_dout_net
  );
  convert5 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational5_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert5_dout_net
  );
  convert7 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert7_dout_net
  );
  convert8 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational4_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert8_dout_net
  );
  counter : entity work.appmodel_xlcounter_free 
  generic map (
    core_name0 => "appmodel_c_counter_binary_v12_0_i0",
    op_arith => xlUnsigned,
    op_width => 16
  )
  port map (
    en => "1",
    clr => '0',
    rst => convert3_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => counter_op_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => down_sample1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => down_sample2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
  delay4 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay4_q_net
  );
  delay5 : entity work.appmodel_xldelay 
  generic map (
    latency => 3,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay5_q_net
  );
  delay6 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay6_q_net
  );
  delay7 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay7_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register10_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register5_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  down_sample2 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register6_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample2_q_net
  );
  logical1 : entity work.sysgen_logical_378794f819 
  port map (
    clr => '0',
    d0 => convert8_dout_net,
    d1 => convert7_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    y => logical1_y_net
  );
  logical2 : entity work.sysgen_logical_378794f819 
  port map (
    clr => '0',
    d0 => convert4_dout_net,
    d1 => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    y => logical2_y_net
  );
  register10 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => register35_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register10_q_net
  );
  register5 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register33_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register5_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000001100100"
  )
  port map (
    en => "1",
    rst => "0",
    d => register34_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational1 : entity work.sysgen_relational_e98fcceecc 
  port map (
    clr => '0',
    a => delay7_q_net,
    b => constant2_op_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational1_op_net
  );
  relational2 : entity work.sysgen_relational_0ba61784a5 
  port map (
    clr => '0',
    a => counter_op_net,
    b => constant1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational2_op_net
  );
  relational3 : entity work.sysgen_relational_e98fcceecc 
  port map (
    clr => '0',
    a => delay4_q_net,
    b => delay3_q_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational3_op_net
  );
  relational4 : entity work.sysgen_relational_13cde72925 
  port map (
    clr => '0',
    a => delay1_q_net,
    b => delay2_q_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational4_op_net
  );
  relational5 : entity work.sysgen_relational_e98fcceecc 
  port map (
    clr => '0',
    a => counter_op_net,
    b => addsub1_s_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational5_op_net
  );
  relational6 : entity work.sysgen_relational_13cde72925 
  port map (
    clr => '0',
    a => delay6_q_net,
    b => constant3_op_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational6_op_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/PA_conversion1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_pa_conversion1_x0 is
  port (
    cav_int_q : in std_logic_vector( 20-1 downto 0 );
    cav_int_i : in std_logic_vector( 20-1 downto 0 );
    ref_int_q : in std_logic_vector( 20-1 downto 0 );
    ref_int_i : in std_logic_vector( 20-1 downto 0 );
    integration_trig : in std_logic_vector( 1-1 downto 0 );
    cal_coefficient : in std_logic_vector( 18-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    phi_diff : out std_logic_vector( 18-1 downto 0 );
    ref_phi_out : out std_logic_vector( 18-1 downto 0 );
    cav_phi_out : out std_logic_vector( 18-1 downto 0 );
    cav_amp_out : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_pa_conversion1_x0;
architecture structural of appmodel_pa_conversion1_x0 is 
  signal addsub_s_net : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert10_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert9_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 1-1 downto 0 );
  signal down_sample7_q_net : std_logic_vector( 18-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_1_m_axis_dout_tvalid_net : std_logic;
  signal cordic_6_0_1_m_axis_dout_tdata_phase_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_1_m_axis_dout_tdata_real_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_2_m_axis_dout_tvalid_net : std_logic;
  signal cordic_6_0_2_m_axis_dout_tdata_phase_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_2_m_axis_dout_tdata_real_net : std_logic_vector( 18-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 18-1 downto 0 );
  signal inverter1_op_net : std_logic_vector( 1-1 downto 0 );
  signal inverter2_op_net : std_logic_vector( 1-1 downto 0 );
  signal inverter3_op_net : std_logic_vector( 1-1 downto 0 );
begin
  phi_diff <= addsub_s_net;
  ref_phi_out <= register11_q_net;
  cav_phi_out <= register13_q_net;
  cav_amp_out <= register14_q_net;
  convert10_dout_net <= cav_int_q;
  convert9_dout_net <= cav_int_i;
  convert4_dout_net <= ref_int_q;
  convert2_dout_net <= ref_int_i;
  convert5_dout_net <= integration_trig;
  down_sample7_q_net <= cal_coefficient;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 15,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 19,
    core_name0 => "appmodel_c_addsub_v12_0_i2",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 19,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 15,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub1_s_net,
    b => register11_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub_s_net
  );
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 17,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 21,
    core_name0 => "appmodel_c_addsub_v12_0_i3",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 21,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 15,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => register13_q_net,
    b => down_sample7_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  cordic_6_0_1 : entity work.xlcordic_2a3c59e96d626a584ddbfc4f1e648788 
  port map (
    s_axis_cartesian_tvalid => convert5_dout_net(0),
    s_axis_cartesian_tdata_imag => convert10_dout_net,
    s_axis_cartesian_tdata_real => convert9_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_1_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => cordic_6_0_1_m_axis_dout_tdata_phase_net,
    m_axis_dout_tdata_real => cordic_6_0_1_m_axis_dout_tdata_real_net
  );
  cordic_6_0_2 : entity work.xlcordic_2a3c59e96d626a584ddbfc4f1e648788 
  port map (
    s_axis_cartesian_tvalid => convert5_dout_net(0),
    s_axis_cartesian_tdata_imag => convert4_dout_net,
    s_axis_cartesian_tdata_real => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_2_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => cordic_6_0_2_m_axis_dout_tdata_phase_net,
    m_axis_dout_tdata_real => cordic_6_0_2_m_axis_dout_tdata_real_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_1_m_axis_dout_tdata_real_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_1_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_2_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
  inverter1 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip(0) => cordic_6_0_2_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter1_op_net
  );
  inverter2 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip(0) => cordic_6_0_1_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter2_op_net
  );
  inverter3 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip(0) => cordic_6_0_1_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter3_op_net
  );
  register11 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay3_q_net,
    en => inverter1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register11_q_net
  );
  register13 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => inverter2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register13_q_net
  );
  register14 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => inverter3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register14_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/PA_conversion2
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_pa_conversion2_x0 is
  port (
    cav_int_q : in std_logic_vector( 20-1 downto 0 );
    cav_int_i : in std_logic_vector( 20-1 downto 0 );
    ref_int_q : in std_logic_vector( 20-1 downto 0 );
    ref_int_i : in std_logic_vector( 20-1 downto 0 );
    integration_trig : in std_logic_vector( 1-1 downto 0 );
    cal_coefficient : in std_logic_vector( 18-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    phi_diff : out std_logic_vector( 18-1 downto 0 );
    ref_phi_out : out std_logic_vector( 18-1 downto 0 );
    cav_phi_out : out std_logic_vector( 18-1 downto 0 );
    cav_amp_out : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_pa_conversion2_x0;
architecture structural of appmodel_pa_conversion2_x0 is 
  signal cordic_6_0_1_m_axis_dout_tvalid_net : std_logic;
  signal cordic_6_0_1_m_axis_dout_tdata_phase_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_1_m_axis_dout_tdata_real_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_2_m_axis_dout_tvalid_net : std_logic;
  signal cordic_6_0_2_m_axis_dout_tdata_phase_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_2_m_axis_dout_tdata_real_net : std_logic_vector( 18-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 18-1 downto 0 );
  signal inverter1_op_net : std_logic_vector( 1-1 downto 0 );
  signal inverter2_op_net : std_logic_vector( 1-1 downto 0 );
  signal inverter3_op_net : std_logic_vector( 1-1 downto 0 );
  signal addsub_s_net : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert10_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert9_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 1-1 downto 0 );
  signal down_sample3_q_net : std_logic_vector( 18-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 18-1 downto 0 );
begin
  phi_diff <= addsub_s_net;
  ref_phi_out <= register11_q_net;
  cav_phi_out <= register13_q_net;
  cav_amp_out <= register14_q_net;
  convert10_dout_net <= cav_int_q;
  convert9_dout_net <= cav_int_i;
  convert4_dout_net <= ref_int_q;
  convert2_dout_net <= ref_int_i;
  convert5_dout_net <= integration_trig;
  down_sample3_q_net <= cal_coefficient;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 15,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 19,
    core_name0 => "appmodel_c_addsub_v12_0_i2",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 19,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 15,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub1_s_net,
    b => register11_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub_s_net
  );
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 17,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 21,
    core_name0 => "appmodel_c_addsub_v12_0_i3",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 21,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 15,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => register13_q_net,
    b => down_sample3_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  cordic_6_0_1 : entity work.xlcordic_2a3c59e96d626a584ddbfc4f1e648788 
  port map (
    s_axis_cartesian_tvalid => convert5_dout_net(0),
    s_axis_cartesian_tdata_imag => convert10_dout_net,
    s_axis_cartesian_tdata_real => convert9_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_1_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => cordic_6_0_1_m_axis_dout_tdata_phase_net,
    m_axis_dout_tdata_real => cordic_6_0_1_m_axis_dout_tdata_real_net
  );
  cordic_6_0_2 : entity work.xlcordic_2a3c59e96d626a584ddbfc4f1e648788 
  port map (
    s_axis_cartesian_tvalid => convert5_dout_net(0),
    s_axis_cartesian_tdata_imag => convert4_dout_net,
    s_axis_cartesian_tdata_real => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_2_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => cordic_6_0_2_m_axis_dout_tdata_phase_net,
    m_axis_dout_tdata_real => cordic_6_0_2_m_axis_dout_tdata_real_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_1_m_axis_dout_tdata_real_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_1_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_2_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
  inverter1 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip(0) => cordic_6_0_2_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter1_op_net
  );
  inverter2 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip(0) => cordic_6_0_1_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter2_op_net
  );
  inverter3 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip(0) => cordic_6_0_1_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter3_op_net
  );
  register11 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay3_q_net,
    en => inverter1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register11_q_net
  );
  register13 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => inverter2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register13_q_net
  );
  register14 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => inverter3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register14_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/PA_select/Channel Select1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_channel_select1_x1 is
  port (
    in0 : in std_logic_vector( 18-1 downto 0 );
    in1 : in std_logic_vector( 18-1 downto 0 );
    ch_id : in std_logic_vector( 4-1 downto 0 );
    ch_sel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out0 : out std_logic_vector( 18-1 downto 0 );
    out1 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_channel_select1_x1;
architecture structural of appmodel_channel_select1_x1 is 
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal amp : std_logic_vector( 18-1 downto 0 );
  signal phase : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal register29_q_net : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant13_op_net : std_logic_vector( 4-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register3_q_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net : std_logic_vector( 18-1 downto 0 );
  signal register_q_net : std_logic_vector( 18-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register6_q_net : std_logic_vector( 1-1 downto 0 );
  signal last : std_logic_vector( 1-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
begin
  out0 <= down_sample1_q_net;
  out1 <= down_sample_q_net;
  amp <= in0;
  phase <= in1;
  channel <= ch_id;
  register29_q_net <= ch_sel;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant13 : entity work.sysgen_constant_6cd5a293ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => phase,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => amp,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay1_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register3_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register2_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register1_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register1_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register2_q_net
  );
  register3 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register3_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => last,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => channel,
    b => register29_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => channel,
    b => constant13_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => last
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/PA_select
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_pa_select_x0 is
  port (
    pa_bus_1 : in std_logic_vector( 18-1 downto 0 );
    pa_chan_sel : in std_logic_vector( 4-1 downto 0 );
    pa_bus_2 : in std_logic_vector( 18-1 downto 0 );
    pa_bus_3 : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    amp : out std_logic_vector( 18-1 downto 0 );
    phase : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_pa_select_x0;
architecture structural of appmodel_pa_select_x0 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal amp_x0 : std_logic_vector( 18-1 downto 0 );
  signal register29_q_net : std_logic_vector( 4-1 downto 0 );
  signal phase_x0 : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
begin
  amp <= down_sample1_q_net;
  phase <= down_sample_q_net;
  amp_x0 <= pa_bus_1;
  register29_q_net <= pa_chan_sel;
  phase_x0 <= pa_bus_2;
  channel <= pa_bus_3;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  channel_select1 : entity work.appmodel_channel_select1_x1 
  port map (
    in0 => amp_x0,
    in1 => phase_x0,
    ch_id => channel,
    ch_sel => register29_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out0 => down_sample1_q_net,
    out1 => down_sample_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/PA_select1/Channel Select1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_channel_select1_x3 is
  port (
    in0 : in std_logic_vector( 18-1 downto 0 );
    in1 : in std_logic_vector( 18-1 downto 0 );
    ch_id : in std_logic_vector( 4-1 downto 0 );
    ch_sel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out0 : out std_logic_vector( 18-1 downto 0 );
    out1 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_channel_select1_x3;
architecture structural of appmodel_channel_select1_x3 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal amp : std_logic_vector( 18-1 downto 0 );
  signal phase : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant13_op_net : std_logic_vector( 4-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register3_q_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net : std_logic_vector( 18-1 downto 0 );
  signal register_q_net : std_logic_vector( 18-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register6_q_net : std_logic_vector( 1-1 downto 0 );
  signal last : std_logic_vector( 1-1 downto 0 );
begin
  out0 <= down_sample1_q_net;
  out1 <= down_sample_q_net;
  amp <= in0;
  phase <= in1;
  channel <= ch_id;
  register30_q_net <= ch_sel;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant13 : entity work.sysgen_constant_6cd5a293ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => phase,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => amp,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay1_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register3_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register2_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register1_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register1_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register2_q_net
  );
  register3 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register3_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => last,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => channel,
    b => register30_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => channel,
    b => constant13_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => last
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/PA_select1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_pa_select1 is
  port (
    pa_bus_1 : in std_logic_vector( 18-1 downto 0 );
    pa_chan_sel : in std_logic_vector( 4-1 downto 0 );
    pa_bus_2 : in std_logic_vector( 18-1 downto 0 );
    pa_bus_3 : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    amp : out std_logic_vector( 18-1 downto 0 );
    phase : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_pa_select1;
architecture structural of appmodel_pa_select1 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal amp_x0 : std_logic_vector( 18-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal phase_x0 : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
begin
  amp <= down_sample1_q_net;
  phase <= down_sample_q_net;
  amp_x0 <= pa_bus_1;
  register30_q_net <= pa_chan_sel;
  phase_x0 <= pa_bus_2;
  channel <= pa_bus_3;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  channel_select1 : entity work.appmodel_channel_select1_x3 
  port map (
    in0 => amp_x0,
    in1 => phase_x0,
    ch_id => channel,
    ch_sel => register30_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out0 => down_sample1_q_net,
    out1 => down_sample_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/Subsystem1/Channel Select3
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_channel_select3_x3 is
  port (
    in0 : in std_logic_vector( 18-1 downto 0 );
    in1 : in std_logic_vector( 18-1 downto 0 );
    ch_id : in std_logic_vector( 4-1 downto 0 );
    ch_sel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out0 : out std_logic_vector( 18-1 downto 0 );
    out1 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_channel_select3_x3;
architecture structural of appmodel_channel_select3_x3 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal ddci : std_logic_vector( 18-1 downto 0 );
  signal ddcq : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel : std_logic_vector( 4-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant13_op_net : std_logic_vector( 4-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register3_q_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net : std_logic_vector( 18-1 downto 0 );
  signal register_q_net : std_logic_vector( 18-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register6_q_net : std_logic_vector( 1-1 downto 0 );
  signal last : std_logic_vector( 1-1 downto 0 );
begin
  out0 <= down_sample1_q_net;
  out1 <= down_sample_q_net;
  ddci <= in0;
  ddcq <= in1;
  ddcchannel <= ch_id;
  register30_q_net <= ch_sel;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant13 : entity work.sysgen_constant_6cd5a293ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => ddcq,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => ddci,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay1_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register3_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register2_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register1_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register1_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register2_q_net
  );
  register3 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register3_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => last,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => ddcchannel,
    b => register30_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => ddcchannel,
    b => constant13_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => last
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/Subsystem1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_subsystem1_x0 is
  port (
    iq_stream_in_1 : in std_logic_vector( 18-1 downto 0 );
    iq_chan_sel : in std_logic_vector( 4-1 downto 0 );
    iq_stream_in_2 : in std_logic_vector( 18-1 downto 0 );
    iq_stream_in_3 : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    ddci : out std_logic_vector( 18-1 downto 0 );
    ddcq : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_subsystem1_x0;
architecture structural of appmodel_subsystem1_x0 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal ddci_x0 : std_logic_vector( 18-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal ddcq_x0 : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
begin
  ddci <= down_sample1_q_net;
  ddcq <= down_sample_q_net;
  ddci_x0 <= iq_stream_in_1;
  register30_q_net <= iq_chan_sel;
  ddcq_x0 <= iq_stream_in_2;
  ddcchannel <= iq_stream_in_3;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  channel_select3 : entity work.appmodel_channel_select3_x3 
  port map (
    in0 => ddci_x0,
    in1 => ddcq_x0,
    ch_id => ddcchannel,
    ch_sel => register30_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out0 => down_sample1_q_net,
    out1 => down_sample_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/Subsystem3/Channel Select3
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_channel_select3_x2 is
  port (
    in0 : in std_logic_vector( 18-1 downto 0 );
    in1 : in std_logic_vector( 18-1 downto 0 );
    ch_id : in std_logic_vector( 4-1 downto 0 );
    ch_sel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out0 : out std_logic_vector( 18-1 downto 0 );
    out1 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_channel_select3_x2;
architecture structural of appmodel_channel_select3_x2 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal ddci : std_logic_vector( 18-1 downto 0 );
  signal ddcq : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel : std_logic_vector( 4-1 downto 0 );
  signal register29_q_net : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant13_op_net : std_logic_vector( 4-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register3_q_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net : std_logic_vector( 18-1 downto 0 );
  signal register_q_net : std_logic_vector( 18-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register6_q_net : std_logic_vector( 1-1 downto 0 );
  signal last : std_logic_vector( 1-1 downto 0 );
begin
  out0 <= down_sample1_q_net;
  out1 <= down_sample_q_net;
  ddci <= in0;
  ddcq <= in1;
  ddcchannel <= ch_id;
  register29_q_net <= ch_sel;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant13 : entity work.sysgen_constant_6cd5a293ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => ddcq,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => ddci,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay1_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register3_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register2_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register1_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register1_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register2_q_net
  );
  register3 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register3_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => last,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => ddcchannel,
    b => register29_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => ddcchannel,
    b => constant13_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => last
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/Subsystem3
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_subsystem3_x1 is
  port (
    iq_stream_in_1 : in std_logic_vector( 18-1 downto 0 );
    iq_chan_sel : in std_logic_vector( 4-1 downto 0 );
    iq_stream_in_2 : in std_logic_vector( 18-1 downto 0 );
    iq_stream_in_3 : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    ddci : out std_logic_vector( 18-1 downto 0 );
    ddcq : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_subsystem3_x1;
architecture structural of appmodel_subsystem3_x1 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal ddci_x0 : std_logic_vector( 18-1 downto 0 );
  signal register29_q_net : std_logic_vector( 4-1 downto 0 );
  signal ddcq_x0 : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
begin
  ddci <= down_sample1_q_net;
  ddcq <= down_sample_q_net;
  ddci_x0 <= iq_stream_in_1;
  register29_q_net <= iq_chan_sel;
  ddcq_x0 <= iq_stream_in_2;
  ddcchannel <= iq_stream_in_3;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  channel_select3 : entity work.appmodel_channel_select3_x2 
  port map (
    in0 => ddci_x0,
    in1 => ddcq_x0,
    ch_id => ddcchannel,
    ch_sel => register29_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out0 => down_sample1_q_net,
    out1 => down_sample_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p1_Masking_window
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_c1p1_masking_window_x0 is
  port (
    phi_reset_trig : in std_logic_vector( 1-1 downto 0 );
    start_pt : in std_logic_vector( 16-1 downto 0 );
    stop_pt : in std_logic_vector( 16-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    counter_x0 : out std_logic_vector( 16-1 downto 0 );
    eval_window : out std_logic_vector( 1-1 downto 0 );
    integral_trig : out std_logic_vector( 1-1 downto 0 );
    flo_window : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_c1p1_masking_window_x0;
architecture structural of appmodel_c1p1_masking_window_x0 is 
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal register35_q_net : std_logic_vector( 1-1 downto 0 );
  signal register31_q_net : std_logic_vector( 16-1 downto 0 );
  signal register32_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net : std_logic_vector( 1-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 16-1 downto 0 );
  signal constant11_op_net : std_logic_vector( 16-1 downto 0 );
  signal constant1_op_net : std_logic_vector( 16-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 16-1 downto 0 );
  signal constant3_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal logical1_y_net : std_logic_vector( 1-1 downto 0 );
  signal logical2_y_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 1-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 1-1 downto 0 );
  signal relational6_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational5_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert8_dout_net : std_logic_vector( 1-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay2_q_net : std_logic_vector( 16-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 16-1 downto 0 );
  signal down_sample2_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay4_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay6_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay7_q_net : std_logic_vector( 16-1 downto 0 );
  signal register10_q_net : std_logic_vector( 1-1 downto 0 );
  signal register5_q_net : std_logic_vector( 16-1 downto 0 );
  signal register6_q_net : std_logic_vector( 16-1 downto 0 );
  signal relational2_op_net : std_logic_vector( 1-1 downto 0 );
begin
  counter_x0 <= counter_op_net;
  eval_window <= convert11_dout_net;
  integral_trig <= convert5_dout_net;
  flo_window <= convert2_dout_net;
  register35_q_net <= phi_reset_trig;
  register31_q_net <= start_pt;
  register32_q_net <= stop_pt;
  gateway_out1 <= delay5_q_net;
  gateway_out2 <= delay3_q_net;
  gateway_out27 <= relational4_op_net;
  gateway_out28 <= relational3_op_net;
  gateway_out29 <= convert11_dout_net;
  gateway_out3 <= convert7_dout_net;
  gateway_out5 <= convert5_dout_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 16,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 16,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 17,
    core_name0 => "appmodel_c_addsub_v12_0_i1",
    extra_registers => 0,
    full_s_arith => 1,
    full_s_width => 17,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlUnsigned,
    s_bin_pt => 0,
    s_width => 16
  )
  port map (
    clr => '0',
    en => "1",
    a => delay3_q_net,
    b => constant11_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  constant1 : entity work.sysgen_constant_ebc8def3a6 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant1_op_net
  );
  constant11 : entity work.sysgen_constant_a49bba6212 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant11_op_net
  );
  constant2 : entity work.sysgen_constant_c75c7568ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant2_op_net
  );
  constant3 : entity work.sysgen_constant_b9d15577be 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant3_op_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  convert11 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => logical1_y_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert11_dout_net
  );
  convert2 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => logical2_y_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert2_dout_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => down_sample_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  convert4 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational6_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert4_dout_net
  );
  convert5 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational5_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert5_dout_net
  );
  convert7 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert7_dout_net
  );
  convert8 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational4_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert8_dout_net
  );
  counter : entity work.appmodel_xlcounter_free 
  generic map (
    core_name0 => "appmodel_c_counter_binary_v12_0_i0",
    op_arith => xlUnsigned,
    op_width => 16
  )
  port map (
    en => "1",
    clr => '0',
    rst => convert3_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => counter_op_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => down_sample1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => down_sample2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
  delay4 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay4_q_net
  );
  delay5 : entity work.appmodel_xldelay 
  generic map (
    latency => 3,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay5_q_net
  );
  delay6 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay6_q_net
  );
  delay7 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay7_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register10_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register5_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  down_sample2 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register6_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample2_q_net
  );
  logical1 : entity work.sysgen_logical_378794f819 
  port map (
    clr => '0',
    d0 => convert8_dout_net,
    d1 => convert7_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    y => logical1_y_net
  );
  logical2 : entity work.sysgen_logical_378794f819 
  port map (
    clr => '0',
    d0 => convert4_dout_net,
    d1 => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    y => logical2_y_net
  );
  register10 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => register35_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register10_q_net
  );
  register5 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register31_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register5_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000001100100"
  )
  port map (
    en => "1",
    rst => "0",
    d => register32_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational1 : entity work.sysgen_relational_e98fcceecc 
  port map (
    clr => '0',
    a => delay7_q_net,
    b => constant2_op_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational1_op_net
  );
  relational2 : entity work.sysgen_relational_0ba61784a5 
  port map (
    clr => '0',
    a => counter_op_net,
    b => constant1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational2_op_net
  );
  relational3 : entity work.sysgen_relational_e98fcceecc 
  port map (
    clr => '0',
    a => delay4_q_net,
    b => delay3_q_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational3_op_net
  );
  relational4 : entity work.sysgen_relational_13cde72925 
  port map (
    clr => '0',
    a => delay1_q_net,
    b => delay2_q_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational4_op_net
  );
  relational5 : entity work.sysgen_relational_e98fcceecc 
  port map (
    clr => '0',
    a => counter_op_net,
    b => addsub1_s_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational5_op_net
  );
  relational6 : entity work.sysgen_relational_13cde72925 
  port map (
    clr => '0',
    a => delay6_q_net,
    b => constant3_op_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational6_op_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p1_window_wf
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_c1p1_window_wf_x0 is
  port (
    cav_img : in std_logic_vector( 18-1 downto 0 );
    cav_real : in std_logic_vector( 18-1 downto 0 );
    ref_img : in std_logic_vector( 18-1 downto 0 );
    ref_real : in std_logic_vector( 18-1 downto 0 );
    window_profile : in std_logic_vector( 33-1 downto 0 );
    pt_window : in std_logic_vector( 1-1 downto 0 );
    delay_match_amt : in std_logic_vector( 16-1 downto 0 );
    pt_cntr : in std_logic_vector( 16-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    cav_windowed_imag : out std_logic_vector( 18-1 downto 0 );
    cav_windowed_real : out std_logic_vector( 18-1 downto 0 );
    ref_windowed_imag : out std_logic_vector( 18-1 downto 0 );
    ref_windowed_real : out std_logic_vector( 18-1 downto 0 );
    delayed_dc_img : out std_logic_vector( 18-1 downto 0 );
    delayed_dc_real : out std_logic_vector( 18-1 downto 0 );
    gateway_out35 : out std_logic_vector( 18-1 downto 0 );
    gateway_out38 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_c1p1_window_wf_x0;
architecture structural of appmodel_c1p1_window_wf_x0 is 
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult5_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult4_p_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert6_dout_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal constant1_op_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 16-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 16-1 downto 0 );
  signal constant1_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant13_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant15_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant17_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant20_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant22_op_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_douta_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_douta_net : std_logic_vector( 18-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 18-1 downto 0 );
begin
  cav_windowed_imag <= mult2_p_net;
  cav_windowed_real <= mult_p_net;
  ref_windowed_imag <= mult5_p_net;
  ref_windowed_real <= mult4_p_net;
  delayed_dc_img <= dual_port_ram_doutb_net;
  delayed_dc_real <= dual_port_ram1_doutb_net;
  convert5_dout_net <= cav_img;
  convert6_dout_net <= cav_real;
  down_sample_q_net <= ref_img;
  down_sample1_q_net <= ref_real;
  addsub3_s_net <= window_profile;
  convert11_dout_net <= pt_window;
  constant1_op_net_x0 <= delay_match_amt;
  counter_op_net <= pt_cntr;
  gateway_out35 <= mult4_p_net;
  gateway_out38 <= mult5_p_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 16,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 16,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 17,
    core_name0 => "appmodel_c_addsub_v12_0_i1",
    extra_registers => 0,
    full_s_arith => 1,
    full_s_width => 17,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlUnsigned,
    s_bin_pt => 0,
    s_width => 16
  )
  port map (
    clr => '0',
    en => "1",
    a => constant1_op_net_x0,
    b => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 16,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 16,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 17,
    core_name0 => "appmodel_c_addsub_v12_0_i1",
    extra_registers => 0,
    full_s_arith => 1,
    full_s_width => 17,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlUnsigned,
    s_bin_pt => 0,
    s_width => 16
  )
  port map (
    clr => '0',
    en => "1",
    a => constant1_op_net_x0,
    b => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  constant1 : entity work.sysgen_constant_a6b4957d83 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant1_op_net
  );
  constant13 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  constant15 : entity work.sysgen_constant_0900ba74ec 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant15_op_net
  );
  constant17 : entity work.sysgen_constant_a6b4957d83 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant17_op_net
  );
  constant20 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant20_op_net
  );
  constant22 : entity work.sysgen_constant_0900ba74ec 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant22_op_net
  );
  dual_port_ram : entity work.appmodel_xldpram 
  generic map (
    c_address_width_a => 16,
    c_address_width_b => 16,
    c_width_a => 18,
    c_width_b => 18,
    core_name0 => "appmodel_blk_mem_gen_i0",
    latency => 1
  )
  port map (
    ena => "1",
    enb => "1",
    rsta => "0",
    rstb => "0",
    addra => addsub1_s_net,
    dina => convert5_dout_net,
    wea => constant1_op_net,
    addrb => counter_op_net,
    dinb => constant15_op_net,
    web => constant13_op_net,
    a_clk => d_clk_net,
    a_ce => q_ce_net,
    b_clk => d_clk_net,
    b_ce => q_ce_net,
    douta => dual_port_ram_douta_net,
    doutb => dual_port_ram_doutb_net
  );
  dual_port_ram1 : entity work.appmodel_xldpram 
  generic map (
    c_address_width_a => 16,
    c_address_width_b => 16,
    c_width_a => 18,
    c_width_b => 18,
    core_name0 => "appmodel_blk_mem_gen_i0",
    latency => 1
  )
  port map (
    ena => "1",
    enb => "1",
    rsta => "0",
    rstb => "0",
    addra => addsub2_s_net,
    dina => convert6_dout_net,
    wea => constant17_op_net,
    addrb => counter_op_net,
    dinb => constant22_op_net,
    web => constant20_op_net,
    a_clk => d_clk_net,
    a_ce => q_ce_net,
    b_clk => d_clk_net,
    b_ce => q_ce_net,
    douta => dual_port_ram1_douta_net,
    doutb => dual_port_ram1_doutb_net
  );
  mult : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => mult1_p_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult_p_net
  );
  mult1 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 0,
    c_b_width => 33,
    c_baat => 18,
    c_output_width => 51,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i3",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 17,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => dual_port_ram1_doutb_net,
    b => addsub3_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult1_p_net
  );
  mult2 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => mult3_p_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult2_p_net
  );
  mult3 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 0,
    c_b_width => 33,
    c_baat => 18,
    c_output_width => 51,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i3",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 17,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => dual_port_ram_doutb_net,
    b => addsub3_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult3_p_net
  );
  mult4 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => down_sample1_q_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult4_p_net
  );
  mult5 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => down_sample_q_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult5_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_window_wf
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_c1p2_window_wf is
  port (
    cav_img : in std_logic_vector( 18-1 downto 0 );
    cav_real : in std_logic_vector( 18-1 downto 0 );
    ref_img : in std_logic_vector( 18-1 downto 0 );
    ref_real : in std_logic_vector( 18-1 downto 0 );
    window_profile : in std_logic_vector( 33-1 downto 0 );
    pt_window : in std_logic_vector( 1-1 downto 0 );
    delay_match_amt : in std_logic_vector( 16-1 downto 0 );
    pt_cntr : in std_logic_vector( 16-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    cav_windowed_imag : out std_logic_vector( 18-1 downto 0 );
    cav_windowed_real : out std_logic_vector( 18-1 downto 0 );
    ref_windowed_imag : out std_logic_vector( 18-1 downto 0 );
    ref_windowed_real : out std_logic_vector( 18-1 downto 0 );
    delayed_cav_dc_img : out std_logic_vector( 18-1 downto 0 );
    delayed_cav_dc_real : out std_logic_vector( 18-1 downto 0 );
    gateway_out35 : out std_logic_vector( 18-1 downto 0 );
    gateway_out38 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_c1p2_window_wf;
architecture structural of appmodel_c1p2_window_wf is 
  signal mult_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult5_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult4_p_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 16-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 16-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 16-1 downto 0 );
  signal constant1_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant13_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant15_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant17_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant20_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant22_op_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_douta_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_douta_net : std_logic_vector( 18-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
begin
  cav_windowed_imag <= mult2_p_net;
  cav_windowed_real <= mult_p_net;
  ref_windowed_imag <= mult5_p_net;
  ref_windowed_real <= mult4_p_net;
  delayed_cav_dc_img <= dual_port_ram_doutb_net;
  delayed_cav_dc_real <= dual_port_ram1_doutb_net;
  convert_dout_net <= cav_img;
  convert1_dout_net <= cav_real;
  down_sample_q_net <= ref_img;
  down_sample1_q_net <= ref_real;
  addsub3_s_net <= window_profile;
  convert11_dout_net <= pt_window;
  constant2_op_net <= delay_match_amt;
  counter_op_net <= pt_cntr;
  gateway_out35 <= mult4_p_net;
  gateway_out38 <= mult5_p_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 16,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 16,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 17,
    core_name0 => "appmodel_c_addsub_v12_0_i1",
    extra_registers => 0,
    full_s_arith => 1,
    full_s_width => 17,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlUnsigned,
    s_bin_pt => 0,
    s_width => 16
  )
  port map (
    clr => '0',
    en => "1",
    a => constant2_op_net,
    b => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 16,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 16,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 17,
    core_name0 => "appmodel_c_addsub_v12_0_i1",
    extra_registers => 0,
    full_s_arith => 1,
    full_s_width => 17,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlUnsigned,
    s_bin_pt => 0,
    s_width => 16
  )
  port map (
    clr => '0',
    en => "1",
    a => constant2_op_net,
    b => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  constant1 : entity work.sysgen_constant_a6b4957d83 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant1_op_net
  );
  constant13 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  constant15 : entity work.sysgen_constant_0900ba74ec 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant15_op_net
  );
  constant17 : entity work.sysgen_constant_a6b4957d83 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant17_op_net
  );
  constant20 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant20_op_net
  );
  constant22 : entity work.sysgen_constant_0900ba74ec 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant22_op_net
  );
  dual_port_ram : entity work.appmodel_xldpram 
  generic map (
    c_address_width_a => 16,
    c_address_width_b => 16,
    c_width_a => 18,
    c_width_b => 18,
    core_name0 => "appmodel_blk_mem_gen_i0",
    latency => 1
  )
  port map (
    ena => "1",
    enb => "1",
    rsta => "0",
    rstb => "0",
    addra => addsub1_s_net,
    dina => convert_dout_net,
    wea => constant1_op_net,
    addrb => counter_op_net,
    dinb => constant15_op_net,
    web => constant13_op_net,
    a_clk => d_clk_net,
    a_ce => q_ce_net,
    b_clk => d_clk_net,
    b_ce => q_ce_net,
    douta => dual_port_ram_douta_net,
    doutb => dual_port_ram_doutb_net
  );
  dual_port_ram1 : entity work.appmodel_xldpram 
  generic map (
    c_address_width_a => 16,
    c_address_width_b => 16,
    c_width_a => 18,
    c_width_b => 18,
    core_name0 => "appmodel_blk_mem_gen_i0",
    latency => 1
  )
  port map (
    ena => "1",
    enb => "1",
    rsta => "0",
    rstb => "0",
    addra => addsub2_s_net,
    dina => convert1_dout_net,
    wea => constant17_op_net,
    addrb => counter_op_net,
    dinb => constant22_op_net,
    web => constant20_op_net,
    a_clk => d_clk_net,
    a_ce => q_ce_net,
    b_clk => d_clk_net,
    b_ce => q_ce_net,
    douta => dual_port_ram1_douta_net,
    doutb => dual_port_ram1_doutb_net
  );
  mult : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => mult1_p_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult_p_net
  );
  mult1 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 0,
    c_b_width => 33,
    c_baat => 18,
    c_output_width => 51,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i3",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 17,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => dual_port_ram1_doutb_net,
    b => addsub3_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult1_p_net
  );
  mult2 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => mult3_p_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult2_p_net
  );
  mult3 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 0,
    c_b_width => 33,
    c_baat => 18,
    c_output_width => 51,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i3",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 17,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => dual_port_ram_doutb_net,
    b => addsub3_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult3_p_net
  );
  mult4 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => down_sample1_q_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult4_p_net
  );
  mult5 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => down_sample_q_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult5_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func/four_point_avg
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_four_point_avg_x5 is
  port (
    in1 : in std_logic_vector( 33-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out1 : out std_logic_vector( 33-1 downto 0 )
  );
end appmodel_four_point_avg_x5;
architecture structural of appmodel_four_point_avg_x5 is 
  signal cordic_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 33-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult4_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult2_p_net : std_logic_vector( 33-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult1_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay2_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 33-1 downto 0 );
begin
  out1 <= addsub3_s_net;
  cordic_6_0_m_axis_dout_tdata_real_net <= in1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult4_p_net,
    b => cmult2_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult1_p_net,
    b => cmult3_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub2_s_net,
    b => addsub1_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  cmult1 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult1_p_net
  );
  cmult2 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult2_p_net
  );
  cmult3 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay3_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult3_p_net
  );
  cmult4 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => cordic_6_0_m_axis_dout_tdata_real_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult4_p_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_m_axis_dout_tdata_real_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func/freq_err/delta_phi/phase_latching
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_phase_latching_x1 is
  port (
    phase : in std_logic_vector( 33-1 downto 0 );
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    stop_value : out std_logic_vector( 33-1 downto 0 );
    start_value : out std_logic_vector( 33-1 downto 0 );
    gateway_out1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_phase_latching_x1;
architecture structural of appmodel_phase_latching_x1 is 
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 2-1 downto 0 );
  signal delay4_q_net : std_logic_vector( 1-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 2-1 downto 0 );
  signal delay6_q_net : std_logic_vector( 1-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant3_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
begin
  stop_value <= register1_q_net;
  start_value <= register_q_net;
  mult3_p_net <= phase;
  convert2_dout_net <= window;
  convert3_dout_net <= reset;
  gateway_out1 <= relational1_op_net;
  gateway_out2 <= delay5_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.sysgen_addsub_7a72e3543f 
  port map (
    clr => '0',
    a => convert2_dout_net,
    b => delay4_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.sysgen_addsub_7a72e3543f 
  port map (
    clr => '0',
    a => delay6_q_net,
    b => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  constant2 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant2_op_net
  );
  constant3 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant3_op_net
  );
  delay4 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay4_q_net
  );
  delay5 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => relational_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay5_q_net
  );
  delay6 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay6_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    d => mult3_p_net,
    rst => convert3_dout_net,
    en => delay5_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    d => mult3_p_net,
    rst => convert3_dout_net,
    en => relational1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register1_q_net
  );
  relational : entity work.sysgen_relational_f9cbd3d1dc 
  port map (
    clr => '0',
    a => addsub1_s_net,
    b => constant2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_f9cbd3d1dc 
  port map (
    clr => '0',
    a => addsub2_s_net,
    b => constant3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational1_op_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func/freq_err/delta_phi
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_delta_phi_x1 is
  port (
    phase : in std_logic_vector( 33-1 downto 0 );
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    d_phi : out std_logic_vector( 32-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_delta_phi_x1;
architecture structural of appmodel_delta_phi_x1 is 
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal delay2_q_net : std_logic_vector( 1-1 downto 0 );
  signal constant4_op_net : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
begin
  d_phi <= mult1_p_net;
  mult3_p_net <= phase;
  convert2_dout_net <= window;
  convert3_dout_net <= reset;
  gateway_out27 <= addsub3_s_net;
  gateway_out28 <= register_q_net;
  gateway_out29 <= register1_q_net;
  gateway_out3 <= mult1_p_net;
  gateway_out1 <= relational1_op_net;
  gateway_out2 <= delay5_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  phase_latching : entity work.appmodel_phase_latching_x1 
  port map (
    phase => mult3_p_net,
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    stop_value => register1_q_net,
    start_value => register_q_net,
    gateway_out1 => relational1_op_net,
    gateway_out2 => delay5_q_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 30,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i5",
    en_arith => xlUnsigned,
    en_bin_pt => 0,
    en_width => 1,
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 30,
    s_width => 32
  )
  port map (
    clr => '0',
    a => register1_q_net,
    b => register_q_net,
    en => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  constant4 : entity work.sysgen_constant_cff0308c52 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant4_op_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 2,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => inverter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  inverter : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter_op_net
  );
  mult1 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 32,
    b_arith => xlSigned,
    b_bin_pt => 15,
    b_width => 18,
    c_a_type => 0,
    c_a_width => 32,
    c_b_type => 0,
    c_b_width => 18,
    c_baat => 32,
    c_output_width => 50,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i6",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 30,
    p_width => 32,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => addsub3_s_net,
    b => constant4_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult1_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func/freq_err/delta_t
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_delta_t_x2 is
  port (
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    dt : out std_logic_vector( 32-1 downto 0 );
    gateway_out1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_delta_t_x2;
architecture structural of appmodel_delta_t_x2 is 
  signal mult_p_net : std_logic_vector( 32-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal register2_q_net : std_logic_vector( 10-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant5_op_net : std_logic_vector( 32-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal counter2_op_net : std_logic_vector( 10-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
begin
  dt <= mult_p_net;
  convert2_dout_net <= window;
  convert3_dout_net <= reset;
  gateway_out1 <= mult_p_net;
  gateway_out2 <= register2_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant5 : entity work.sysgen_constant_9f70783d27 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant5_op_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  counter2 : entity work.appmodel_xlcounter_free 
  generic map (
    core_name0 => "appmodel_c_counter_binary_v12_0_i1",
    op_arith => xlUnsigned,
    op_width => 10
  )
  port map (
    clr => '0',
    rst => convert3_dout_net,
    en => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => counter2_op_net
  );
  inverter : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter_op_net
  );
  mult : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 10,
    b_arith => xlUnsigned,
    b_bin_pt => 32,
    b_width => 32,
    c_a_type => 1,
    c_a_width => 10,
    c_b_type => 1,
    c_b_width => 32,
    c_baat => 10,
    c_output_width => 42,
    c_type => 1,
    core_name0 => "appmodel_mult_gen_v12_0_i7",
    extra_registers => 1,
    multsign => 1,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 32,
    p_width => 32,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => register2_q_net,
    b => constant5_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult_p_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 10,
    init_value => b"0000000000"
  )
  port map (
    d => counter2_op_net,
    rst => convert3_dout_net,
    en => inverter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register2_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func/freq_err/four_point_avg
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_four_point_avg_x4 is
  port (
    in1 : in std_logic_vector( 33-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out1 : out std_logic_vector( 33-1 downto 0 )
  );
end appmodel_four_point_avg_x4;
architecture structural of appmodel_four_point_avg_x4 is 
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_phase_net : std_logic_vector( 33-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult4_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult2_p_net : std_logic_vector( 33-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult1_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay2_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 33-1 downto 0 );
begin
  out1 <= addsub3_s_net;
  cordic_6_0_m_axis_dout_tdata_phase_net <= in1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult4_p_net,
    b => cmult2_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult1_p_net,
    b => cmult3_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub2_s_net,
    b => addsub1_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  cmult1 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult1_p_net
  );
  cmult2 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult2_p_net
  );
  cmult3 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay3_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult3_p_net
  );
  cmult4 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => cordic_6_0_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult4_p_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func/freq_err
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_freq_err_x1 is
  port (
    raw_phase : in std_logic_vector( 33-1 downto 0 );
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    nco_err : out std_logic_vector( 32-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out : out std_logic_vector( 33-1 downto 0 );
    gateway_out1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x0 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_freq_err_x1;
architecture structural of appmodel_freq_err_x1 is 
  signal convert_dout_net : std_logic_vector( 32-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_phase_net : std_logic_vector( 33-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net : std_logic_vector( 10-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal addsub3_s_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 96-1 downto 0 );
  signal divide1_op_net : std_logic_vector( 96-1 downto 0 );
  signal constant8_op_net : std_logic_vector( 26-1 downto 0 );
begin
  nco_err <= convert_dout_net;
  cordic_6_0_m_axis_dout_tdata_phase_net <= raw_phase;
  convert2_dout_net <= window;
  convert3_dout_net_x0 <= reset;
  gateway_out11 <= convert_dout_net;
  gateway_out19 <= mult3_p_net;
  gateway_out20 <= delay3_q_net;
  gateway_out8 <= divide_op_net;
  gateway_out27 <= addsub3_s_net;
  gateway_out28 <= register_q_net;
  gateway_out29 <= register1_q_net;
  gateway_out3 <= mult1_p_net;
  gateway_out <= mult3_p_net;
  gateway_out1 <= relational1_op_net;
  gateway_out2 <= delay5_q_net;
  gateway_out1_x0 <= mult_p_net;
  gateway_out2_x0 <= register2_q_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  delta_phi : entity work.appmodel_delta_phi_x1 
  port map (
    phase => mult3_p_net,
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    d_phi => mult1_p_net,
    gateway_out27 => addsub3_s_net,
    gateway_out28 => register_q_net,
    gateway_out29 => register1_q_net,
    gateway_out3 => mult1_p_net,
    gateway_out1 => relational1_op_net,
    gateway_out2 => delay5_q_net
  );
  delta_t : entity work.appmodel_delta_t_x2 
  port map (
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    dt => mult_p_net,
    gateway_out1 => mult_p_net,
    gateway_out2 => register2_q_net
  );
  four_point_avg : entity work.appmodel_four_point_avg_x4 
  port map (
    in1 => cordic_6_0_m_axis_dout_tdata_phase_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out1 => addsub3_s_net_x0
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 33,
    d_width => 96,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 33,
    q_width => 96
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => divide1_op_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  constant8 : entity work.sysgen_constant_dd4ad18523 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant8_op_net
  );
  convert : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 33,
    din_width => 96,
    dout_arith => 2,
    dout_bin_pt => 32,
    dout_width => 32,
    latency => 1,
    overflow => xlSaturate,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => down_sample_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert_dout_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert3_dout_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 3,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
  divide : entity work.xldivider_generator_00180ce438a55dd0e19236a4905a2616 
  port map (
    a_tvalid => '1',
    b_tvalid => '1',
    a => mult1_p_net,
    b => mult_p_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => divide_op_net
  );
  divide1 : entity work.xldivider_generator_9a49576625854c73c1bca80dac5c83be 
  port map (
    a_tvalid => '1',
    b_tvalid => '1',
    a => divide_op_net,
    b => constant8_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => divide1_op_net
  );
  mult3 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 1,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_a_type => 1,
    c_a_width => 1,
    c_b_type => 0,
    c_b_width => 33,
    c_baat => 1,
    c_output_width => 34,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i5",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 30,
    p_width => 33,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => convert2_dout_net,
    b => addsub3_s_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult3_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_c1p2_windowing_func_x0 is
  port (
    imag : in std_logic_vector( 33-1 downto 0 );
    real : in std_logic_vector( 33-1 downto 0 );
    eval_window : in std_logic_vector( 1-1 downto 0 );
    flo_window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    c1p2_pt_cntr : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_dc_tvalid : in std_logic_vector( 1-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    window_profile : out std_logic_vector( 33-1 downto 0 );
    nco_feedback : out std_logic_vector( 32-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_c1p2_windowing_func_x0;
architecture structural of appmodel_c1p2_windowing_func_x0 is 
  signal addsub3_s_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal convert_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert3_dout_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 33-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert2_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net : std_logic_vector( 10-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal cordic_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_phase_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tvalid_net : std_logic;
begin
  window_profile <= addsub3_s_net_x0;
  nco_feedback <= convert_dout_net;
  convert3_dout_net_x0 <= imag;
  convert4_dout_net <= real;
  convert11_dout_net <= eval_window;
  convert2_dout_net <= flo_window;
  convert3_dout_net <= reset;
  counter_op_net <= c1p2_pt_cntr;
  convert2_dout_net_x0 <= cav1_p2_dc_tvalid;
  gateway_out11 <= convert_dout_net;
  gateway_out19 <= mult3_p_net;
  gateway_out20 <= delay3_q_net;
  gateway_out8 <= divide_op_net;
  gateway_out27 <= addsub3_s_net;
  gateway_out28 <= register_q_net;
  gateway_out29 <= register1_q_net;
  gateway_out3 <= mult1_p_net;
  gateway_out <= mult3_p_net;
  gateway_out1_x0 <= relational1_op_net;
  gateway_out2_x0 <= delay5_q_net;
  gateway_out1 <= mult_p_net;
  gateway_out2 <= register2_q_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  four_point_avg : entity work.appmodel_four_point_avg_x5 
  port map (
    in1 => cordic_6_0_m_axis_dout_tdata_real_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out1 => addsub3_s_net_x0
  );
  freq_err : entity work.appmodel_freq_err_x1 
  port map (
    raw_phase => cordic_6_0_m_axis_dout_tdata_phase_net,
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    nco_err => convert_dout_net,
    gateway_out11 => convert_dout_net,
    gateway_out19 => mult3_p_net,
    gateway_out20 => delay3_q_net,
    gateway_out8 => divide_op_net,
    gateway_out27 => addsub3_s_net,
    gateway_out28 => register_q_net,
    gateway_out29 => register1_q_net,
    gateway_out3 => mult1_p_net,
    gateway_out => mult3_p_net,
    gateway_out1 => relational1_op_net,
    gateway_out2 => delay5_q_net,
    gateway_out1_x0 => mult_p_net,
    gateway_out2_x0 => register2_q_net
  );
  cordic_6_0 : entity work.xlcordic_3e63515a29f3d9d448dc5efec9f16876 
  port map (
    s_axis_cartesian_tvalid => convert2_dout_net_x0(0),
    s_axis_cartesian_tdata_imag => convert3_dout_net_x0,
    s_axis_cartesian_tdata_real => convert4_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => cordic_6_0_m_axis_dout_tdata_phase_net,
    m_axis_dout_tdata_real => cordic_6_0_m_axis_dout_tdata_real_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func1/four_point_avg
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_four_point_avg_x6 is
  port (
    in1 : in std_logic_vector( 33-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out1 : out std_logic_vector( 33-1 downto 0 )
  );
end appmodel_four_point_avg_x6;
architecture structural of appmodel_four_point_avg_x6 is 
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 33-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult4_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult2_p_net : std_logic_vector( 33-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult1_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay2_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 33-1 downto 0 );
begin
  out1 <= addsub3_s_net;
  cordic_6_0_m_axis_dout_tdata_real_net <= in1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult4_p_net,
    b => cmult2_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult1_p_net,
    b => cmult3_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub2_s_net,
    b => addsub1_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  cmult1 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult1_p_net
  );
  cmult2 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult2_p_net
  );
  cmult3 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay3_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult3_p_net
  );
  cmult4 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => cordic_6_0_m_axis_dout_tdata_real_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult4_p_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_m_axis_dout_tdata_real_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func1/freq_err/delta_phi/phase_latching
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_phase_latching_x2 is
  port (
    phase : in std_logic_vector( 33-1 downto 0 );
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    stop_value : out std_logic_vector( 33-1 downto 0 );
    start_value : out std_logic_vector( 33-1 downto 0 );
    gateway_out1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_phase_latching_x2;
architecture structural of appmodel_phase_latching_x2 is 
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 2-1 downto 0 );
  signal delay4_q_net : std_logic_vector( 1-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 2-1 downto 0 );
  signal delay6_q_net : std_logic_vector( 1-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant3_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
begin
  stop_value <= register1_q_net;
  start_value <= register_q_net;
  mult3_p_net <= phase;
  convert2_dout_net <= window;
  convert3_dout_net <= reset;
  gateway_out1 <= relational1_op_net;
  gateway_out2 <= delay5_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.sysgen_addsub_7a72e3543f 
  port map (
    clr => '0',
    a => convert2_dout_net,
    b => delay4_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.sysgen_addsub_7a72e3543f 
  port map (
    clr => '0',
    a => delay6_q_net,
    b => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  constant2 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant2_op_net
  );
  constant3 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant3_op_net
  );
  delay4 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay4_q_net
  );
  delay5 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => relational_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay5_q_net
  );
  delay6 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay6_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    d => mult3_p_net,
    rst => convert3_dout_net,
    en => delay5_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    d => mult3_p_net,
    rst => convert3_dout_net,
    en => relational1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register1_q_net
  );
  relational : entity work.sysgen_relational_f9cbd3d1dc 
  port map (
    clr => '0',
    a => addsub1_s_net,
    b => constant2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_f9cbd3d1dc 
  port map (
    clr => '0',
    a => addsub2_s_net,
    b => constant3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational1_op_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func1/freq_err/delta_phi
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_delta_phi_x2 is
  port (
    phase : in std_logic_vector( 33-1 downto 0 );
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    d_phi : out std_logic_vector( 32-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_delta_phi_x2;
architecture structural of appmodel_delta_phi_x2 is 
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal delay2_q_net : std_logic_vector( 1-1 downto 0 );
  signal constant4_op_net : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
begin
  d_phi <= mult1_p_net;
  mult3_p_net <= phase;
  convert2_dout_net <= window;
  convert3_dout_net <= reset;
  gateway_out27 <= addsub3_s_net;
  gateway_out28 <= register_q_net;
  gateway_out29 <= register1_q_net;
  gateway_out3 <= mult1_p_net;
  gateway_out1 <= relational1_op_net;
  gateway_out2 <= delay5_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  phase_latching : entity work.appmodel_phase_latching_x2 
  port map (
    phase => mult3_p_net,
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    stop_value => register1_q_net,
    start_value => register_q_net,
    gateway_out1 => relational1_op_net,
    gateway_out2 => delay5_q_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 30,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i5",
    en_arith => xlUnsigned,
    en_bin_pt => 0,
    en_width => 1,
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 30,
    s_width => 32
  )
  port map (
    clr => '0',
    a => register1_q_net,
    b => register_q_net,
    en => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  constant4 : entity work.sysgen_constant_cff0308c52 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant4_op_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 2,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => inverter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  inverter : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter_op_net
  );
  mult1 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 32,
    b_arith => xlSigned,
    b_bin_pt => 15,
    b_width => 18,
    c_a_type => 0,
    c_a_width => 32,
    c_b_type => 0,
    c_b_width => 18,
    c_baat => 32,
    c_output_width => 50,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i6",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 30,
    p_width => 32,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => addsub3_s_net,
    b => constant4_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult1_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func1/freq_err/delta_t
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_delta_t is
  port (
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    dt : out std_logic_vector( 32-1 downto 0 );
    gateway_out1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_delta_t;
architecture structural of appmodel_delta_t is 
  signal mult_p_net : std_logic_vector( 32-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal register2_q_net : std_logic_vector( 10-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant5_op_net : std_logic_vector( 32-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal counter2_op_net : std_logic_vector( 10-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
begin
  dt <= mult_p_net;
  convert2_dout_net <= window;
  convert3_dout_net <= reset;
  gateway_out1 <= mult_p_net;
  gateway_out2 <= register2_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant5 : entity work.sysgen_constant_9f70783d27 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant5_op_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  counter2 : entity work.appmodel_xlcounter_free 
  generic map (
    core_name0 => "appmodel_c_counter_binary_v12_0_i1",
    op_arith => xlUnsigned,
    op_width => 10
  )
  port map (
    clr => '0',
    rst => convert3_dout_net,
    en => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => counter2_op_net
  );
  inverter : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter_op_net
  );
  mult : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 10,
    b_arith => xlUnsigned,
    b_bin_pt => 32,
    b_width => 32,
    c_a_type => 1,
    c_a_width => 10,
    c_b_type => 1,
    c_b_width => 32,
    c_baat => 10,
    c_output_width => 42,
    c_type => 1,
    core_name0 => "appmodel_mult_gen_v12_0_i7",
    extra_registers => 1,
    multsign => 1,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 32,
    p_width => 32,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => register2_q_net,
    b => constant5_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult_p_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 10,
    init_value => b"0000000000"
  )
  port map (
    d => counter2_op_net,
    rst => convert3_dout_net,
    en => inverter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register2_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func1/freq_err/four_point_avg
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_four_point_avg is
  port (
    in1 : in std_logic_vector( 33-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out1 : out std_logic_vector( 33-1 downto 0 )
  );
end appmodel_four_point_avg;
architecture structural of appmodel_four_point_avg is 
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_phase_net : std_logic_vector( 33-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult4_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult2_p_net : std_logic_vector( 33-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult1_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay2_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 33-1 downto 0 );
begin
  out1 <= addsub3_s_net;
  cordic_6_0_m_axis_dout_tdata_phase_net <= in1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult4_p_net,
    b => cmult2_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult1_p_net,
    b => cmult3_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub2_s_net,
    b => addsub1_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  cmult1 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult1_p_net
  );
  cmult2 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult2_p_net
  );
  cmult3 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay3_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult3_p_net
  );
  cmult4 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => cordic_6_0_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult4_p_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func1/freq_err
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_freq_err_x2 is
  port (
    raw_phase : in std_logic_vector( 33-1 downto 0 );
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    nco_err : out std_logic_vector( 32-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out : out std_logic_vector( 33-1 downto 0 );
    gateway_out1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x0 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_freq_err_x2;
architecture structural of appmodel_freq_err_x2 is 
  signal convert_dout_net : std_logic_vector( 32-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_phase_net : std_logic_vector( 33-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net : std_logic_vector( 10-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal addsub3_s_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal constant8_op_net : std_logic_vector( 26-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 96-1 downto 0 );
  signal divide1_op_net : std_logic_vector( 96-1 downto 0 );
begin
  nco_err <= convert_dout_net;
  cordic_6_0_m_axis_dout_tdata_phase_net <= raw_phase;
  convert2_dout_net <= window;
  convert3_dout_net_x0 <= reset;
  gateway_out11 <= convert_dout_net;
  gateway_out19 <= mult3_p_net;
  gateway_out20 <= delay3_q_net;
  gateway_out8 <= divide_op_net;
  gateway_out27 <= addsub3_s_net;
  gateway_out28 <= register_q_net;
  gateway_out29 <= register1_q_net;
  gateway_out3 <= mult1_p_net;
  gateway_out <= mult3_p_net;
  gateway_out1 <= relational1_op_net;
  gateway_out2 <= delay5_q_net;
  gateway_out1_x0 <= mult_p_net;
  gateway_out2_x0 <= register2_q_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  delta_phi : entity work.appmodel_delta_phi_x2 
  port map (
    phase => mult3_p_net,
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    d_phi => mult1_p_net,
    gateway_out27 => addsub3_s_net,
    gateway_out28 => register_q_net,
    gateway_out29 => register1_q_net,
    gateway_out3 => mult1_p_net,
    gateway_out1 => relational1_op_net,
    gateway_out2 => delay5_q_net
  );
  delta_t : entity work.appmodel_delta_t 
  port map (
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    dt => mult_p_net,
    gateway_out1 => mult_p_net,
    gateway_out2 => register2_q_net
  );
  four_point_avg : entity work.appmodel_four_point_avg 
  port map (
    in1 => cordic_6_0_m_axis_dout_tdata_phase_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out1 => addsub3_s_net_x0
  );
  constant8 : entity work.sysgen_constant_dd4ad18523 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant8_op_net
  );
  convert : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 33,
    din_width => 96,
    dout_arith => 2,
    dout_bin_pt => 32,
    dout_width => 32,
    latency => 1,
    overflow => xlSaturate,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => down_sample_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert_dout_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert3_dout_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 3,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
  divide : entity work.xldivider_generator_00180ce438a55dd0e19236a4905a2616 
  port map (
    a_tvalid => '1',
    b_tvalid => '1',
    a => mult1_p_net,
    b => mult_p_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => divide_op_net
  );
  divide1 : entity work.xldivider_generator_9a49576625854c73c1bca80dac5c83be 
  port map (
    a_tvalid => '1',
    b_tvalid => '1',
    a => divide_op_net,
    b => constant8_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => divide1_op_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 33,
    d_width => 96,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 33,
    q_width => 96
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => divide1_op_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  mult3 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 1,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_a_type => 1,
    c_a_width => 1,
    c_b_type => 0,
    c_b_width => 33,
    c_baat => 1,
    c_output_width => 34,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i5",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 30,
    p_width => 33,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => convert2_dout_net,
    b => addsub3_s_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult3_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1/c1p2_windowing_func1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_c1p2_windowing_func1_x0 is
  port (
    imag : in std_logic_vector( 33-1 downto 0 );
    real : in std_logic_vector( 33-1 downto 0 );
    eval_window : in std_logic_vector( 1-1 downto 0 );
    flo_window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    c1p2_pt_cntr : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_dc_tvalid : in std_logic_vector( 1-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    window_profile : out std_logic_vector( 33-1 downto 0 );
    nco_feedback : out std_logic_vector( 32-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_c1p2_windowing_func1_x0;
architecture structural of appmodel_c1p2_windowing_func1_x0 is 
  signal convert_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert7_dout_net : std_logic_vector( 33-1 downto 0 );
  signal convert8_dout_net : std_logic_vector( 33-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert2_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net : std_logic_vector( 10-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal cordic_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_phase_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tvalid_net : std_logic;
  signal addsub3_s_net_x0 : std_logic_vector( 33-1 downto 0 );
begin
  window_profile <= addsub3_s_net_x0;
  nco_feedback <= convert_dout_net;
  convert7_dout_net <= imag;
  convert8_dout_net <= real;
  convert11_dout_net <= eval_window;
  convert2_dout_net <= flo_window;
  convert3_dout_net <= reset;
  counter_op_net <= c1p2_pt_cntr;
  convert2_dout_net_x0 <= cav1_p2_dc_tvalid;
  gateway_out11 <= convert_dout_net;
  gateway_out19 <= mult3_p_net;
  gateway_out20 <= delay3_q_net;
  gateway_out8 <= divide_op_net;
  gateway_out27 <= addsub3_s_net;
  gateway_out28 <= register_q_net;
  gateway_out29 <= register1_q_net;
  gateway_out3 <= mult1_p_net;
  gateway_out <= mult3_p_net;
  gateway_out1_x0 <= relational1_op_net;
  gateway_out2_x0 <= delay5_q_net;
  gateway_out1 <= mult_p_net;
  gateway_out2 <= register2_q_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  four_point_avg : entity work.appmodel_four_point_avg_x6 
  port map (
    in1 => cordic_6_0_m_axis_dout_tdata_real_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out1 => addsub3_s_net_x0
  );
  freq_err : entity work.appmodel_freq_err_x2 
  port map (
    raw_phase => cordic_6_0_m_axis_dout_tdata_phase_net,
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    nco_err => convert_dout_net,
    gateway_out11 => convert_dout_net,
    gateway_out19 => mult3_p_net,
    gateway_out20 => delay3_q_net,
    gateway_out8 => divide_op_net,
    gateway_out27 => addsub3_s_net,
    gateway_out28 => register_q_net,
    gateway_out29 => register1_q_net,
    gateway_out3 => mult1_p_net,
    gateway_out => mult3_p_net,
    gateway_out1 => relational1_op_net,
    gateway_out2 => delay5_q_net,
    gateway_out1_x0 => mult_p_net,
    gateway_out2_x0 => register2_q_net
  );
  cordic_6_0 : entity work.xlcordic_3e63515a29f3d9d448dc5efec9f16876 
  port map (
    s_axis_cartesian_tvalid => convert2_dout_net_x0(0),
    s_axis_cartesian_tdata_imag => convert7_dout_net,
    s_axis_cartesian_tdata_real => convert8_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => cordic_6_0_m_axis_dout_tdata_phase_net,
    m_axis_dout_tdata_real => cordic_6_0_m_axis_dout_tdata_real_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_cav1 is
  port (
    pa_stream_1 : in std_logic_vector( 18-1 downto 0 );
    iq_stream_1 : in std_logic_vector( 18-1 downto 0 );
    pa_stream_2 : in std_logic_vector( 18-1 downto 0 );
    pa_stream_3 : in std_logic_vector( 4-1 downto 0 );
    iq_stream_2 : in std_logic_vector( 18-1 downto 0 );
    iq_stream_3 : in std_logic_vector( 4-1 downto 0 );
    cav1_p1_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav1_p1_cal_coef : in std_logic_vector( 18-1 downto 0 );
    cav1_nco_phase_reset : in std_logic_vector( 1-1 downto 0 );
    cav1_p2_chan_sel : in std_logic_vector( 4-1 downto 0 );
    rf_ref_amp : in std_logic_vector( 18-1 downto 0 );
    rf_ref_phase : in std_logic_vector( 18-1 downto 0 );
    rf_ref_q : in std_logic_vector( 18-1 downto 0 );
    cav1_nco_phase_adj : in std_logic_vector( 32-1 downto 0 );
    cav1_p1_window_start : in std_logic_vector( 16-1 downto 0 );
    cav1_p1_window_stop : in std_logic_vector( 16-1 downto 0 );
    rf_ref_i : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_window_start : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_window_stop : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_cal_coef : in std_logic_vector( 18-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    c1p2_pt_window : out std_logic_vector( 1-1 downto 0 );
    cav1_p2_dc_tvalid : out std_logic_vector( 1-1 downto 0 );
    cav1_p1_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_dc_freq : out std_logic_vector( 32-1 downto 0 );
    c1p1_freq_err : out std_logic_vector( 32-1 downto 0 );
    flo_c1p1_window : out std_logic_vector( 1-1 downto 0 );
    cav1_p1_delayed_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_delayed_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_ref_phase_out : out std_logic_vector( 18-1 downto 0 );
    c1p2_pt_cntr : out std_logic_vector( 16-1 downto 0 );
    cav1_p2_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav1_p2_delayed_dc_img : out std_logic_vector( 18-1 downto 0 );
    c1p2_integral_logic : out std_logic_vector( 1-1 downto 0 );
    cav1_p2_delayed_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_ref_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_integrated_ref_i : out std_logic_vector( 20-1 downto 0 );
    cav1_p2_integrated_ref_q : out std_logic_vector( 20-1 downto 0 );
    c1p1_window_func : out std_logic_vector( 33-1 downto 0 );
    cav1_p2_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav1_p2_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav1_p2_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    dsp_cav1_reset : out std_logic_vector( 1-1 downto 0 );
    c1p2_window_func : out std_logic_vector( 33-1 downto 0 );
    cav1_nco_fb : out std_logic_vector( 32-1 downto 0 );
    cav1_p1_windowed_ref_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_windowed_ref_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_windowed_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_windowed_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_integrated_ref_i : out std_logic_vector( 20-1 downto 0 );
    cav1_p1_integrated_ref_q : out std_logic_vector( 20-1 downto 0 );
    cav1_p1_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav1_p1_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav1_p1_comparison_i : out std_logic_vector( 18-1 downto 0 );
    c1p2_delay_match : out std_logic_vector( 16-1 downto 0 );
    cav1_p1_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    c1p1_pt_window : out std_logic_vector( 1-1 downto 0 );
    c1p1_pt_cntr : out std_logic_vector( 16-1 downto 0 );
    c1p1_integral_logic : out std_logic_vector( 1-1 downto 0 );
    c1p1_delay_match : out std_logic_vector( 16-1 downto 0 );
    cav1_p1_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_amp_out : out std_logic_vector( 18-1 downto 0 );
    flo_c1p2_window : out std_logic_vector( 1-1 downto 0 );
    cav1_p1_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_windowed_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_windowed_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_windowed_ref_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_windowed_ref_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_q : out std_logic_vector( 18-1 downto 0 );
    gateway_out3_x5 : out std_logic_vector( 26-1 downto 0 );
    gateway_out4_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x3 : out std_logic_vector( 26-1 downto 0 );
    gateway_out10_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out16_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out3_x6 : out std_logic_vector( 26-1 downto 0 );
    gateway_out4_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out5_x4 : out std_logic_vector( 26-1 downto 0 );
    gateway_out6_x3 : out std_logic_vector( 18-1 downto 0 );
    gateway_out7_x3 : out std_logic_vector( 34-1 downto 0 );
    gateway_out8_x5 : out std_logic_vector( 1-1 downto 0 );
    gateway_out_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x6 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3_x3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x3 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x4 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out1_x5 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x5 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out24_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x3 : out std_logic_vector( 20-1 downto 0 );
    gateway_out24 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out1_x4 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x4 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5 : out std_logic_vector( 1-1 downto 0 );
    gateway_out34_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 10-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x0 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x1 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_cav1;
architecture structural of appmodel_cav1 is 
  signal amp : std_logic_vector( 18-1 downto 0 );
  signal ddci : std_logic_vector( 18-1 downto 0 );
  signal phase_x0 : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal ddcq : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel : std_logic_vector( 4-1 downto 0 );
  signal convert11_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert6_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal convert2_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal dual_port_ram_doutb_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal counter_op_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal convert1_dout_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal dual_port_ram_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal convert5_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal dual_port_ram1_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 20-1 downto 0 );
  signal addsub3_s_net_x2 : std_logic_vector( 33-1 downto 0 );
  signal down_sample1_q_net_x4 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal convert9_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net : std_logic_vector( 20-1 downto 0 );
  signal addsub_s_net : std_logic_vector( 18-1 downto 0 );
  signal convert3_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal nco_cos : std_logic_vector( 26-1 downto 0 );
  signal mult4_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal mult5_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult2_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal mult_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net_x3 : std_logic_vector( 20-1 downto 0 );
  signal convert4_dout_net_x1 : std_logic_vector( 20-1 downto 0 );
  signal convert9_dout_net_x1 : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net_x0 : std_logic_vector( 20-1 downto 0 );
  signal addsub_s_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert5_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant1_op_net : std_logic_vector( 16-1 downto 0 );
  signal register13_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal down_sample1_q_net_x5 : std_logic_vector( 18-1 downto 0 );
  signal mult2_p_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal mult_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult4_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult5_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x4 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal register29_q_net : std_logic_vector( 4-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register35_q_net : std_logic_vector( 1-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal down_sample1_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register36_q_net : std_logic_vector( 32-1 downto 0 );
  signal register31_q_net : std_logic_vector( 16-1 downto 0 );
  signal register32_q_net : std_logic_vector( 16-1 downto 0 );
  signal down_sample1_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal register33_q_net : std_logic_vector( 16-1 downto 0 );
  signal register34_q_net : std_logic_vector( 16-1 downto 0 );
  signal register2_q_net : std_logic_vector( 18-1 downto 0 );
  signal nco_sin : std_logic_vector( 26-1 downto 0 );
  signal register9_q_net : std_logic_vector( 32-1 downto 0 );
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 18-1 downto 0 );
  signal phase : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_real_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tdata_real_net : std_logic_vector( 34-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tvalid_net : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net_x3 : std_logic_vector( 32-1 downto 0 );
  signal register12_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x3 : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator_q_net : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter1_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net : std_logic_vector( 32-1 downto 0 );
  signal register11_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal inverter_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal register12_q_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal accumulator_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal inverter1_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal register11_q_net : std_logic_vector( 32-1 downto 0 );
  signal delay5_q_net_x2 : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net_x2 : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal register_q_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net_x1 : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x1 : std_logic_vector( 10-1 downto 0 );
  signal mult3_p_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net_x0 : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x0 : std_logic_vector( 10-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal complex_multiplier_6_0_m_axis_dout_tvalid_net : std_logic;
  signal dds_compiler_6_0_m_axis_data_tvalid_net : std_logic;
  signal down_sample6_q_net : std_logic_vector( 32-1 downto 0 );
  signal down_sample5_q_net : std_logic_vector( 1-1 downto 0 );
  signal down_sample7_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample3_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 33-1 downto 0 );
  signal convert4_dout_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal convert7_dout_net : std_logic_vector( 33-1 downto 0 );
  signal convert8_dout_net : std_logic_vector( 33-1 downto 0 );
  signal clock_enable_probe_q_net : std_logic_vector( 1-1 downto 0 );
  signal clock_enable_probe1_q_net : std_logic_vector( 1-1 downto 0 );
  signal complex_multiplier_6_0_m_axis_dout_tdata_imag_net : std_logic_vector( 33-1 downto 0 );
  signal complex_multiplier_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 33-1 downto 0 );
  signal down_sample2_q_net : std_logic;
  signal complex_multiplier_6_0_1_m_axis_dout_tvalid_net : std_logic;
  signal complex_multiplier_6_0_1_m_axis_dout_tdata_imag_net : std_logic_vector( 33-1 downto 0 );
  signal complex_multiplier_6_0_1_m_axis_dout_tdata_real_net : std_logic_vector( 33-1 downto 0 );
  signal down_sample1_q_net : std_logic;
  signal register32_q_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal register33_q_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal register31_q_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net_x4 : std_logic_vector( 33-1 downto 0 );
  signal register2_q_net_x4 : std_logic_vector( 33-1 downto 0 );
  signal register7_q_net : std_logic_vector( 1-1 downto 0 );
  signal register8_q_net : std_logic_vector( 32-1 downto 0 );
  signal register6_q_net : std_logic_vector( 18-1 downto 0 );
  signal register5_q_net : std_logic_vector( 18-1 downto 0 );
begin
  amp <= pa_stream_1;
  ddci <= iq_stream_1;
  phase_x0 <= pa_stream_2;
  channel <= pa_stream_3;
  ddcq <= iq_stream_2;
  ddcchannel <= iq_stream_3;
  c1p2_pt_window <= convert11_dout_net_x0;
  cav1_p2_dc_tvalid <= convert2_dout_net_x0;
  cav1_p1_dc_real <= convert6_dout_net;
  cav1_p1_dc_img <= convert5_dout_net;
  cav1_p1_dc_freq <= convert_dout_net_x2;
  c1p1_freq_err <= convert_dout_net_x2;
  flo_c1p1_window <= convert2_dout_net_x1;
  cav1_p1_delayed_dc_img <= dual_port_ram_doutb_net_x0;
  cav1_p1_delayed_dc_real <= dual_port_ram1_doutb_net_x0;
  cav1_p1_ref_phase_out <= register11_q_net_x2;
  c1p2_pt_cntr <= counter_op_net_x0;
  cav1_p2_dc_real <= convert1_dout_net_x0;
  cav1_p2_dc_img <= convert_dout_net_x0;
  cav1_p2_dc_freq <= convert_dout_net_x1;
  cav1_p2_delayed_dc_img <= dual_port_ram_doutb_net;
  c1p2_integral_logic <= convert5_dout_net_x1;
  cav1_p2_delayed_dc_real <= dual_port_ram1_doutb_net;
  cav2_p2_ref_phase_out <= register11_q_net_x1;
  cav1_p2_integrated_ref_i <= convert2_dout_net;
  cav1_p2_integrated_ref_q <= convert4_dout_net;
  c1p1_window_func <= addsub3_s_net_x2;
  cav1_p2_if_amp <= down_sample1_q_net_x4;
  cav1_p2_if_phase <= down_sample_q_net_x3;
  cav1_p2_if_i <= down_sample1_q_net_x3;
  cav1_p2_if_q <= down_sample_q_net_x2;
  cav1_p2_integrated_i <= convert9_dout_net;
  cav1_p2_integrated_q <= convert10_dout_net;
  cav1_p2_comparison_i <= addsub_s_net;
  cav1_p2_comparison_q <= addsub_s_net;
  cav1_p2_comparison_phase <= addsub_s_net;
  dsp_cav1_reset <= convert3_dout_net_x0;
  c1p2_window_func <= addsub3_s_net;
  cav1_nco_fb <= convert_dout_net_x1;
  cav1_p1_windowed_ref_i <= mult4_p_net_x0;
  cav1_p1_windowed_ref_q <= mult5_p_net;
  cav1_p1_windowed_img <= mult2_p_net_x0;
  cav1_p1_windowed_real <= mult_p_net_x0;
  cav1_p1_integrated_ref_i <= convert2_dout_net_x3;
  cav1_p1_integrated_ref_q <= convert4_dout_net_x1;
  cav1_p1_integrated_i <= convert9_dout_net_x1;
  cav1_p1_integrated_q <= convert10_dout_net_x0;
  cav1_p1_comparison_i <= addsub_s_net_x0;
  c1p2_delay_match <= constant2_op_net;
  cav1_p1_comparison_q <= addsub_s_net_x0;
  cav1_p1_comparison_phase <= addsub_s_net_x0;
  c1p1_pt_window <= convert11_dout_net;
  c1p1_pt_cntr <= counter_op_net;
  c1p1_integral_logic <= convert5_dout_net_x0;
  c1p1_delay_match <= constant1_op_net;
  cav1_p1_phase_out <= register13_q_net_x0;
  cav1_p1_amp_out <= register14_q_net_x0;
  flo_c1p2_window <= convert2_dout_net_x2;
  cav1_p1_if_amp <= down_sample1_q_net_x5;
  cav1_p2_windowed_img <= mult2_p_net_x1;
  cav1_p2_windowed_real <= mult_p_net;
  cav1_p2_windowed_ref_i <= mult4_p_net;
  cav1_p2_windowed_ref_q <= mult5_p_net_x0;
  cav1_p2_phase_out <= register13_q_net;
  cav1_p2_amp_out <= register14_q_net;
  cav1_p1_if_phase <= down_sample_q_net_x4;
  cav1_p1_if_i <= down_sample1_q_net_x0;
  cav1_p1_if_q <= down_sample_q_net;
  register29_q_net <= cav1_p1_chan_sel;
  register1_q_net <= cav1_p1_cal_coef;
  register35_q_net <= cav1_nco_phase_reset;
  register30_q_net <= cav1_p2_chan_sel;
  down_sample1_q_net_x1 <= rf_ref_amp;
  down_sample_q_net_x0 <= rf_ref_phase;
  down_sample_q_net_x1 <= rf_ref_q;
  register36_q_net <= cav1_nco_phase_adj;
  register31_q_net <= cav1_p1_window_start;
  register32_q_net <= cav1_p1_window_stop;
  down_sample1_q_net_x2 <= rf_ref_i;
  register33_q_net <= cav1_p2_window_start;
  register34_q_net <= cav1_p2_window_stop;
  register2_q_net <= cav1_p2_cal_coef;
  gateway_out3_x5 <= nco_sin;
  gateway_out4_x1 <= register9_q_net;
  gateway_out5_x3 <= nco_cos;
  gateway_out10_x1 <= mult2_p_net;
  gateway_out15_x1 <= convert_dout_net;
  gateway_out16_x1 <= convert1_dout_net;
  gateway_out3_x6 <= nco_sin;
  gateway_out4_x2 <= phase;
  gateway_out5_x4 <= nco_cos;
  gateway_out6_x3 <= cordic_6_0_m_axis_dout_tdata_real_net_x0;
  gateway_out7_x3 <= fir_compiler_7_2_m_axis_data_tdata_real_net;
  gateway_out8_x5 <= fir_compiler_7_2_m_axis_data_tvalid_net;
  gateway_out_x2 <= inverter_op_net;
  gateway_out1_x6 <= convert2_dout_net;
  gateway_out10_x0 <= mult4_p_net;
  gateway_out11_x2 <= register1_q_net_x3;
  gateway_out12_x0 <= convert4_dout_net;
  gateway_out13_x0 <= register12_q_net_x0;
  gateway_out14_x0 <= mult5_p_net_x0;
  gateway_out15_x0 <= register2_q_net_x3;
  gateway_out16_x0 <= inverter3_op_net_x0;
  gateway_out17_x0 <= accumulator3_q_net;
  gateway_out2_x6 <= inverter2_op_net;
  gateway_out22_x0 <= convert9_dout_net;
  gateway_out23_x0 <= convert10_dout_net;
  gateway_out3_x3 <= accumulator_q_net;
  gateway_out4_x0 <= accumulator2_q_net;
  gateway_out5_x1 <= mult2_p_net_x1;
  gateway_out6_x0 <= inverter1_op_net;
  gateway_out7_x0 <= accumulator1_q_net;
  gateway_out8_x1 <= mult_p_net;
  gateway_out9 <= register11_q_net_x0;
  gateway_out_x1 <= inverter_op_net_x0;
  gateway_out1_x3 <= convert2_dout_net_x3;
  gateway_out10 <= mult4_p_net_x0;
  gateway_out11_x1 <= register1_q_net_x2;
  gateway_out12 <= convert4_dout_net_x1;
  gateway_out13 <= register12_q_net;
  gateway_out14 <= mult5_p_net;
  gateway_out15 <= register2_q_net_x2;
  gateway_out16 <= inverter3_op_net;
  gateway_out17 <= accumulator3_q_net_x0;
  gateway_out2_x3 <= inverter2_op_net_x0;
  gateway_out22 <= convert9_dout_net_x1;
  gateway_out23 <= convert10_dout_net_x0;
  gateway_out3_x2 <= accumulator_q_net_x0;
  gateway_out4 <= accumulator2_q_net_x0;
  gateway_out5_x0 <= mult2_p_net_x0;
  gateway_out6 <= inverter1_op_net_x0;
  gateway_out7 <= accumulator1_q_net_x0;
  gateway_out8_x4 <= mult_p_net_x0;
  gateway_out9_x0 <= register11_q_net;
  gateway_out1_x5 <= delay5_q_net_x2;
  gateway_out2_x5 <= delay3_q_net_x2;
  gateway_out27_x2 <= relational4_op_net_x0;
  gateway_out28_x2 <= relational3_op_net_x0;
  gateway_out29_x2 <= convert11_dout_net_x0;
  gateway_out3_x4 <= convert7_dout_net_x1;
  gateway_out5_x2 <= convert5_dout_net_x1;
  gateway_out24_x0 <= convert5_dout_net_x0;
  gateway_out25_x0 <= convert10_dout_net_x0;
  gateway_out26_x0 <= convert9_dout_net_x1;
  gateway_out6_x1 <= convert5_dout_net_x0;
  gateway_out7_x2 <= convert4_dout_net_x1;
  gateway_out8_x3 <= convert2_dout_net_x3;
  gateway_out24 <= convert5_dout_net_x1;
  gateway_out25 <= convert10_dout_net;
  gateway_out26 <= convert9_dout_net;
  gateway_out6_x2 <= convert5_dout_net_x1;
  gateway_out7_x1 <= convert4_dout_net;
  gateway_out8_x2 <= convert2_dout_net;
  gateway_out1_x4 <= delay5_q_net;
  gateway_out2_x4 <= delay3_q_net_x0;
  gateway_out27_x1 <= relational4_op_net;
  gateway_out28_x1 <= relational3_op_net;
  gateway_out29_x1 <= convert11_dout_net;
  gateway_out3_x0 <= convert7_dout_net_x0;
  gateway_out5 <= convert5_dout_net_x0;
  gateway_out34_x0 <= convert11_dout_net;
  gateway_out35_x0 <= mult4_p_net_x0;
  gateway_out37_x0 <= convert11_dout_net;
  gateway_out38_x0 <= mult5_p_net;
  gateway_out34 <= convert11_dout_net_x0;
  gateway_out35 <= mult4_p_net;
  gateway_out37 <= convert11_dout_net_x0;
  gateway_out38 <= mult5_p_net_x0;
  gateway_out11_x0 <= convert_dout_net_x1;
  gateway_out19_x0 <= mult3_p_net;
  gateway_out20_x0 <= delay3_q_net;
  gateway_out8 <= divide_op_net;
  gateway_out27 <= addsub3_s_net_x0;
  gateway_out28 <= register_q_net_x0;
  gateway_out29 <= register1_q_net_x1;
  gateway_out3 <= mult1_p_net;
  gateway_out <= mult3_p_net;
  gateway_out1_x0 <= relational1_op_net_x0;
  gateway_out2_x0 <= delay5_q_net_x1;
  gateway_out1 <= mult_p_net_x2;
  gateway_out2 <= register2_q_net_x1;
  gateway_out11 <= convert_dout_net_x2;
  gateway_out19 <= mult3_p_net_x0;
  gateway_out20 <= delay3_q_net_x1;
  gateway_out8_x0 <= divide_op_net_x0;
  gateway_out27_x0 <= addsub3_s_net_x1;
  gateway_out28_x0 <= register_q_net;
  gateway_out29_x0 <= register1_q_net_x0;
  gateway_out3_x1 <= mult1_p_net_x0;
  gateway_out_x0 <= mult3_p_net_x0;
  gateway_out1_x2 <= relational1_op_net;
  gateway_out2_x2 <= delay5_q_net_x0;
  gateway_out1_x1 <= mult_p_net_x1;
  gateway_out2_x1 <= register2_q_net_x0;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  ddc_nco : entity work.appmodel_ddc_nco 
  port map (
    phase_ctrl => down_sample6_q_net,
    phase_reset => down_sample5_q_net,
    flo_c1p2_window => convert2_dout_net_x2,
    cav1_p2_if_i => down_sample1_q_net_x3,
    cav1_p2_if_q => down_sample_q_net_x2,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    tvalid => dds_compiler_6_0_m_axis_data_tvalid_net,
    sine => nco_sin,
    cosine => nco_cos,
    nco_out_1 => nco_sin,
    nco_out_2 => nco_cos,
    gateway_out10 => mult2_p_net,
    gateway_out15 => convert_dout_net,
    gateway_out16 => convert1_dout_net,
    gateway_out3 => nco_sin,
    gateway_out4 => phase,
    gateway_out5 => nco_cos,
    gateway_out6 => cordic_6_0_m_axis_dout_tdata_real_net_x0,
    gateway_out7 => fir_compiler_7_2_m_axis_data_tdata_real_net,
    gateway_out8 => fir_compiler_7_2_m_axis_data_tvalid_net
  );
  iq_integration : entity work.appmodel_iq_integration_x0 
  port map (
    cav_windowed_imag => mult2_p_net_x1,
    cav_windowed_real => mult_p_net,
    ref_windowed_i => mult4_p_net,
    ref_windowed_q => mult5_p_net_x0,
    window_profile => convert11_dout_net_x0,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    cav_int_q => convert10_dout_net,
    cav_int_i => convert9_dout_net,
    ref_int_i => convert2_dout_net,
    ref_int_q => convert4_dout_net,
    gateway_out => inverter_op_net,
    gateway_out1 => convert2_dout_net,
    gateway_out11 => register1_q_net_x3,
    gateway_out12 => convert4_dout_net,
    gateway_out13 => register12_q_net_x0,
    gateway_out15 => register2_q_net_x3,
    gateway_out16 => inverter3_op_net_x0,
    gateway_out17 => accumulator3_q_net,
    gateway_out2 => inverter2_op_net,
    gateway_out22 => convert9_dout_net,
    gateway_out23 => convert10_dout_net,
    gateway_out3 => accumulator_q_net,
    gateway_out4 => accumulator2_q_net,
    gateway_out6 => inverter1_op_net,
    gateway_out7 => accumulator1_q_net,
    gateway_out9 => register11_q_net_x0
  );
  iq_integration1 : entity work.appmodel_iq_integration1_x0 
  port map (
    cav_windowed_imag => mult2_p_net_x0,
    cav_windowed_real => mult_p_net_x0,
    ref_windowed_i => mult4_p_net_x0,
    ref_windowed_q => mult5_p_net,
    window_profile => convert11_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    cav_int_q => convert10_dout_net_x0,
    cav_int_i => convert9_dout_net_x1,
    ref_int_i => convert2_dout_net_x3,
    ref_int_q => convert4_dout_net_x1,
    gateway_out => inverter_op_net_x0,
    gateway_out1 => convert2_dout_net_x3,
    gateway_out11 => register1_q_net_x2,
    gateway_out12 => convert4_dout_net_x1,
    gateway_out13 => register12_q_net,
    gateway_out15 => register2_q_net_x2,
    gateway_out16 => inverter3_op_net,
    gateway_out17 => accumulator3_q_net_x0,
    gateway_out2 => inverter2_op_net_x0,
    gateway_out22 => convert9_dout_net_x1,
    gateway_out23 => convert10_dout_net_x0,
    gateway_out3 => accumulator_q_net_x0,
    gateway_out4 => accumulator2_q_net_x0,
    gateway_out6 => inverter1_op_net_x0,
    gateway_out7 => accumulator1_q_net_x0,
    gateway_out9 => register11_q_net
  );
  masking_window : entity work.appmodel_masking_window_x0 
  port map (
    phi_reset_trig => register35_q_net,
    start_pt => register33_q_net,
    stop_pt => register34_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    trig_reset => convert3_dout_net_x0,
    counter_x0 => counter_op_net_x0,
    eval_window => convert11_dout_net_x0,
    integral_trig => convert5_dout_net_x1,
    flo_window => convert2_dout_net_x2,
    gateway_out1 => delay5_q_net_x2,
    gateway_out2 => delay3_q_net_x2,
    gateway_out27 => relational4_op_net_x0,
    gateway_out28 => relational3_op_net_x0,
    gateway_out29 => convert11_dout_net_x0,
    gateway_out3 => convert7_dout_net_x1,
    gateway_out5 => convert5_dout_net_x1
  );
  pa_conversion1 : entity work.appmodel_pa_conversion1_x0 
  port map (
    cav_int_q => convert10_dout_net_x0,
    cav_int_i => convert9_dout_net_x1,
    ref_int_q => convert4_dout_net_x1,
    ref_int_i => convert2_dout_net_x3,
    integration_trig => convert5_dout_net_x0,
    cal_coefficient => down_sample7_q_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    phi_diff => addsub_s_net_x0,
    ref_phi_out => register11_q_net_x2,
    cav_phi_out => register13_q_net_x0,
    cav_amp_out => register14_q_net_x0
  );
  pa_conversion2 : entity work.appmodel_pa_conversion2_x0 
  port map (
    cav_int_q => convert10_dout_net,
    cav_int_i => convert9_dout_net,
    ref_int_q => convert4_dout_net,
    ref_int_i => convert2_dout_net,
    integration_trig => convert5_dout_net_x1,
    cal_coefficient => down_sample3_q_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    phi_diff => addsub_s_net,
    ref_phi_out => register11_q_net_x1,
    cav_phi_out => register13_q_net,
    cav_amp_out => register14_q_net
  );
  pa_select : entity work.appmodel_pa_select_x0 
  port map (
    pa_bus_1 => amp,
    pa_chan_sel => register29_q_net,
    pa_bus_2 => phase_x0,
    pa_bus_3 => channel,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    amp => down_sample1_q_net_x5,
    phase => down_sample_q_net_x4
  );
  pa_select1 : entity work.appmodel_pa_select1 
  port map (
    pa_bus_1 => amp,
    pa_chan_sel => register30_q_net,
    pa_bus_2 => phase_x0,
    pa_bus_3 => channel,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    amp => down_sample1_q_net_x4,
    phase => down_sample_q_net_x3
  );
  subsystem1_x0 : entity work.appmodel_subsystem1_x0 
  port map (
    iq_stream_in_1 => ddci,
    iq_chan_sel => register30_q_net,
    iq_stream_in_2 => ddcq,
    iq_stream_in_3 => ddcchannel,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    ddci => down_sample1_q_net_x3,
    ddcq => down_sample_q_net_x2
  );
  subsystem3 : entity work.appmodel_subsystem3_x1 
  port map (
    iq_stream_in_1 => ddci,
    iq_chan_sel => register29_q_net,
    iq_stream_in_2 => ddcq,
    iq_stream_in_3 => ddcchannel,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    ddci => down_sample1_q_net_x0,
    ddcq => down_sample_q_net
  );
  c1p1_masking_window : entity work.appmodel_c1p1_masking_window_x0 
  port map (
    phi_reset_trig => register35_q_net,
    start_pt => register31_q_net,
    stop_pt => register32_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    counter_x0 => counter_op_net,
    eval_window => convert11_dout_net,
    integral_trig => convert5_dout_net_x0,
    flo_window => convert2_dout_net_x1,
    gateway_out1 => delay5_q_net,
    gateway_out2 => delay3_q_net_x0,
    gateway_out27 => relational4_op_net,
    gateway_out28 => relational3_op_net,
    gateway_out29 => convert11_dout_net,
    gateway_out3 => convert7_dout_net_x0,
    gateway_out5 => convert5_dout_net_x0
  );
  c1p1_window_wf : entity work.appmodel_c1p1_window_wf_x0 
  port map (
    cav_img => convert5_dout_net,
    cav_real => convert6_dout_net,
    ref_img => down_sample_q_net_x1,
    ref_real => down_sample1_q_net_x2,
    window_profile => addsub3_s_net_x2,
    pt_window => convert11_dout_net,
    delay_match_amt => constant1_op_net,
    pt_cntr => counter_op_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    cav_windowed_imag => mult2_p_net_x0,
    cav_windowed_real => mult_p_net_x0,
    ref_windowed_imag => mult5_p_net,
    ref_windowed_real => mult4_p_net_x0,
    delayed_dc_img => dual_port_ram_doutb_net_x0,
    delayed_dc_real => dual_port_ram1_doutb_net_x0,
    gateway_out35 => mult4_p_net_x0,
    gateway_out38 => mult5_p_net
  );
  c1p2_window_wf : entity work.appmodel_c1p2_window_wf 
  port map (
    cav_img => convert_dout_net_x0,
    cav_real => convert1_dout_net_x0,
    ref_img => down_sample_q_net_x1,
    ref_real => down_sample1_q_net_x2,
    window_profile => addsub3_s_net,
    pt_window => convert11_dout_net_x0,
    delay_match_amt => constant2_op_net,
    pt_cntr => counter_op_net_x0,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    cav_windowed_imag => mult2_p_net_x1,
    cav_windowed_real => mult_p_net,
    ref_windowed_imag => mult5_p_net_x0,
    ref_windowed_real => mult4_p_net,
    delayed_cav_dc_img => dual_port_ram_doutb_net,
    delayed_cav_dc_real => dual_port_ram1_doutb_net,
    gateway_out35 => mult4_p_net,
    gateway_out38 => mult5_p_net_x0
  );
  c1p2_windowing_func : entity work.appmodel_c1p2_windowing_func_x0 
  port map (
    imag => convert3_dout_net,
    real => convert4_dout_net_x0,
    eval_window => convert11_dout_net_x0,
    flo_window => convert2_dout_net_x2,
    reset => convert3_dout_net_x0,
    c1p2_pt_cntr => counter_op_net_x0,
    cav1_p2_dc_tvalid => convert2_dout_net_x0,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    window_profile => addsub3_s_net,
    nco_feedback => convert_dout_net_x1,
    gateway_out11 => convert_dout_net_x1,
    gateway_out19 => mult3_p_net,
    gateway_out20 => delay3_q_net,
    gateway_out8 => divide_op_net,
    gateway_out27 => addsub3_s_net_x0,
    gateway_out28 => register_q_net_x0,
    gateway_out29 => register1_q_net_x1,
    gateway_out3 => mult1_p_net,
    gateway_out => mult3_p_net,
    gateway_out1_x0 => relational1_op_net_x0,
    gateway_out2_x0 => delay5_q_net_x1,
    gateway_out1 => mult_p_net_x2,
    gateway_out2 => register2_q_net_x1
  );
  c1p2_windowing_func1 : entity work.appmodel_c1p2_windowing_func1_x0 
  port map (
    imag => convert7_dout_net,
    real => convert8_dout_net,
    eval_window => convert11_dout_net,
    flo_window => convert2_dout_net_x1,
    reset => convert3_dout_net_x0,
    c1p2_pt_cntr => counter_op_net_x0,
    cav1_p2_dc_tvalid => convert2_dout_net_x0,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    window_profile => addsub3_s_net_x2,
    nco_feedback => convert_dout_net_x2,
    gateway_out11 => convert_dout_net_x2,
    gateway_out19 => mult3_p_net_x0,
    gateway_out20 => delay3_q_net_x1,
    gateway_out8 => divide_op_net_x0,
    gateway_out27 => addsub3_s_net_x1,
    gateway_out28 => register_q_net,
    gateway_out29 => register1_q_net_x0,
    gateway_out3 => mult1_p_net_x0,
    gateway_out => mult3_p_net_x0,
    gateway_out1_x0 => relational1_op_net,
    gateway_out2_x0 => delay5_q_net_x0,
    gateway_out1 => mult_p_net_x1,
    gateway_out2 => register2_q_net_x0
  );
  clock_enable_probe : entity work.appmodel_xlceprobe 
  generic map (
    d_width => 18,
    q_width => 1
  )
  port map (
    d => down_sample_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => clock_enable_probe_q_net
  );
  clock_enable_probe1 : entity work.appmodel_xlceprobe 
  generic map (
    d_width => 18,
    q_width => 1
  )
  port map (
    d => down_sample_q_net_x2,
    clk => d_clk_net,
    ce => q_ce_net,
    q => clock_enable_probe1_q_net
  );
  complex_multiplier_6_0 : entity work.xlcomplex_multiplier_9ea3ea4f9302ca9c16802064e75abe37 
  port map (
    s_axis_a_tvalid => down_sample2_q_net,
    s_axis_a_tdata_imag => down_sample_q_net,
    s_axis_a_tdata_real => down_sample1_q_net_x0,
    s_axis_b_tvalid => dds_compiler_6_0_m_axis_data_tvalid_net,
    s_axis_b_tdata_imag => nco_sin,
    s_axis_b_tdata_real => nco_cos,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => complex_multiplier_6_0_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_imag => complex_multiplier_6_0_m_axis_dout_tdata_imag_net,
    m_axis_dout_tdata_real => complex_multiplier_6_0_m_axis_dout_tdata_real_net
  );
  complex_multiplier_6_0_1 : entity work.xlcomplex_multiplier_9ea3ea4f9302ca9c16802064e75abe37 
  port map (
    s_axis_a_tvalid => down_sample1_q_net,
    s_axis_a_tdata_imag => down_sample_q_net_x2,
    s_axis_a_tdata_real => down_sample1_q_net_x3,
    s_axis_b_tvalid => dds_compiler_6_0_m_axis_data_tvalid_net,
    s_axis_b_tdata_imag => nco_sin,
    s_axis_b_tdata_real => nco_cos,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => complex_multiplier_6_0_1_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_imag => complex_multiplier_6_0_1_m_axis_dout_tdata_imag_net,
    m_axis_dout_tdata_real => complex_multiplier_6_0_1_m_axis_dout_tdata_real_net
  );
  constant1 : entity work.sysgen_constant_ea3f16fdf4 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant1_op_net
  );
  constant2 : entity work.sysgen_constant_ea3f16fdf4 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant2_op_net
  );
  convert : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 16,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register32_q_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert_dout_net_x0
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 16,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register33_q_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net_x0
  );
  convert2 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register31_q_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert2_dout_net_x0
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 31,
    dout_width => 33,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register32_q_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  convert4 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 31,
    dout_width => 33,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register33_q_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert4_dout_net_x0
  );
  convert5 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 16,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register1_q_net_x4,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert5_dout_net
  );
  convert6 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 16,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register2_q_net_x4,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert6_dout_net
  );
  convert7 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 31,
    dout_width => 33,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register1_q_net_x4,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert7_dout_net
  );
  convert8 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 31,
    dout_width => 33,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register2_q_net_x4,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert8_dout_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => clock_enable_probe1_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q(0) => down_sample1_q_net
  );
  down_sample2 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => clock_enable_probe_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q(0) => down_sample2_q_net
  );
  down_sample5 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register7_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample5_q_net
  );
  down_sample6 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 32,
    d_width => 32,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 32,
    q_width => 32
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register8_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample6_q_net
  );
  down_sample7 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register6_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample7_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => complex_multiplier_6_0_m_axis_dout_tdata_imag_net,
    en(0) => complex_multiplier_6_0_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register1_q_net_x4
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => complex_multiplier_6_0_m_axis_dout_tdata_real_net,
    en(0) => complex_multiplier_6_0_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register2_q_net_x4
  );
  register31 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d(0) => complex_multiplier_6_0_1_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register31_q_net_x0
  );
  register32 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => complex_multiplier_6_0_1_m_axis_dout_tdata_imag_net,
    en(0) => complex_multiplier_6_0_1_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register32_q_net_x0
  );
  register33 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => complex_multiplier_6_0_1_m_axis_dout_tdata_real_net,
    en(0) => complex_multiplier_6_0_1_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register33_q_net_x0
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register1_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  register7 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => register35_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register7_q_net
  );
  register8 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register36_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register8_q_net
  );
  register9 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register36_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register9_q_net
  );
  down_sample3 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register5_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample3_q_net
  );
  register5 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register2_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register5_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/DDC NCO1/four_point_avg1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_four_point_avg1_x0 is
  port (
    in1 : in std_logic_vector( 18-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out1 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_four_point_avg1_x0;
architecture structural of appmodel_four_point_avg1_x0 is 
  signal addsub3_s_net : std_logic_vector( 18-1 downto 0 );
  signal phase : std_logic_vector( 18-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 18-1 downto 0 );
  signal cmult_p_net : std_logic_vector( 18-1 downto 0 );
  signal cmult1_p_net : std_logic_vector( 18-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 18-1 downto 0 );
  signal cmult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal cmult3_p_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay2_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 18-1 downto 0 );
begin
  out1 <= addsub3_s_net;
  phase <= in1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 16,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 19,
    core_name0 => "appmodel_c_addsub_v12_0_i0",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 19,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 16,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult_p_net,
    b => cmult1_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 16,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 19,
    core_name0 => "appmodel_c_addsub_v12_0_i0",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 19,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 16,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult2_p_net,
    b => cmult3_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 16,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 19,
    core_name0 => "appmodel_c_addsub_v12_0_i0",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 19,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 16,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub2_s_net,
    b => addsub1_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  cmult : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_bin_pt => 14,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 16,
    c_output_width => 34,
    core_name0 => "appmodel_mult_gen_v12_0_i1",
    extra_registers => 1,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => phase,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult_p_net
  );
  cmult1 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_bin_pt => 14,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 16,
    c_output_width => 34,
    core_name0 => "appmodel_mult_gen_v12_0_i1",
    extra_registers => 1,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult1_p_net
  );
  cmult2 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_bin_pt => 14,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 16,
    c_output_width => 34,
    core_name0 => "appmodel_mult_gen_v12_0_i1",
    extra_registers => 1,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult2_p_net
  );
  cmult3 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_bin_pt => 14,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 16,
    c_output_width => 34,
    core_name0 => "appmodel_mult_gen_v12_0_i1",
    extra_registers => 1,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay3_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult3_p_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => phase,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/DDC NCO1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_ddc_nco1 is
  port (
    phase_ctrl : in std_logic_vector( 32-1 downto 0 );
    phase_reset : in std_logic_vector( 1-1 downto 0 );
    flo_c1p2_window : in std_logic_vector( 1-1 downto 0 );
    cav1_p2_if_i : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_q : in std_logic_vector( 18-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    tvalid : out std_logic;
    sine : out std_logic_vector( 26-1 downto 0 );
    cosine : out std_logic_vector( 26-1 downto 0 );
    nco_out_1 : out std_logic_vector( 26-1 downto 0 );
    nco_out_2 : out std_logic_vector( 26-1 downto 0 );
    gateway_out10 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15 : out std_logic_vector( 18-1 downto 0 );
    gateway_out16 : out std_logic_vector( 18-1 downto 0 );
    gateway_out3 : out std_logic_vector( 26-1 downto 0 );
    gateway_out4 : out std_logic_vector( 18-1 downto 0 );
    gateway_out5 : out std_logic_vector( 26-1 downto 0 );
    gateway_out6 : out std_logic_vector( 18-1 downto 0 );
    gateway_out7 : out std_logic_vector( 34-1 downto 0 );
    gateway_out8 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_ddc_nco1;
architecture structural of appmodel_ddc_nco1 is 
  signal dds_compiler_6_0_s_axis_phase_tready_net : std_logic;
  signal fir_compiler_7_2_s_axis_data_tready_net : std_logic;
  signal dds_compiler_6_0_m_axis_data_tvalid_net : std_logic;
  signal nco_sin : std_logic_vector( 26-1 downto 0 );
  signal nco_cos : std_logic_vector( 26-1 downto 0 );
  signal down_sample6_q_net : std_logic_vector( 32-1 downto 0 );
  signal down_sample5_q_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 18-1 downto 0 );
  signal phase : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 18-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tdata_real_net : std_logic_vector( 34-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tvalid_net : std_logic_vector( 1-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub3_s_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tvalid_net : std_logic;
  signal down_sample3_q_net : std_logic;
  signal clock_enable_probe1_q_net : std_logic_vector( 1-1 downto 0 );
  signal constant21_op_net : std_logic_vector( 1-1 downto 0 );
begin
  tvalid <= dds_compiler_6_0_m_axis_data_tvalid_net;
  sine <= nco_sin;
  cosine <= nco_cos;
  nco_out_1 <= nco_sin;
  nco_out_2 <= nco_cos;
  down_sample6_q_net <= phase_ctrl;
  down_sample5_q_net <= phase_reset;
  convert2_dout_net <= flo_c1p2_window;
  down_sample1_q_net <= cav1_p2_if_i;
  down_sample_q_net <= cav1_p2_if_q;
  gateway_out10 <= mult2_p_net;
  gateway_out15 <= convert_dout_net;
  gateway_out16 <= convert1_dout_net;
  gateway_out3 <= nco_sin;
  gateway_out4 <= phase;
  gateway_out5 <= nco_cos;
  gateway_out6 <= cordic_6_0_m_axis_dout_tdata_real_net;
  gateway_out7 <= fir_compiler_7_2_m_axis_data_tdata_real_net;
  gateway_out8 <= fir_compiler_7_2_m_axis_data_tvalid_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  four_point_avg1 : entity work.appmodel_four_point_avg1_x0 
  port map (
    in1 => phase,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out1 => addsub3_s_net
  );
  cordic_6_0 : entity work.xlcordic_9a094de110515cd9af19450d39b68da3 
  port map (
    s_axis_cartesian_tvalid => down_sample3_q_net,
    s_axis_cartesian_tdata_imag => convert_dout_net,
    s_axis_cartesian_tdata_real => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => phase,
    m_axis_dout_tdata_real => cordic_6_0_m_axis_dout_tdata_real_net
  );
  clock_enable_probe1 : entity work.appmodel_xlceprobe 
  generic map (
    d_width => 18,
    q_width => 1
  )
  port map (
    d => down_sample_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => clock_enable_probe1_q_net
  );
  constant21 : entity work.sysgen_constant_a6b4957d83 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant21_op_net
  );
  convert : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 16,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => down_sample_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert_dout_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 17,
    din_width => 18,
    dout_arith => 2,
    dout_bin_pt => 16,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => down_sample1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  dds_compiler_6_0 : entity work.xldds_compiler_6ff3ac3ee54f181bad19e02cc7597eff 
  port map (
    s_axis_phase_tvalid => constant21_op_net(0),
    s_axis_phase_tdata_resync => down_sample5_q_net,
    s_axis_phase_tdata_pinc => down_sample6_q_net,
    m_axis_data_tready => constant21_op_net(0),
    clk => d_clk_net,
    ce => q_ce_net,
    s_axis_phase_tready => dds_compiler_6_0_s_axis_phase_tready_net,
    m_axis_data_tvalid => dds_compiler_6_0_m_axis_data_tvalid_net,
    m_axis_data_tdata_sine => nco_sin,
    m_axis_data_tdata_cosine => nco_cos
  );
  down_sample3 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => clock_enable_probe1_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q(0) => down_sample3_q_net
  );
  fir_compiler_7_2 : entity work.xlfir_compiler_3e9784e743af4e9803379b6c81c999a3 
  port map (
    s_axis_data_tdata_real => mult2_p_net,
    src_clk => d_clk_net,
    src_ce => q_ce_net,
    clk => q_clk_net,
    ce => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    clk_logic_12 => d_clk_net,
    ce_logic_12 => q_ce_net,
    s_axis_data_tready => fir_compiler_7_2_s_axis_data_tready_net,
    m_axis_data_tvalid => fir_compiler_7_2_m_axis_data_tvalid_net(0),
    m_axis_data_tdata_real => fir_compiler_7_2_m_axis_data_tdata_real_net
  );
  mult2 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 1,
    b_arith => xlSigned,
    b_bin_pt => 16,
    b_width => 18,
    c_a_type => 1,
    c_a_width => 1,
    c_b_type => 0,
    c_b_width => 18,
    c_baat => 1,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i0",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 15,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => convert2_dout_net,
    b => addsub3_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult2_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/IQ_integration
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_iq_integration is
  port (
    cav_windowed_imag : in std_logic_vector( 18-1 downto 0 );
    cav_windowed_real : in std_logic_vector( 18-1 downto 0 );
    ref_windowed_i : in std_logic_vector( 18-1 downto 0 );
    ref_windowed_q : in std_logic_vector( 18-1 downto 0 );
    window_profile : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    cav_int_q : out std_logic_vector( 20-1 downto 0 );
    cav_int_i : out std_logic_vector( 20-1 downto 0 );
    ref_int_i : out std_logic_vector( 20-1 downto 0 );
    ref_int_q : out std_logic_vector( 20-1 downto 0 );
    gateway_out : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out15 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7 : out std_logic_vector( 32-1 downto 0 );
    gateway_out9 : out std_logic_vector( 32-1 downto 0 )
  );
end appmodel_iq_integration;
architecture structural of appmodel_iq_integration is 
  signal convert9_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 20-1 downto 0 );
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult4_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult5_p_net : std_logic_vector( 18-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 32-1 downto 0 );
  signal register12_q_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator_q_net : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter1_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net : std_logic_vector( 32-1 downto 0 );
  signal register11_q_net : std_logic_vector( 32-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert6_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert10_dout_net : std_logic_vector( 20-1 downto 0 );
begin
  cav_int_q <= convert10_dout_net;
  cav_int_i <= convert9_dout_net;
  ref_int_i <= convert2_dout_net;
  ref_int_q <= convert4_dout_net;
  mult2_p_net <= cav_windowed_imag;
  mult_p_net <= cav_windowed_real;
  mult4_p_net <= ref_windowed_i;
  mult5_p_net <= ref_windowed_q;
  convert11_dout_net <= window_profile;
  gateway_out <= inverter_op_net;
  gateway_out1 <= convert2_dout_net;
  gateway_out11 <= register1_q_net;
  gateway_out12 <= convert4_dout_net;
  gateway_out13 <= register12_q_net;
  gateway_out15 <= register2_q_net;
  gateway_out16 <= inverter3_op_net;
  gateway_out17 <= accumulator3_q_net;
  gateway_out2 <= inverter2_op_net;
  gateway_out22 <= convert9_dout_net;
  gateway_out23 <= convert10_dout_net;
  gateway_out3 <= accumulator_q_net;
  gateway_out4 <= accumulator2_q_net;
  gateway_out6 <= inverter1_op_net;
  gateway_out7 <= accumulator1_q_net;
  gateway_out9 <= register11_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  accumulator : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult2_p_net,
    rst => inverter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator_q_net
  );
  accumulator1 : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult_p_net,
    rst => inverter1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator1_q_net
  );
  accumulator2 : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult4_p_net,
    rst => inverter2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator2_q_net
  );
  accumulator3 : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult5_p_net,
    rst => inverter3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator3_q_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  convert10 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register12_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert10_dout_net
  );
  convert2 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert2_dout_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  convert4 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert4_dout_net
  );
  convert5 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert5_dout_net
  );
  convert6 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert6_dout_net
  );
  convert9 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register11_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert9_dout_net
  );
  inverter : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert5_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter_op_net
  );
  inverter1 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert6_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter1_op_net
  );
  inverter2 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter2_op_net
  );
  inverter3 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert3_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter3_op_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator2_q_net,
    en => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register1_q_net
  );
  register11 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator1_q_net,
    en => convert6_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register11_q_net
  );
  register12 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator_q_net,
    en => convert5_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register12_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator3_q_net,
    en => convert3_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register2_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/IQ_integration1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_iq_integration1 is
  port (
    cav_windowed_imag : in std_logic_vector( 18-1 downto 0 );
    cav_windowed_real : in std_logic_vector( 18-1 downto 0 );
    ref_windowed_i : in std_logic_vector( 18-1 downto 0 );
    ref_windowed_q : in std_logic_vector( 18-1 downto 0 );
    window_profile : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    cav_int_q : out std_logic_vector( 20-1 downto 0 );
    cav_int_i : out std_logic_vector( 20-1 downto 0 );
    ref_int_i : out std_logic_vector( 20-1 downto 0 );
    ref_int_q : out std_logic_vector( 20-1 downto 0 );
    gateway_out : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out15 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7 : out std_logic_vector( 32-1 downto 0 );
    gateway_out9 : out std_logic_vector( 32-1 downto 0 )
  );
end appmodel_iq_integration1;
architecture structural of appmodel_iq_integration1 is 
  signal convert9_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 20-1 downto 0 );
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult4_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult5_p_net : std_logic_vector( 18-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 32-1 downto 0 );
  signal register12_q_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator_q_net : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter1_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net : std_logic_vector( 32-1 downto 0 );
  signal register11_q_net : std_logic_vector( 32-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert6_dout_net : std_logic_vector( 1-1 downto 0 );
begin
  cav_int_q <= convert10_dout_net;
  cav_int_i <= convert9_dout_net;
  ref_int_i <= convert2_dout_net;
  ref_int_q <= convert4_dout_net;
  mult2_p_net <= cav_windowed_imag;
  mult_p_net <= cav_windowed_real;
  mult4_p_net <= ref_windowed_i;
  mult5_p_net <= ref_windowed_q;
  convert11_dout_net <= window_profile;
  gateway_out <= inverter_op_net;
  gateway_out1 <= convert2_dout_net;
  gateway_out11 <= register1_q_net;
  gateway_out12 <= convert4_dout_net;
  gateway_out13 <= register12_q_net;
  gateway_out15 <= register2_q_net;
  gateway_out16 <= inverter3_op_net;
  gateway_out17 <= accumulator3_q_net;
  gateway_out2 <= inverter2_op_net;
  gateway_out22 <= convert9_dout_net;
  gateway_out23 <= convert10_dout_net;
  gateway_out3 <= accumulator_q_net;
  gateway_out4 <= accumulator2_q_net;
  gateway_out6 <= inverter1_op_net;
  gateway_out7 <= accumulator1_q_net;
  gateway_out9 <= register11_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  accumulator : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult2_p_net,
    rst => inverter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator_q_net
  );
  accumulator1 : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult_p_net,
    rst => inverter1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator1_q_net
  );
  accumulator2 : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult4_p_net,
    rst => inverter2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator2_q_net
  );
  accumulator3 : entity work.sysgen_accum_b826f4269e 
  port map (
    clr => '0',
    b => mult5_p_net,
    rst => inverter3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => accumulator3_q_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  convert10 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register12_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert10_dout_net
  );
  convert2 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert2_dout_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  convert4 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert4_dout_net
  );
  convert5 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert5_dout_net
  );
  convert6 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert6_dout_net
  );
  convert9 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 16,
    din_width => 32,
    dout_arith => 2,
    dout_bin_pt => 18,
    dout_width => 20,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register11_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert9_dout_net
  );
  inverter : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert5_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter_op_net
  );
  inverter1 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert6_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter1_op_net
  );
  inverter2 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter2_op_net
  );
  inverter3 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert3_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter3_op_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator2_q_net,
    en => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register1_q_net
  );
  register11 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator1_q_net,
    en => convert6_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register11_q_net
  );
  register12 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator_q_net,
    en => convert5_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register12_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => accumulator3_q_net,
    en => convert3_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register2_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/Masking_window
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_masking_window is
  port (
    phi_reset_trig : in std_logic_vector( 1-1 downto 0 );
    start_pt : in std_logic_vector( 16-1 downto 0 );
    stop_pt : in std_logic_vector( 16-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    trig_reset : out std_logic_vector( 1-1 downto 0 );
    counter_x0 : out std_logic_vector( 16-1 downto 0 );
    eval_window : out std_logic_vector( 1-1 downto 0 );
    integral_trig : out std_logic_vector( 1-1 downto 0 );
    flo_window : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_masking_window;
architecture structural of appmodel_masking_window is 
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal register35_q_net : std_logic_vector( 1-1 downto 0 );
  signal register33_q_net : std_logic_vector( 16-1 downto 0 );
  signal register34_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net : std_logic_vector( 1-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 16-1 downto 0 );
  signal constant11_op_net : std_logic_vector( 16-1 downto 0 );
  signal constant1_op_net : std_logic_vector( 16-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 16-1 downto 0 );
  signal constant3_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal logical1_y_net : std_logic_vector( 1-1 downto 0 );
  signal logical2_y_net : std_logic_vector( 1-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 1-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 1-1 downto 0 );
  signal relational6_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational5_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert8_dout_net : std_logic_vector( 1-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay2_q_net : std_logic_vector( 16-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 16-1 downto 0 );
  signal down_sample2_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay4_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay6_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay7_q_net : std_logic_vector( 16-1 downto 0 );
  signal register10_q_net : std_logic_vector( 1-1 downto 0 );
  signal register5_q_net : std_logic_vector( 16-1 downto 0 );
  signal register6_q_net : std_logic_vector( 16-1 downto 0 );
  signal relational2_op_net : std_logic_vector( 1-1 downto 0 );
begin
  trig_reset <= convert3_dout_net;
  counter_x0 <= counter_op_net;
  eval_window <= convert11_dout_net;
  integral_trig <= convert5_dout_net;
  flo_window <= convert2_dout_net;
  register35_q_net <= phi_reset_trig;
  register33_q_net <= start_pt;
  register34_q_net <= stop_pt;
  gateway_out1 <= delay5_q_net;
  gateway_out2 <= delay3_q_net;
  gateway_out27 <= relational4_op_net;
  gateway_out28 <= relational3_op_net;
  gateway_out29 <= convert11_dout_net;
  gateway_out3 <= convert7_dout_net;
  gateway_out5 <= convert5_dout_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 16,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 16,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 17,
    core_name0 => "appmodel_c_addsub_v12_0_i1",
    extra_registers => 0,
    full_s_arith => 1,
    full_s_width => 17,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlUnsigned,
    s_bin_pt => 0,
    s_width => 16
  )
  port map (
    clr => '0',
    en => "1",
    a => delay3_q_net,
    b => constant11_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  constant1 : entity work.sysgen_constant_ebc8def3a6 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant1_op_net
  );
  constant11 : entity work.sysgen_constant_a49bba6212 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant11_op_net
  );
  constant2 : entity work.sysgen_constant_c75c7568ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant2_op_net
  );
  constant3 : entity work.sysgen_constant_b9d15577be 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant3_op_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  convert11 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => logical1_y_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert11_dout_net
  );
  convert2 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => logical2_y_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert2_dout_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => down_sample_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  convert4 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational6_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert4_dout_net
  );
  convert5 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational5_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert5_dout_net
  );
  convert7 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert7_dout_net
  );
  convert8 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational4_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert8_dout_net
  );
  counter : entity work.appmodel_xlcounter_free 
  generic map (
    core_name0 => "appmodel_c_counter_binary_v12_0_i0",
    op_arith => xlUnsigned,
    op_width => 16
  )
  port map (
    en => "1",
    clr => '0',
    rst => convert3_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => counter_op_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => down_sample1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => down_sample2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
  delay4 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay4_q_net
  );
  delay5 : entity work.appmodel_xldelay 
  generic map (
    latency => 3,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay5_q_net
  );
  delay6 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay6_q_net
  );
  delay7 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay7_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register10_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register5_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  down_sample2 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register6_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample2_q_net
  );
  logical1 : entity work.sysgen_logical_378794f819 
  port map (
    clr => '0',
    d0 => convert8_dout_net,
    d1 => convert7_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    y => logical1_y_net
  );
  logical2 : entity work.sysgen_logical_378794f819 
  port map (
    clr => '0',
    d0 => convert4_dout_net,
    d1 => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    y => logical2_y_net
  );
  register10 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => register35_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register10_q_net
  );
  register5 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register33_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register5_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000001100100"
  )
  port map (
    en => "1",
    rst => "0",
    d => register34_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational1 : entity work.sysgen_relational_e98fcceecc 
  port map (
    clr => '0',
    a => delay7_q_net,
    b => constant2_op_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational1_op_net
  );
  relational2 : entity work.sysgen_relational_0ba61784a5 
  port map (
    clr => '0',
    a => counter_op_net,
    b => constant1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational2_op_net
  );
  relational3 : entity work.sysgen_relational_e98fcceecc 
  port map (
    clr => '0',
    a => delay4_q_net,
    b => delay3_q_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational3_op_net
  );
  relational4 : entity work.sysgen_relational_13cde72925 
  port map (
    clr => '0',
    a => delay1_q_net,
    b => delay2_q_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational4_op_net
  );
  relational5 : entity work.sysgen_relational_e98fcceecc 
  port map (
    clr => '0',
    a => counter_op_net,
    b => addsub1_s_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational5_op_net
  );
  relational6 : entity work.sysgen_relational_13cde72925 
  port map (
    clr => '0',
    a => delay6_q_net,
    b => constant3_op_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational6_op_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/PA_conversion1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_pa_conversion1 is
  port (
    cav_int_q : in std_logic_vector( 20-1 downto 0 );
    cav_int_i : in std_logic_vector( 20-1 downto 0 );
    ref_int_q : in std_logic_vector( 20-1 downto 0 );
    ref_int_i : in std_logic_vector( 20-1 downto 0 );
    integration_trig : in std_logic_vector( 1-1 downto 0 );
    cal_coefficient : in std_logic_vector( 18-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    phi_diff : out std_logic_vector( 18-1 downto 0 );
    ref_phi_out : out std_logic_vector( 18-1 downto 0 );
    cav_phi_out : out std_logic_vector( 18-1 downto 0 );
    cav_amp_out : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_pa_conversion1;
architecture structural of appmodel_pa_conversion1 is 
  signal addsub_s_net : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert10_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert9_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 1-1 downto 0 );
  signal down_sample7_q_net : std_logic_vector( 18-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_1_m_axis_dout_tvalid_net : std_logic;
  signal cordic_6_0_1_m_axis_dout_tdata_phase_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_1_m_axis_dout_tdata_real_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_2_m_axis_dout_tvalid_net : std_logic;
  signal cordic_6_0_2_m_axis_dout_tdata_phase_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_2_m_axis_dout_tdata_real_net : std_logic_vector( 18-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 18-1 downto 0 );
  signal inverter1_op_net : std_logic_vector( 1-1 downto 0 );
  signal inverter2_op_net : std_logic_vector( 1-1 downto 0 );
  signal inverter3_op_net : std_logic_vector( 1-1 downto 0 );
begin
  phi_diff <= addsub_s_net;
  ref_phi_out <= register11_q_net;
  cav_phi_out <= register13_q_net;
  cav_amp_out <= register14_q_net;
  convert10_dout_net <= cav_int_q;
  convert9_dout_net <= cav_int_i;
  convert4_dout_net <= ref_int_q;
  convert2_dout_net <= ref_int_i;
  convert5_dout_net <= integration_trig;
  down_sample7_q_net <= cal_coefficient;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 15,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 19,
    core_name0 => "appmodel_c_addsub_v12_0_i2",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 19,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 15,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub1_s_net,
    b => register11_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub_s_net
  );
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 17,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 21,
    core_name0 => "appmodel_c_addsub_v12_0_i3",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 21,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 15,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => register13_q_net,
    b => down_sample7_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  cordic_6_0_1 : entity work.xlcordic_2a3c59e96d626a584ddbfc4f1e648788 
  port map (
    s_axis_cartesian_tvalid => convert5_dout_net(0),
    s_axis_cartesian_tdata_imag => convert10_dout_net,
    s_axis_cartesian_tdata_real => convert9_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_1_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => cordic_6_0_1_m_axis_dout_tdata_phase_net,
    m_axis_dout_tdata_real => cordic_6_0_1_m_axis_dout_tdata_real_net
  );
  cordic_6_0_2 : entity work.xlcordic_2a3c59e96d626a584ddbfc4f1e648788 
  port map (
    s_axis_cartesian_tvalid => convert5_dout_net(0),
    s_axis_cartesian_tdata_imag => convert4_dout_net,
    s_axis_cartesian_tdata_real => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_2_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => cordic_6_0_2_m_axis_dout_tdata_phase_net,
    m_axis_dout_tdata_real => cordic_6_0_2_m_axis_dout_tdata_real_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_1_m_axis_dout_tdata_real_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_1_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_2_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
  inverter1 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip(0) => cordic_6_0_2_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter1_op_net
  );
  inverter2 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip(0) => cordic_6_0_1_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter2_op_net
  );
  inverter3 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip(0) => cordic_6_0_1_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter3_op_net
  );
  register11 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay3_q_net,
    en => inverter1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register11_q_net
  );
  register13 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => inverter2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register13_q_net
  );
  register14 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => inverter3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register14_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/PA_conversion2
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_pa_conversion2 is
  port (
    cav_int_q : in std_logic_vector( 20-1 downto 0 );
    cav_int_i : in std_logic_vector( 20-1 downto 0 );
    ref_int_q : in std_logic_vector( 20-1 downto 0 );
    ref_int_i : in std_logic_vector( 20-1 downto 0 );
    integration_trig : in std_logic_vector( 1-1 downto 0 );
    cal_coefficient : in std_logic_vector( 18-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    phi_diff : out std_logic_vector( 18-1 downto 0 );
    ref_phi_out : out std_logic_vector( 18-1 downto 0 );
    cav_phi_out : out std_logic_vector( 18-1 downto 0 );
    cav_amp_out : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_pa_conversion2;
architecture structural of appmodel_pa_conversion2 is 
  signal addsub_s_net : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert10_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert9_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 1-1 downto 0 );
  signal down_sample3_q_net : std_logic_vector( 18-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_1_m_axis_dout_tvalid_net : std_logic;
  signal cordic_6_0_1_m_axis_dout_tdata_phase_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_1_m_axis_dout_tdata_real_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_2_m_axis_dout_tvalid_net : std_logic;
  signal cordic_6_0_2_m_axis_dout_tdata_phase_net : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_2_m_axis_dout_tdata_real_net : std_logic_vector( 18-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 18-1 downto 0 );
  signal inverter1_op_net : std_logic_vector( 1-1 downto 0 );
  signal inverter2_op_net : std_logic_vector( 1-1 downto 0 );
  signal inverter3_op_net : std_logic_vector( 1-1 downto 0 );
begin
  phi_diff <= addsub_s_net;
  ref_phi_out <= register11_q_net;
  cav_phi_out <= register13_q_net;
  cav_amp_out <= register14_q_net;
  convert10_dout_net <= cav_int_q;
  convert9_dout_net <= cav_int_i;
  convert4_dout_net <= ref_int_q;
  convert2_dout_net <= ref_int_i;
  convert5_dout_net <= integration_trig;
  down_sample3_q_net <= cal_coefficient;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 15,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 19,
    core_name0 => "appmodel_c_addsub_v12_0_i2",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 19,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 15,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub1_s_net,
    b => register11_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub_s_net
  );
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 15,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 17,
    b_width => 18,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 21,
    core_name0 => "appmodel_c_addsub_v12_0_i3",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 21,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 15,
    s_width => 18
  )
  port map (
    clr => '0',
    en => "1",
    a => register13_q_net,
    b => down_sample3_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  cordic_6_0_1 : entity work.xlcordic_2a3c59e96d626a584ddbfc4f1e648788 
  port map (
    s_axis_cartesian_tvalid => convert5_dout_net(0),
    s_axis_cartesian_tdata_imag => convert10_dout_net,
    s_axis_cartesian_tdata_real => convert9_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_1_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => cordic_6_0_1_m_axis_dout_tdata_phase_net,
    m_axis_dout_tdata_real => cordic_6_0_1_m_axis_dout_tdata_real_net
  );
  cordic_6_0_2 : entity work.xlcordic_2a3c59e96d626a584ddbfc4f1e648788 
  port map (
    s_axis_cartesian_tvalid => convert5_dout_net(0),
    s_axis_cartesian_tdata_imag => convert4_dout_net,
    s_axis_cartesian_tdata_real => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_2_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => cordic_6_0_2_m_axis_dout_tdata_phase_net,
    m_axis_dout_tdata_real => cordic_6_0_2_m_axis_dout_tdata_real_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_1_m_axis_dout_tdata_real_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_1_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_2_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
  inverter1 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip(0) => cordic_6_0_2_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter1_op_net
  );
  inverter2 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip(0) => cordic_6_0_1_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter2_op_net
  );
  inverter3 : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip(0) => cordic_6_0_1_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter3_op_net
  );
  register11 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay3_q_net,
    en => inverter1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register11_q_net
  );
  register13 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => inverter2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register13_q_net
  );
  register14 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => inverter3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register14_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/PA_select/Channel Select1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_channel_select1_x2 is
  port (
    in0 : in std_logic_vector( 18-1 downto 0 );
    in1 : in std_logic_vector( 18-1 downto 0 );
    ch_id : in std_logic_vector( 4-1 downto 0 );
    ch_sel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out0 : out std_logic_vector( 18-1 downto 0 );
    out1 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_channel_select1_x2;
architecture structural of appmodel_channel_select1_x2 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal amp : std_logic_vector( 18-1 downto 0 );
  signal phase : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal register29_q_net : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant13_op_net : std_logic_vector( 4-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register3_q_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net : std_logic_vector( 18-1 downto 0 );
  signal register_q_net : std_logic_vector( 18-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register6_q_net : std_logic_vector( 1-1 downto 0 );
  signal last : std_logic_vector( 1-1 downto 0 );
begin
  out0 <= down_sample1_q_net;
  out1 <= down_sample_q_net;
  amp <= in0;
  phase <= in1;
  channel <= ch_id;
  register29_q_net <= ch_sel;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant13 : entity work.sysgen_constant_6cd5a293ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => phase,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => amp,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay1_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register3_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register2_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register1_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register1_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register2_q_net
  );
  register3 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register3_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => last,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => channel,
    b => register29_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => channel,
    b => constant13_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => last
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/PA_select
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_pa_select_x1 is
  port (
    pa_bus_1 : in std_logic_vector( 18-1 downto 0 );
    pa_chan_sel : in std_logic_vector( 4-1 downto 0 );
    pa_bus_2 : in std_logic_vector( 18-1 downto 0 );
    pa_bus_3 : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    amp : out std_logic_vector( 18-1 downto 0 );
    phase : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_pa_select_x1;
architecture structural of appmodel_pa_select_x1 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal amp_x0 : std_logic_vector( 18-1 downto 0 );
  signal register29_q_net : std_logic_vector( 4-1 downto 0 );
  signal phase_x0 : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
begin
  amp <= down_sample1_q_net;
  phase <= down_sample_q_net;
  amp_x0 <= pa_bus_1;
  register29_q_net <= pa_chan_sel;
  phase_x0 <= pa_bus_2;
  channel <= pa_bus_3;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  channel_select1 : entity work.appmodel_channel_select1_x2 
  port map (
    in0 => amp_x0,
    in1 => phase_x0,
    ch_id => channel,
    ch_sel => register29_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out0 => down_sample1_q_net,
    out1 => down_sample_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/PA_select1/Channel Select1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_channel_select1 is
  port (
    in0 : in std_logic_vector( 18-1 downto 0 );
    in1 : in std_logic_vector( 18-1 downto 0 );
    ch_id : in std_logic_vector( 4-1 downto 0 );
    ch_sel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out0 : out std_logic_vector( 18-1 downto 0 );
    out1 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_channel_select1;
architecture structural of appmodel_channel_select1 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal amp : std_logic_vector( 18-1 downto 0 );
  signal phase : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant13_op_net : std_logic_vector( 4-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register3_q_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net : std_logic_vector( 18-1 downto 0 );
  signal register_q_net : std_logic_vector( 18-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register6_q_net : std_logic_vector( 1-1 downto 0 );
  signal last : std_logic_vector( 1-1 downto 0 );
begin
  out0 <= down_sample1_q_net;
  out1 <= down_sample_q_net;
  amp <= in0;
  phase <= in1;
  channel <= ch_id;
  register30_q_net <= ch_sel;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant13 : entity work.sysgen_constant_6cd5a293ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => phase,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => amp,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay1_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register3_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register2_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register1_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register1_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register2_q_net
  );
  register3 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register3_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => last,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => channel,
    b => register30_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => channel,
    b => constant13_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => last
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/PA_select1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_pa_select1_x0 is
  port (
    pa_bus_1 : in std_logic_vector( 18-1 downto 0 );
    pa_chan_sel : in std_logic_vector( 4-1 downto 0 );
    pa_bus_2 : in std_logic_vector( 18-1 downto 0 );
    pa_bus_3 : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    amp : out std_logic_vector( 18-1 downto 0 );
    phase : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_pa_select1_x0;
architecture structural of appmodel_pa_select1_x0 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal amp_x0 : std_logic_vector( 18-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal phase_x0 : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
begin
  amp <= down_sample1_q_net;
  phase <= down_sample_q_net;
  amp_x0 <= pa_bus_1;
  register30_q_net <= pa_chan_sel;
  phase_x0 <= pa_bus_2;
  channel <= pa_bus_3;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  channel_select1 : entity work.appmodel_channel_select1 
  port map (
    in0 => amp_x0,
    in1 => phase_x0,
    ch_id => channel,
    ch_sel => register30_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out0 => down_sample1_q_net,
    out1 => down_sample_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/Subsystem1/Channel Select3
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_channel_select3_x1 is
  port (
    in0 : in std_logic_vector( 18-1 downto 0 );
    in1 : in std_logic_vector( 18-1 downto 0 );
    ch_id : in std_logic_vector( 4-1 downto 0 );
    ch_sel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out0 : out std_logic_vector( 18-1 downto 0 );
    out1 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_channel_select3_x1;
architecture structural of appmodel_channel_select3_x1 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal ddci : std_logic_vector( 18-1 downto 0 );
  signal ddcq : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel : std_logic_vector( 4-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant13_op_net : std_logic_vector( 4-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register3_q_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net : std_logic_vector( 18-1 downto 0 );
  signal register_q_net : std_logic_vector( 18-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register6_q_net : std_logic_vector( 1-1 downto 0 );
  signal last : std_logic_vector( 1-1 downto 0 );
begin
  out0 <= down_sample1_q_net;
  out1 <= down_sample_q_net;
  ddci <= in0;
  ddcq <= in1;
  ddcchannel <= ch_id;
  register30_q_net <= ch_sel;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant13 : entity work.sysgen_constant_6cd5a293ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => ddcq,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => ddci,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay1_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register3_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register2_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register1_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register1_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register2_q_net
  );
  register3 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register3_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => last,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => ddcchannel,
    b => register30_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => ddcchannel,
    b => constant13_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => last
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/Subsystem1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_subsystem1 is
  port (
    iq_stream_in_1 : in std_logic_vector( 18-1 downto 0 );
    iq_chan_sel : in std_logic_vector( 4-1 downto 0 );
    iq_stream_in_2 : in std_logic_vector( 18-1 downto 0 );
    iq_stream_in_3 : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    ddci : out std_logic_vector( 18-1 downto 0 );
    ddcq : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_subsystem1;
architecture structural of appmodel_subsystem1 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal ddci_x0 : std_logic_vector( 18-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal ddcq_x0 : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
begin
  ddci <= down_sample1_q_net;
  ddcq <= down_sample_q_net;
  ddci_x0 <= iq_stream_in_1;
  register30_q_net <= iq_chan_sel;
  ddcq_x0 <= iq_stream_in_2;
  ddcchannel <= iq_stream_in_3;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  channel_select3 : entity work.appmodel_channel_select3_x1 
  port map (
    in0 => ddci_x0,
    in1 => ddcq_x0,
    ch_id => ddcchannel,
    ch_sel => register30_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out0 => down_sample1_q_net,
    out1 => down_sample_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/Subsystem3/Channel Select3
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_channel_select3_x0 is
  port (
    in0 : in std_logic_vector( 18-1 downto 0 );
    in1 : in std_logic_vector( 18-1 downto 0 );
    ch_id : in std_logic_vector( 4-1 downto 0 );
    ch_sel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out0 : out std_logic_vector( 18-1 downto 0 );
    out1 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_channel_select3_x0;
architecture structural of appmodel_channel_select3_x0 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal ddci : std_logic_vector( 18-1 downto 0 );
  signal ddcq : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel : std_logic_vector( 4-1 downto 0 );
  signal register29_q_net : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant13_op_net : std_logic_vector( 4-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register3_q_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net : std_logic_vector( 18-1 downto 0 );
  signal register_q_net : std_logic_vector( 18-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register6_q_net : std_logic_vector( 1-1 downto 0 );
  signal last : std_logic_vector( 1-1 downto 0 );
begin
  out0 <= down_sample1_q_net;
  out1 <= down_sample_q_net;
  ddci <= in0;
  ddcq <= in1;
  ddcchannel <= ch_id;
  register29_q_net <= ch_sel;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant13 : entity work.sysgen_constant_6cd5a293ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => ddcq,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => ddci,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay1_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register3_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register2_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register1_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register1_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register2_q_net
  );
  register3 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register3_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => last,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => ddcchannel,
    b => register29_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => ddcchannel,
    b => constant13_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => last
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/Subsystem3
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_subsystem3 is
  port (
    iq_stream_in_1 : in std_logic_vector( 18-1 downto 0 );
    iq_chan_sel : in std_logic_vector( 4-1 downto 0 );
    iq_stream_in_2 : in std_logic_vector( 18-1 downto 0 );
    iq_stream_in_3 : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    ddci : out std_logic_vector( 18-1 downto 0 );
    ddcq : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_subsystem3;
architecture structural of appmodel_subsystem3 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal ddci_x0 : std_logic_vector( 18-1 downto 0 );
  signal register29_q_net : std_logic_vector( 4-1 downto 0 );
  signal ddcq_x0 : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
begin
  ddci <= down_sample1_q_net;
  ddcq <= down_sample_q_net;
  ddci_x0 <= iq_stream_in_1;
  register29_q_net <= iq_chan_sel;
  ddcq_x0 <= iq_stream_in_2;
  ddcchannel <= iq_stream_in_3;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  channel_select3 : entity work.appmodel_channel_select3_x0 
  port map (
    in0 => ddci_x0,
    in1 => ddcq_x0,
    ch_id => ddcchannel,
    ch_sel => register29_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out0 => down_sample1_q_net,
    out1 => down_sample_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p1_Masking_window
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_c1p1_masking_window is
  port (
    phi_reset_trig : in std_logic_vector( 1-1 downto 0 );
    start_pt : in std_logic_vector( 16-1 downto 0 );
    stop_pt : in std_logic_vector( 16-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    counter_x0 : out std_logic_vector( 16-1 downto 0 );
    eval_window : out std_logic_vector( 1-1 downto 0 );
    integral_trig : out std_logic_vector( 1-1 downto 0 );
    flo_window : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_c1p1_masking_window;
architecture structural of appmodel_c1p1_masking_window is 
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal register35_q_net : std_logic_vector( 1-1 downto 0 );
  signal register31_q_net : std_logic_vector( 16-1 downto 0 );
  signal register32_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net : std_logic_vector( 1-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 16-1 downto 0 );
  signal constant11_op_net : std_logic_vector( 16-1 downto 0 );
  signal constant1_op_net : std_logic_vector( 16-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 16-1 downto 0 );
  signal constant3_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal logical1_y_net : std_logic_vector( 1-1 downto 0 );
  signal logical2_y_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 1-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 1-1 downto 0 );
  signal relational6_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational5_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert8_dout_net : std_logic_vector( 1-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay2_q_net : std_logic_vector( 16-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 16-1 downto 0 );
  signal down_sample2_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay4_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay6_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay7_q_net : std_logic_vector( 16-1 downto 0 );
  signal register10_q_net : std_logic_vector( 1-1 downto 0 );
  signal register5_q_net : std_logic_vector( 16-1 downto 0 );
  signal register6_q_net : std_logic_vector( 16-1 downto 0 );
  signal relational2_op_net : std_logic_vector( 1-1 downto 0 );
begin
  counter_x0 <= counter_op_net;
  eval_window <= convert11_dout_net;
  integral_trig <= convert5_dout_net;
  flo_window <= convert2_dout_net;
  register35_q_net <= phi_reset_trig;
  register31_q_net <= start_pt;
  register32_q_net <= stop_pt;
  gateway_out1 <= delay5_q_net;
  gateway_out2 <= delay3_q_net;
  gateway_out27 <= relational4_op_net;
  gateway_out28 <= relational3_op_net;
  gateway_out29 <= convert11_dout_net;
  gateway_out3 <= convert7_dout_net;
  gateway_out5 <= convert5_dout_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 16,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 16,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 17,
    core_name0 => "appmodel_c_addsub_v12_0_i1",
    extra_registers => 0,
    full_s_arith => 1,
    full_s_width => 17,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlUnsigned,
    s_bin_pt => 0,
    s_width => 16
  )
  port map (
    clr => '0',
    en => "1",
    a => delay3_q_net,
    b => constant11_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  constant1 : entity work.sysgen_constant_ebc8def3a6 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant1_op_net
  );
  constant11 : entity work.sysgen_constant_a49bba6212 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant11_op_net
  );
  constant2 : entity work.sysgen_constant_c75c7568ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant2_op_net
  );
  constant3 : entity work.sysgen_constant_b9d15577be 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant3_op_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  convert11 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => logical1_y_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert11_dout_net
  );
  convert2 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => logical2_y_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert2_dout_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => down_sample_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  convert4 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational6_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert4_dout_net
  );
  convert5 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational5_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert5_dout_net
  );
  convert7 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert7_dout_net
  );
  convert8 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => relational4_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert8_dout_net
  );
  counter : entity work.appmodel_xlcounter_free 
  generic map (
    core_name0 => "appmodel_c_counter_binary_v12_0_i0",
    op_arith => xlUnsigned,
    op_width => 16
  )
  port map (
    en => "1",
    clr => '0',
    rst => convert3_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => counter_op_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => down_sample1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => down_sample2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
  delay4 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay4_q_net
  );
  delay5 : entity work.appmodel_xldelay 
  generic map (
    latency => 3,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay5_q_net
  );
  delay6 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay6_q_net
  );
  delay7 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 16
  )
  port map (
    en => '1',
    rst => '1',
    d => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay7_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register10_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register5_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  down_sample2 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 16,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 16
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register6_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample2_q_net
  );
  logical1 : entity work.sysgen_logical_378794f819 
  port map (
    clr => '0',
    d0 => convert8_dout_net,
    d1 => convert7_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    y => logical1_y_net
  );
  logical2 : entity work.sysgen_logical_378794f819 
  port map (
    clr => '0',
    d0 => convert4_dout_net,
    d1 => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    y => logical2_y_net
  );
  register10 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => register35_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register10_q_net
  );
  register5 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register31_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register5_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 16,
    init_value => b"0000000001100100"
  )
  port map (
    en => "1",
    rst => "0",
    d => register32_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational1 : entity work.sysgen_relational_e98fcceecc 
  port map (
    clr => '0',
    a => delay7_q_net,
    b => constant2_op_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational1_op_net
  );
  relational2 : entity work.sysgen_relational_0ba61784a5 
  port map (
    clr => '0',
    a => counter_op_net,
    b => constant1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational2_op_net
  );
  relational3 : entity work.sysgen_relational_e98fcceecc 
  port map (
    clr => '0',
    a => delay4_q_net,
    b => delay3_q_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational3_op_net
  );
  relational4 : entity work.sysgen_relational_13cde72925 
  port map (
    clr => '0',
    a => delay1_q_net,
    b => delay2_q_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational4_op_net
  );
  relational5 : entity work.sysgen_relational_e98fcceecc 
  port map (
    clr => '0',
    a => counter_op_net,
    b => addsub1_s_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational5_op_net
  );
  relational6 : entity work.sysgen_relational_13cde72925 
  port map (
    clr => '0',
    a => delay6_q_net,
    b => constant3_op_net,
    en => relational2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational6_op_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p1_window_wf
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_c1p1_window_wf is
  port (
    cav_img : in std_logic_vector( 18-1 downto 0 );
    cav_real : in std_logic_vector( 18-1 downto 0 );
    ref_img : in std_logic_vector( 18-1 downto 0 );
    ref_real : in std_logic_vector( 18-1 downto 0 );
    window_profile : in std_logic_vector( 33-1 downto 0 );
    pt_window : in std_logic_vector( 1-1 downto 0 );
    delay_match_amt : in std_logic_vector( 16-1 downto 0 );
    pt_cntr : in std_logic_vector( 16-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    cav_windowed_imag : out std_logic_vector( 18-1 downto 0 );
    cav_windowed_real : out std_logic_vector( 18-1 downto 0 );
    ref_windowed_imag : out std_logic_vector( 18-1 downto 0 );
    ref_windowed_real : out std_logic_vector( 18-1 downto 0 );
    delayed_dc_img : out std_logic_vector( 18-1 downto 0 );
    delayed_dc_real : out std_logic_vector( 18-1 downto 0 );
    gateway_out35 : out std_logic_vector( 18-1 downto 0 );
    gateway_out38 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_c1p1_window_wf;
architecture structural of appmodel_c1p1_window_wf is 
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult5_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult4_p_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal constant1_op_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 16-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 16-1 downto 0 );
  signal constant1_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant13_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant15_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant17_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant20_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant22_op_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_douta_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_douta_net : std_logic_vector( 18-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 18-1 downto 0 );
begin
  cav_windowed_imag <= mult2_p_net;
  cav_windowed_real <= mult_p_net;
  ref_windowed_imag <= mult5_p_net;
  ref_windowed_real <= mult4_p_net;
  delayed_dc_img <= dual_port_ram_doutb_net;
  delayed_dc_real <= dual_port_ram1_doutb_net;
  convert5_dout_net <= cav_img;
  convert1_dout_net <= cav_real;
  down_sample_q_net <= ref_img;
  down_sample1_q_net <= ref_real;
  addsub3_s_net <= window_profile;
  convert11_dout_net <= pt_window;
  constant1_op_net_x0 <= delay_match_amt;
  counter_op_net <= pt_cntr;
  gateway_out35 <= mult4_p_net;
  gateway_out38 <= mult5_p_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 16,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 16,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 17,
    core_name0 => "appmodel_c_addsub_v12_0_i1",
    extra_registers => 0,
    full_s_arith => 1,
    full_s_width => 17,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlUnsigned,
    s_bin_pt => 0,
    s_width => 16
  )
  port map (
    clr => '0',
    en => "1",
    a => constant1_op_net_x0,
    b => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 16,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 16,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 17,
    core_name0 => "appmodel_c_addsub_v12_0_i1",
    extra_registers => 0,
    full_s_arith => 1,
    full_s_width => 17,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlUnsigned,
    s_bin_pt => 0,
    s_width => 16
  )
  port map (
    clr => '0',
    en => "1",
    a => constant1_op_net_x0,
    b => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  constant1 : entity work.sysgen_constant_a6b4957d83 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant1_op_net
  );
  constant13 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  constant15 : entity work.sysgen_constant_0900ba74ec 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant15_op_net
  );
  constant17 : entity work.sysgen_constant_a6b4957d83 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant17_op_net
  );
  constant20 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant20_op_net
  );
  constant22 : entity work.sysgen_constant_0900ba74ec 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant22_op_net
  );
  dual_port_ram : entity work.appmodel_xldpram 
  generic map (
    c_address_width_a => 16,
    c_address_width_b => 16,
    c_width_a => 18,
    c_width_b => 18,
    core_name0 => "appmodel_blk_mem_gen_i0",
    latency => 1
  )
  port map (
    ena => "1",
    enb => "1",
    rsta => "0",
    rstb => "0",
    addra => addsub1_s_net,
    dina => convert5_dout_net,
    wea => constant1_op_net,
    addrb => counter_op_net,
    dinb => constant15_op_net,
    web => constant13_op_net,
    a_clk => d_clk_net,
    a_ce => q_ce_net,
    b_clk => d_clk_net,
    b_ce => q_ce_net,
    douta => dual_port_ram_douta_net,
    doutb => dual_port_ram_doutb_net
  );
  dual_port_ram1 : entity work.appmodel_xldpram 
  generic map (
    c_address_width_a => 16,
    c_address_width_b => 16,
    c_width_a => 18,
    c_width_b => 18,
    core_name0 => "appmodel_blk_mem_gen_i0",
    latency => 1
  )
  port map (
    ena => "1",
    enb => "1",
    rsta => "0",
    rstb => "0",
    addra => addsub2_s_net,
    dina => convert1_dout_net,
    wea => constant17_op_net,
    addrb => counter_op_net,
    dinb => constant22_op_net,
    web => constant20_op_net,
    a_clk => d_clk_net,
    a_ce => q_ce_net,
    b_clk => d_clk_net,
    b_ce => q_ce_net,
    douta => dual_port_ram1_douta_net,
    doutb => dual_port_ram1_doutb_net
  );
  mult : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => mult1_p_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult_p_net
  );
  mult1 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 0,
    c_b_width => 33,
    c_baat => 18,
    c_output_width => 51,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i3",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 17,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => dual_port_ram1_doutb_net,
    b => addsub3_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult1_p_net
  );
  mult2 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => mult3_p_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult2_p_net
  );
  mult3 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 0,
    c_b_width => 33,
    c_baat => 18,
    c_output_width => 51,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i3",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 17,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => dual_port_ram_doutb_net,
    b => addsub3_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult3_p_net
  );
  mult4 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => down_sample1_q_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult4_p_net
  );
  mult5 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => down_sample_q_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult5_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_window_wf
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_c1p2_window_wf_x0 is
  port (
    cav_img : in std_logic_vector( 18-1 downto 0 );
    cav_real : in std_logic_vector( 18-1 downto 0 );
    ref_img : in std_logic_vector( 18-1 downto 0 );
    ref_real : in std_logic_vector( 18-1 downto 0 );
    window_profile : in std_logic_vector( 33-1 downto 0 );
    pt_window : in std_logic_vector( 1-1 downto 0 );
    delay_match_amt : in std_logic_vector( 16-1 downto 0 );
    pt_cntr : in std_logic_vector( 16-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    cav_windowed_imag : out std_logic_vector( 18-1 downto 0 );
    cav_windowed_real : out std_logic_vector( 18-1 downto 0 );
    ref_windowed_imag : out std_logic_vector( 18-1 downto 0 );
    ref_windowed_real : out std_logic_vector( 18-1 downto 0 );
    delayed_cav_dc_img : out std_logic_vector( 18-1 downto 0 );
    delayed_cav_dc_real : out std_logic_vector( 18-1 downto 0 );
    gateway_out35 : out std_logic_vector( 18-1 downto 0 );
    gateway_out38 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_c1p2_window_wf_x0;
architecture structural of appmodel_c1p2_window_wf_x0 is 
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult5_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult4_p_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal convert6_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 16-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 16-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 16-1 downto 0 );
  signal constant1_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant13_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant15_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant17_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant20_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant22_op_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_douta_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_douta_net : std_logic_vector( 18-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 18-1 downto 0 );
begin
  cav_windowed_imag <= mult2_p_net;
  cav_windowed_real <= mult_p_net;
  ref_windowed_imag <= mult5_p_net;
  ref_windowed_real <= mult4_p_net;
  delayed_cav_dc_img <= dual_port_ram_doutb_net;
  delayed_cav_dc_real <= dual_port_ram1_doutb_net;
  convert6_dout_net <= cav_img;
  convert2_dout_net <= cav_real;
  down_sample_q_net <= ref_img;
  down_sample1_q_net <= ref_real;
  addsub3_s_net <= window_profile;
  convert11_dout_net <= pt_window;
  constant2_op_net <= delay_match_amt;
  counter_op_net <= pt_cntr;
  gateway_out35 <= mult4_p_net;
  gateway_out38 <= mult5_p_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 16,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 16,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 17,
    core_name0 => "appmodel_c_addsub_v12_0_i1",
    extra_registers => 0,
    full_s_arith => 1,
    full_s_width => 17,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlUnsigned,
    s_bin_pt => 0,
    s_width => 16
  )
  port map (
    clr => '0',
    en => "1",
    a => constant2_op_net,
    b => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 16,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 16,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 17,
    core_name0 => "appmodel_c_addsub_v12_0_i1",
    extra_registers => 0,
    full_s_arith => 1,
    full_s_width => 17,
    latency => 1,
    overflow => 1,
    quantization => 1,
    s_arith => xlUnsigned,
    s_bin_pt => 0,
    s_width => 16
  )
  port map (
    clr => '0',
    en => "1",
    a => constant2_op_net,
    b => counter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  constant1 : entity work.sysgen_constant_a6b4957d83 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant1_op_net
  );
  constant13 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  constant15 : entity work.sysgen_constant_0900ba74ec 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant15_op_net
  );
  constant17 : entity work.sysgen_constant_a6b4957d83 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant17_op_net
  );
  constant20 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant20_op_net
  );
  constant22 : entity work.sysgen_constant_0900ba74ec 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant22_op_net
  );
  dual_port_ram : entity work.appmodel_xldpram 
  generic map (
    c_address_width_a => 16,
    c_address_width_b => 16,
    c_width_a => 18,
    c_width_b => 18,
    core_name0 => "appmodel_blk_mem_gen_i0",
    latency => 1
  )
  port map (
    ena => "1",
    enb => "1",
    rsta => "0",
    rstb => "0",
    addra => addsub1_s_net,
    dina => convert6_dout_net,
    wea => constant1_op_net,
    addrb => counter_op_net,
    dinb => constant15_op_net,
    web => constant13_op_net,
    a_clk => d_clk_net,
    a_ce => q_ce_net,
    b_clk => d_clk_net,
    b_ce => q_ce_net,
    douta => dual_port_ram_douta_net,
    doutb => dual_port_ram_doutb_net
  );
  dual_port_ram1 : entity work.appmodel_xldpram 
  generic map (
    c_address_width_a => 16,
    c_address_width_b => 16,
    c_width_a => 18,
    c_width_b => 18,
    core_name0 => "appmodel_blk_mem_gen_i0",
    latency => 1
  )
  port map (
    ena => "1",
    enb => "1",
    rsta => "0",
    rstb => "0",
    addra => addsub2_s_net,
    dina => convert2_dout_net,
    wea => constant17_op_net,
    addrb => counter_op_net,
    dinb => constant22_op_net,
    web => constant20_op_net,
    a_clk => d_clk_net,
    a_ce => q_ce_net,
    b_clk => d_clk_net,
    b_ce => q_ce_net,
    douta => dual_port_ram1_douta_net,
    doutb => dual_port_ram1_doutb_net
  );
  mult : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => mult1_p_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult_p_net
  );
  mult1 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 0,
    c_b_width => 33,
    c_baat => 18,
    c_output_width => 51,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i3",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 17,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => dual_port_ram1_doutb_net,
    b => addsub3_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult1_p_net
  );
  mult2 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => mult3_p_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult2_p_net
  );
  mult3 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 16,
    a_width => 18,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 0,
    c_b_width => 33,
    c_baat => 18,
    c_output_width => 51,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i3",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 17,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => dual_port_ram_doutb_net,
    b => addsub3_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult3_p_net
  );
  mult4 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => down_sample1_q_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult4_p_net
  );
  mult5 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 17,
    a_width => 18,
    b_arith => xlUnsigned,
    b_bin_pt => 0,
    b_width => 1,
    c_a_type => 0,
    c_a_width => 18,
    c_b_type => 1,
    c_b_width => 1,
    c_baat => 18,
    c_output_width => 19,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i2",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 16,
    p_width => 18,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => down_sample_q_net,
    b => convert11_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult5_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func/four_point_avg
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_four_point_avg_x1 is
  port (
    in1 : in std_logic_vector( 33-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out1 : out std_logic_vector( 33-1 downto 0 )
  );
end appmodel_four_point_avg_x1;
architecture structural of appmodel_four_point_avg_x1 is 
  signal cordic_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 33-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult4_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult2_p_net : std_logic_vector( 33-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult1_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay2_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 33-1 downto 0 );
begin
  out1 <= addsub3_s_net;
  cordic_6_0_m_axis_dout_tdata_real_net <= in1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult4_p_net,
    b => cmult2_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult1_p_net,
    b => cmult3_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub2_s_net,
    b => addsub1_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  cmult1 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult1_p_net
  );
  cmult2 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult2_p_net
  );
  cmult3 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay3_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult3_p_net
  );
  cmult4 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => cordic_6_0_m_axis_dout_tdata_real_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult4_p_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_m_axis_dout_tdata_real_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func/freq_err/delta_phi/phase_latching
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_phase_latching is
  port (
    phase : in std_logic_vector( 33-1 downto 0 );
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    stop_value : out std_logic_vector( 33-1 downto 0 );
    start_value : out std_logic_vector( 33-1 downto 0 );
    gateway_out1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_phase_latching;
architecture structural of appmodel_phase_latching is 
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 2-1 downto 0 );
  signal delay4_q_net : std_logic_vector( 1-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 2-1 downto 0 );
  signal delay6_q_net : std_logic_vector( 1-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant3_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
begin
  stop_value <= register1_q_net;
  start_value <= register_q_net;
  mult3_p_net <= phase;
  convert2_dout_net <= window;
  convert3_dout_net <= reset;
  gateway_out1 <= relational1_op_net;
  gateway_out2 <= delay5_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.sysgen_addsub_7a72e3543f 
  port map (
    clr => '0',
    a => convert2_dout_net,
    b => delay4_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.sysgen_addsub_7a72e3543f 
  port map (
    clr => '0',
    a => delay6_q_net,
    b => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  constant2 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant2_op_net
  );
  constant3 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant3_op_net
  );
  delay4 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay4_q_net
  );
  delay5 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => relational_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay5_q_net
  );
  delay6 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay6_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    d => mult3_p_net,
    rst => convert3_dout_net,
    en => delay5_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    d => mult3_p_net,
    rst => convert3_dout_net,
    en => relational1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register1_q_net
  );
  relational : entity work.sysgen_relational_f9cbd3d1dc 
  port map (
    clr => '0',
    a => addsub1_s_net,
    b => constant2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_f9cbd3d1dc 
  port map (
    clr => '0',
    a => addsub2_s_net,
    b => constant3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational1_op_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func/freq_err/delta_phi
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_delta_phi is
  port (
    phase : in std_logic_vector( 33-1 downto 0 );
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    d_phi : out std_logic_vector( 32-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_delta_phi;
architecture structural of appmodel_delta_phi is 
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal delay2_q_net : std_logic_vector( 1-1 downto 0 );
  signal constant4_op_net : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
begin
  d_phi <= mult1_p_net;
  mult3_p_net <= phase;
  convert2_dout_net <= window;
  convert3_dout_net <= reset;
  gateway_out27 <= addsub3_s_net;
  gateway_out28 <= register_q_net;
  gateway_out29 <= register1_q_net;
  gateway_out3 <= mult1_p_net;
  gateway_out1 <= relational1_op_net;
  gateway_out2 <= delay5_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  phase_latching : entity work.appmodel_phase_latching 
  port map (
    phase => mult3_p_net,
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    stop_value => register1_q_net,
    start_value => register_q_net,
    gateway_out1 => relational1_op_net,
    gateway_out2 => delay5_q_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 30,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i5",
    en_arith => xlUnsigned,
    en_bin_pt => 0,
    en_width => 1,
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 30,
    s_width => 32
  )
  port map (
    clr => '0',
    a => register1_q_net,
    b => register_q_net,
    en => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  constant4 : entity work.sysgen_constant_cff0308c52 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant4_op_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 2,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => inverter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  inverter : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter_op_net
  );
  mult1 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 32,
    b_arith => xlSigned,
    b_bin_pt => 15,
    b_width => 18,
    c_a_type => 0,
    c_a_width => 32,
    c_b_type => 0,
    c_b_width => 18,
    c_baat => 32,
    c_output_width => 50,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i6",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 30,
    p_width => 32,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => addsub3_s_net,
    b => constant4_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult1_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func/freq_err/delta_t
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_delta_t_x1 is
  port (
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    dt : out std_logic_vector( 32-1 downto 0 );
    gateway_out1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_delta_t_x1;
architecture structural of appmodel_delta_t_x1 is 
  signal mult_p_net : std_logic_vector( 32-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal register2_q_net : std_logic_vector( 10-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant5_op_net : std_logic_vector( 32-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal counter2_op_net : std_logic_vector( 10-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
begin
  dt <= mult_p_net;
  convert2_dout_net <= window;
  convert3_dout_net <= reset;
  gateway_out1 <= mult_p_net;
  gateway_out2 <= register2_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant5 : entity work.sysgen_constant_9f70783d27 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant5_op_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  counter2 : entity work.appmodel_xlcounter_free 
  generic map (
    core_name0 => "appmodel_c_counter_binary_v12_0_i1",
    op_arith => xlUnsigned,
    op_width => 10
  )
  port map (
    clr => '0',
    rst => convert3_dout_net,
    en => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => counter2_op_net
  );
  inverter : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter_op_net
  );
  mult : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 10,
    b_arith => xlUnsigned,
    b_bin_pt => 32,
    b_width => 32,
    c_a_type => 1,
    c_a_width => 10,
    c_b_type => 1,
    c_b_width => 32,
    c_baat => 10,
    c_output_width => 42,
    c_type => 1,
    core_name0 => "appmodel_mult_gen_v12_0_i7",
    extra_registers => 1,
    multsign => 1,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 32,
    p_width => 32,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => register2_q_net,
    b => constant5_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult_p_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 10,
    init_value => b"0000000000"
  )
  port map (
    d => counter2_op_net,
    rst => convert3_dout_net,
    en => inverter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register2_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func/freq_err/four_point_avg
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_four_point_avg_x0 is
  port (
    in1 : in std_logic_vector( 33-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out1 : out std_logic_vector( 33-1 downto 0 )
  );
end appmodel_four_point_avg_x0;
architecture structural of appmodel_four_point_avg_x0 is 
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_phase_net : std_logic_vector( 33-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult4_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult2_p_net : std_logic_vector( 33-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult1_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay2_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 33-1 downto 0 );
begin
  out1 <= addsub3_s_net;
  cordic_6_0_m_axis_dout_tdata_phase_net <= in1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult4_p_net,
    b => cmult2_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult1_p_net,
    b => cmult3_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub2_s_net,
    b => addsub1_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  cmult1 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult1_p_net
  );
  cmult2 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult2_p_net
  );
  cmult3 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay3_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult3_p_net
  );
  cmult4 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => cordic_6_0_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult4_p_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func/freq_err
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_freq_err is
  port (
    raw_phase : in std_logic_vector( 33-1 downto 0 );
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    nco_err : out std_logic_vector( 32-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out : out std_logic_vector( 33-1 downto 0 );
    gateway_out1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x0 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_freq_err;
architecture structural of appmodel_freq_err is 
  signal convert_dout_net : std_logic_vector( 32-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_phase_net : std_logic_vector( 33-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net : std_logic_vector( 10-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal addsub3_s_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal constant8_op_net : std_logic_vector( 26-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 96-1 downto 0 );
  signal divide1_op_net : std_logic_vector( 96-1 downto 0 );
begin
  nco_err <= convert_dout_net;
  cordic_6_0_m_axis_dout_tdata_phase_net <= raw_phase;
  convert2_dout_net <= window;
  convert3_dout_net_x0 <= reset;
  gateway_out11 <= convert_dout_net;
  gateway_out19 <= mult3_p_net;
  gateway_out20 <= delay3_q_net;
  gateway_out8 <= divide_op_net;
  gateway_out27 <= addsub3_s_net;
  gateway_out28 <= register_q_net;
  gateway_out29 <= register1_q_net;
  gateway_out3 <= mult1_p_net;
  gateway_out <= mult3_p_net;
  gateway_out1 <= relational1_op_net;
  gateway_out2 <= delay5_q_net;
  gateway_out1_x0 <= mult_p_net;
  gateway_out2_x0 <= register2_q_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  delta_phi : entity work.appmodel_delta_phi 
  port map (
    phase => mult3_p_net,
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    d_phi => mult1_p_net,
    gateway_out27 => addsub3_s_net,
    gateway_out28 => register_q_net,
    gateway_out29 => register1_q_net,
    gateway_out3 => mult1_p_net,
    gateway_out1 => relational1_op_net,
    gateway_out2 => delay5_q_net
  );
  delta_t : entity work.appmodel_delta_t_x1 
  port map (
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    dt => mult_p_net,
    gateway_out1 => mult_p_net,
    gateway_out2 => register2_q_net
  );
  four_point_avg : entity work.appmodel_four_point_avg_x0 
  port map (
    in1 => cordic_6_0_m_axis_dout_tdata_phase_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out1 => addsub3_s_net_x0
  );
  constant8 : entity work.sysgen_constant_dd4ad18523 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant8_op_net
  );
  convert : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 33,
    din_width => 96,
    dout_arith => 2,
    dout_bin_pt => 32,
    dout_width => 32,
    latency => 1,
    overflow => xlSaturate,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => down_sample_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert_dout_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert3_dout_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 3,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
  divide : entity work.xldivider_generator_00180ce438a55dd0e19236a4905a2616 
  port map (
    a_tvalid => '1',
    b_tvalid => '1',
    a => mult1_p_net,
    b => mult_p_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => divide_op_net
  );
  divide1 : entity work.xldivider_generator_9a49576625854c73c1bca80dac5c83be 
  port map (
    a_tvalid => '1',
    b_tvalid => '1',
    a => divide_op_net,
    b => constant8_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => divide1_op_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 33,
    d_width => 96,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 33,
    q_width => 96
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => divide1_op_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  mult3 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 1,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_a_type => 1,
    c_a_width => 1,
    c_b_type => 0,
    c_b_width => 33,
    c_baat => 1,
    c_output_width => 34,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i5",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 30,
    p_width => 33,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => convert2_dout_net,
    b => addsub3_s_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult3_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_c1p2_windowing_func is
  port (
    imag : in std_logic_vector( 33-1 downto 0 );
    real : in std_logic_vector( 33-1 downto 0 );
    eval_window : in std_logic_vector( 1-1 downto 0 );
    flo_window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    c1p2_pt_cntr : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_dc_tvalid : in std_logic_vector( 1-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    window_profile : out std_logic_vector( 33-1 downto 0 );
    nco_feedback : out std_logic_vector( 32-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_c1p2_windowing_func;
architecture structural of appmodel_c1p2_windowing_func is 
  signal addsub3_s_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal convert_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert3_dout_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 33-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert2_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net : std_logic_vector( 10-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal cordic_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_phase_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tvalid_net : std_logic;
begin
  window_profile <= addsub3_s_net_x0;
  nco_feedback <= convert_dout_net;
  convert3_dout_net_x0 <= imag;
  convert4_dout_net <= real;
  convert11_dout_net <= eval_window;
  convert2_dout_net <= flo_window;
  convert3_dout_net <= reset;
  counter_op_net <= c1p2_pt_cntr;
  convert2_dout_net_x0 <= cav1_p2_dc_tvalid;
  gateway_out11 <= convert_dout_net;
  gateway_out19 <= mult3_p_net;
  gateway_out20 <= delay3_q_net;
  gateway_out8 <= divide_op_net;
  gateway_out27 <= addsub3_s_net;
  gateway_out28 <= register_q_net;
  gateway_out29 <= register1_q_net;
  gateway_out3 <= mult1_p_net;
  gateway_out <= mult3_p_net;
  gateway_out1_x0 <= relational1_op_net;
  gateway_out2_x0 <= delay5_q_net;
  gateway_out1 <= mult_p_net;
  gateway_out2 <= register2_q_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  four_point_avg : entity work.appmodel_four_point_avg_x1 
  port map (
    in1 => cordic_6_0_m_axis_dout_tdata_real_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out1 => addsub3_s_net_x0
  );
  freq_err : entity work.appmodel_freq_err 
  port map (
    raw_phase => cordic_6_0_m_axis_dout_tdata_phase_net,
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    nco_err => convert_dout_net,
    gateway_out11 => convert_dout_net,
    gateway_out19 => mult3_p_net,
    gateway_out20 => delay3_q_net,
    gateway_out8 => divide_op_net,
    gateway_out27 => addsub3_s_net,
    gateway_out28 => register_q_net,
    gateway_out29 => register1_q_net,
    gateway_out3 => mult1_p_net,
    gateway_out => mult3_p_net,
    gateway_out1 => relational1_op_net,
    gateway_out2 => delay5_q_net,
    gateway_out1_x0 => mult_p_net,
    gateway_out2_x0 => register2_q_net
  );
  cordic_6_0 : entity work.xlcordic_3e63515a29f3d9d448dc5efec9f16876 
  port map (
    s_axis_cartesian_tvalid => convert2_dout_net_x0(0),
    s_axis_cartesian_tdata_imag => convert3_dout_net_x0,
    s_axis_cartesian_tdata_real => convert4_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => cordic_6_0_m_axis_dout_tdata_phase_net,
    m_axis_dout_tdata_real => cordic_6_0_m_axis_dout_tdata_real_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func1/four_point_avg
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_four_point_avg_x3 is
  port (
    in1 : in std_logic_vector( 33-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out1 : out std_logic_vector( 33-1 downto 0 )
  );
end appmodel_four_point_avg_x3;
architecture structural of appmodel_four_point_avg_x3 is 
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 33-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult4_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult2_p_net : std_logic_vector( 33-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult1_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay2_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 33-1 downto 0 );
begin
  out1 <= addsub3_s_net;
  cordic_6_0_m_axis_dout_tdata_real_net <= in1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult4_p_net,
    b => cmult2_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult1_p_net,
    b => cmult3_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub2_s_net,
    b => addsub1_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  cmult1 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult1_p_net
  );
  cmult2 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult2_p_net
  );
  cmult3 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay3_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult3_p_net
  );
  cmult4 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => cordic_6_0_m_axis_dout_tdata_real_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult4_p_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_m_axis_dout_tdata_real_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func1/freq_err/delta_phi/phase_latching
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_phase_latching_x0 is
  port (
    phase : in std_logic_vector( 33-1 downto 0 );
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    stop_value : out std_logic_vector( 33-1 downto 0 );
    start_value : out std_logic_vector( 33-1 downto 0 );
    gateway_out1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_phase_latching_x0;
architecture structural of appmodel_phase_latching_x0 is 
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 2-1 downto 0 );
  signal delay4_q_net : std_logic_vector( 1-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 2-1 downto 0 );
  signal delay6_q_net : std_logic_vector( 1-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant3_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
begin
  stop_value <= register1_q_net;
  start_value <= register_q_net;
  mult3_p_net <= phase;
  convert2_dout_net <= window;
  convert3_dout_net <= reset;
  gateway_out1 <= relational1_op_net;
  gateway_out2 <= delay5_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.sysgen_addsub_7a72e3543f 
  port map (
    clr => '0',
    a => convert2_dout_net,
    b => delay4_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.sysgen_addsub_7a72e3543f 
  port map (
    clr => '0',
    a => delay6_q_net,
    b => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  constant2 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant2_op_net
  );
  constant3 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant3_op_net
  );
  delay4 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay4_q_net
  );
  delay5 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => relational_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay5_q_net
  );
  delay6 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay6_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    d => mult3_p_net,
    rst => convert3_dout_net,
    en => delay5_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    d => mult3_p_net,
    rst => convert3_dout_net,
    en => relational1_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register1_q_net
  );
  relational : entity work.sysgen_relational_f9cbd3d1dc 
  port map (
    clr => '0',
    a => addsub1_s_net,
    b => constant2_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_f9cbd3d1dc 
  port map (
    clr => '0',
    a => addsub2_s_net,
    b => constant3_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => relational1_op_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func1/freq_err/delta_phi
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_delta_phi_x0 is
  port (
    phase : in std_logic_vector( 33-1 downto 0 );
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    d_phi : out std_logic_vector( 32-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 )
  );
end appmodel_delta_phi_x0;
architecture structural of appmodel_delta_phi_x0 is 
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal delay2_q_net : std_logic_vector( 1-1 downto 0 );
  signal constant4_op_net : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
begin
  d_phi <= mult1_p_net;
  mult3_p_net <= phase;
  convert2_dout_net <= window;
  convert3_dout_net <= reset;
  gateway_out27 <= addsub3_s_net;
  gateway_out28 <= register_q_net;
  gateway_out29 <= register1_q_net;
  gateway_out3 <= mult1_p_net;
  gateway_out1 <= relational1_op_net;
  gateway_out2 <= delay5_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  phase_latching : entity work.appmodel_phase_latching_x0 
  port map (
    phase => mult3_p_net,
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    stop_value => register1_q_net,
    start_value => register_q_net,
    gateway_out1 => relational1_op_net,
    gateway_out2 => delay5_q_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 30,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i5",
    en_arith => xlUnsigned,
    en_bin_pt => 0,
    en_width => 1,
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 30,
    s_width => 32
  )
  port map (
    clr => '0',
    a => register1_q_net,
    b => register_q_net,
    en => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  constant4 : entity work.sysgen_constant_cff0308c52 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant4_op_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 2,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => inverter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  inverter : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter_op_net
  );
  mult1 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 32,
    b_arith => xlSigned,
    b_bin_pt => 15,
    b_width => 18,
    c_a_type => 0,
    c_a_width => 32,
    c_b_type => 0,
    c_b_width => 18,
    c_baat => 32,
    c_output_width => 50,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i6",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 30,
    p_width => 32,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => addsub3_s_net,
    b => constant4_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult1_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func1/freq_err/delta_t
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_delta_t_x0 is
  port (
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    dt : out std_logic_vector( 32-1 downto 0 );
    gateway_out1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_delta_t_x0;
architecture structural of appmodel_delta_t_x0 is 
  signal mult_p_net : std_logic_vector( 32-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal register2_q_net : std_logic_vector( 10-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant5_op_net : std_logic_vector( 32-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal counter2_op_net : std_logic_vector( 10-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
begin
  dt <= mult_p_net;
  convert2_dout_net <= window;
  convert3_dout_net <= reset;
  gateway_out1 <= mult_p_net;
  gateway_out2 <= register2_q_net;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant5 : entity work.sysgen_constant_9f70783d27 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant5_op_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net
  );
  counter2 : entity work.appmodel_xlcounter_free 
  generic map (
    core_name0 => "appmodel_c_counter_binary_v12_0_i1",
    op_arith => xlUnsigned,
    op_width => 10
  )
  port map (
    clr => '0',
    rst => convert3_dout_net,
    en => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => counter2_op_net
  );
  inverter : entity work.sysgen_inverter_f3d7cc6332 
  port map (
    clr => '0',
    ip => convert1_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    op => inverter_op_net
  );
  mult : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 10,
    b_arith => xlUnsigned,
    b_bin_pt => 32,
    b_width => 32,
    c_a_type => 1,
    c_a_width => 10,
    c_b_type => 1,
    c_b_width => 32,
    c_baat => 10,
    c_output_width => 42,
    c_type => 1,
    core_name0 => "appmodel_mult_gen_v12_0_i7",
    extra_registers => 1,
    multsign => 1,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 32,
    p_width => 32,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => register2_q_net,
    b => constant5_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult_p_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 10,
    init_value => b"0000000000"
  )
  port map (
    d => counter2_op_net,
    rst => convert3_dout_net,
    en => inverter_op_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register2_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func1/freq_err/four_point_avg
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_four_point_avg_x2 is
  port (
    in1 : in std_logic_vector( 33-1 downto 0 );
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out1 : out std_logic_vector( 33-1 downto 0 )
  );
end appmodel_four_point_avg_x2;
architecture structural of appmodel_four_point_avg_x2 is 
  signal delay2_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 33-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_phase_net : std_logic_vector( 33-1 downto 0 );
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal addsub1_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult4_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult2_p_net : std_logic_vector( 33-1 downto 0 );
  signal addsub2_s_net : std_logic_vector( 33-1 downto 0 );
  signal cmult1_p_net : std_logic_vector( 33-1 downto 0 );
  signal cmult3_p_net : std_logic_vector( 33-1 downto 0 );
begin
  out1 <= addsub3_s_net;
  cordic_6_0_m_axis_dout_tdata_phase_net <= in1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  addsub1 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult4_p_net,
    b => cmult2_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub1_s_net
  );
  addsub2 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => cmult1_p_net,
    b => cmult3_p_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub2_s_net
  );
  addsub3 : entity work.appmodel_xladdsub 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 31,
    a_width => 33,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_has_c_out => 0,
    c_latency => 1,
    c_output_width => 34,
    core_name0 => "appmodel_c_addsub_v12_0_i4",
    extra_registers => 0,
    full_s_arith => 2,
    full_s_width => 34,
    latency => 1,
    overflow => 2,
    quantization => 1,
    s_arith => xlSigned,
    s_bin_pt => 31,
    s_width => 33
  )
  port map (
    clr => '0',
    en => "1",
    a => addsub2_s_net,
    b => addsub1_s_net,
    clk => d_clk_net,
    ce => q_ce_net,
    s => addsub3_s_net
  );
  cmult1 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult1_p_net
  );
  cmult2 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult2_p_net
  );
  cmult3 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => delay3_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult3_p_net
  );
  cmult4 : entity work.appmodel_xlcmult 
  generic map (
    a_arith => xlSigned,
    a_bin_pt => 30,
    a_width => 33,
    b_bin_pt => 16,
    c_a_type => 0,
    c_a_width => 33,
    c_b_type => 1,
    c_b_width => 18,
    c_output_width => 51,
    core_name0 => "appmodel_mult_gen_v12_0_i4",
    extra_registers => 1,
    multsign => 2,
    overflow => 2,
    p_arith => xlSigned,
    p_bin_pt => 31,
    p_width => 33,
    quantization => 1,
    zero_const => 0
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => cordic_6_0_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => cmult4_p_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => cordic_6_0_m_axis_dout_tdata_phase_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay1_q_net
  );
  delay2 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay1_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay2_q_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 33
  )
  port map (
    en => '1',
    rst => '1',
    d => delay2_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func1/freq_err
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_freq_err_x0 is
  port (
    raw_phase : in std_logic_vector( 33-1 downto 0 );
    window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    nco_err : out std_logic_vector( 32-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out : out std_logic_vector( 33-1 downto 0 );
    gateway_out1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x0 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_freq_err_x0;
architecture structural of appmodel_freq_err_x0 is 
  signal convert_dout_net : std_logic_vector( 32-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_phase_net : std_logic_vector( 33-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net : std_logic_vector( 10-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal addsub3_s_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal constant8_op_net : std_logic_vector( 26-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 96-1 downto 0 );
  signal divide1_op_net : std_logic_vector( 96-1 downto 0 );
begin
  nco_err <= convert_dout_net;
  cordic_6_0_m_axis_dout_tdata_phase_net <= raw_phase;
  convert2_dout_net <= window;
  convert3_dout_net_x0 <= reset;
  gateway_out11 <= convert_dout_net;
  gateway_out19 <= mult3_p_net;
  gateway_out20 <= delay3_q_net;
  gateway_out8 <= divide_op_net;
  gateway_out27 <= addsub3_s_net;
  gateway_out28 <= register_q_net;
  gateway_out29 <= register1_q_net;
  gateway_out3 <= mult1_p_net;
  gateway_out <= mult3_p_net;
  gateway_out1 <= relational1_op_net;
  gateway_out2 <= delay5_q_net;
  gateway_out1_x0 <= mult_p_net;
  gateway_out2_x0 <= register2_q_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  delta_phi : entity work.appmodel_delta_phi_x0 
  port map (
    phase => mult3_p_net,
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    d_phi => mult1_p_net,
    gateway_out27 => addsub3_s_net,
    gateway_out28 => register_q_net,
    gateway_out29 => register1_q_net,
    gateway_out3 => mult1_p_net,
    gateway_out1 => relational1_op_net,
    gateway_out2 => delay5_q_net
  );
  delta_t : entity work.appmodel_delta_t_x0 
  port map (
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    dt => mult_p_net,
    gateway_out1 => mult_p_net,
    gateway_out2 => register2_q_net
  );
  four_point_avg : entity work.appmodel_four_point_avg_x2 
  port map (
    in1 => cordic_6_0_m_axis_dout_tdata_phase_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out1 => addsub3_s_net_x0
  );
  constant8 : entity work.sysgen_constant_dd4ad18523 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant8_op_net
  );
  convert : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 33,
    din_width => 96,
    dout_arith => 2,
    dout_bin_pt => 32,
    dout_width => 32,
    latency => 1,
    overflow => xlSaturate,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => down_sample_q_net,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert_dout_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 1,
    din_arith => 1,
    din_bin_pt => 0,
    din_width => 1,
    dout_arith => 1,
    dout_bin_pt => 0,
    dout_width => 1,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => convert3_dout_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  delay3 : entity work.appmodel_xldelay 
  generic map (
    latency => 3,
    reg_retiming => 0,
    reset => 0,
    width => 1
  )
  port map (
    en => '1',
    rst => '1',
    d => convert2_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => delay3_q_net
  );
  divide : entity work.xldivider_generator_00180ce438a55dd0e19236a4905a2616 
  port map (
    a_tvalid => '1',
    b_tvalid => '1',
    a => mult1_p_net,
    b => mult_p_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => divide_op_net
  );
  divide1 : entity work.xldivider_generator_9a49576625854c73c1bca80dac5c83be 
  port map (
    a_tvalid => '1',
    b_tvalid => '1',
    a => divide_op_net,
    b => constant8_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => divide1_op_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 33,
    d_width => 96,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 33,
    q_width => 96
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => divide1_op_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  mult3 : entity work.appmodel_xlmult 
  generic map (
    a_arith => xlUnsigned,
    a_bin_pt => 0,
    a_width => 1,
    b_arith => xlSigned,
    b_bin_pt => 31,
    b_width => 33,
    c_a_type => 1,
    c_a_width => 1,
    c_b_type => 0,
    c_b_width => 33,
    c_baat => 1,
    c_output_width => 34,
    c_type => 0,
    core_name0 => "appmodel_mult_gen_v12_0_i5",
    extra_registers => 0,
    multsign => 2,
    overflow => 1,
    p_arith => xlSigned,
    p_bin_pt => 30,
    p_width => 33,
    quantization => 1
  )
  port map (
    clr => '0',
    core_clr => '1',
    en => "1",
    rst => "0",
    a => convert2_dout_net,
    b => addsub3_s_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    core_clk => d_clk_net,
    core_ce => q_ce_net,
    p => mult3_p_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2/c1p2_windowing_func1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_c1p2_windowing_func1 is
  port (
    imag : in std_logic_vector( 33-1 downto 0 );
    real : in std_logic_vector( 33-1 downto 0 );
    eval_window : in std_logic_vector( 1-1 downto 0 );
    flo_window : in std_logic_vector( 1-1 downto 0 );
    reset : in std_logic_vector( 1-1 downto 0 );
    c1p2_pt_cntr : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_dc_tvalid : in std_logic_vector( 1-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    window_profile : out std_logic_vector( 33-1 downto 0 );
    nco_feedback : out std_logic_vector( 32-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_c1p2_windowing_func1;
architecture structural of appmodel_c1p2_windowing_func1 is 
  signal addsub3_s_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal convert_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert7_dout_net : std_logic_vector( 33-1 downto 0 );
  signal convert8_dout_net : std_logic_vector( 33-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert2_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net : std_logic_vector( 10-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal cordic_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_phase_net : std_logic_vector( 33-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tvalid_net : std_logic;
begin
  window_profile <= addsub3_s_net_x0;
  nco_feedback <= convert_dout_net;
  convert7_dout_net <= imag;
  convert8_dout_net <= real;
  convert11_dout_net <= eval_window;
  convert2_dout_net <= flo_window;
  convert3_dout_net <= reset;
  counter_op_net <= c1p2_pt_cntr;
  convert2_dout_net_x0 <= cav1_p2_dc_tvalid;
  gateway_out11 <= convert_dout_net;
  gateway_out19 <= mult3_p_net;
  gateway_out20 <= delay3_q_net;
  gateway_out8 <= divide_op_net;
  gateway_out27 <= addsub3_s_net;
  gateway_out28 <= register_q_net;
  gateway_out29 <= register1_q_net;
  gateway_out3 <= mult1_p_net;
  gateway_out <= mult3_p_net;
  gateway_out1_x0 <= relational1_op_net;
  gateway_out2_x0 <= delay5_q_net;
  gateway_out1 <= mult_p_net;
  gateway_out2 <= register2_q_net;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  four_point_avg : entity work.appmodel_four_point_avg_x3 
  port map (
    in1 => cordic_6_0_m_axis_dout_tdata_real_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out1 => addsub3_s_net_x0
  );
  freq_err : entity work.appmodel_freq_err_x0 
  port map (
    raw_phase => cordic_6_0_m_axis_dout_tdata_phase_net,
    window => convert2_dout_net,
    reset => convert3_dout_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    nco_err => convert_dout_net,
    gateway_out11 => convert_dout_net,
    gateway_out19 => mult3_p_net,
    gateway_out20 => delay3_q_net,
    gateway_out8 => divide_op_net,
    gateway_out27 => addsub3_s_net,
    gateway_out28 => register_q_net,
    gateway_out29 => register1_q_net,
    gateway_out3 => mult1_p_net,
    gateway_out => mult3_p_net,
    gateway_out1 => relational1_op_net,
    gateway_out2 => delay5_q_net,
    gateway_out1_x0 => mult_p_net,
    gateway_out2_x0 => register2_q_net
  );
  cordic_6_0 : entity work.xlcordic_3e63515a29f3d9d448dc5efec9f16876 
  port map (
    s_axis_cartesian_tvalid => convert2_dout_net_x0(0),
    s_axis_cartesian_tdata_imag => convert7_dout_net,
    s_axis_cartesian_tdata_real => convert8_dout_net,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => cordic_6_0_m_axis_dout_tvalid_net,
    m_axis_dout_tdata_phase => cordic_6_0_m_axis_dout_tdata_phase_net,
    m_axis_dout_tdata_real => cordic_6_0_m_axis_dout_tdata_real_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Cav2
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_cav2 is
  port (
    pa_stream_1 : in std_logic_vector( 18-1 downto 0 );
    iq_stream_1 : in std_logic_vector( 18-1 downto 0 );
    pa_stream_2 : in std_logic_vector( 18-1 downto 0 );
    pa_stream_3 : in std_logic_vector( 4-1 downto 0 );
    iq_stream_2 : in std_logic_vector( 18-1 downto 0 );
    iq_stream_3 : in std_logic_vector( 4-1 downto 0 );
    cav2_p1_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav2_nco_phase_reset : in std_logic_vector( 1-1 downto 0 );
    cav2_p2_chan_sel : in std_logic_vector( 4-1 downto 0 );
    rf_ref_amp : in std_logic_vector( 18-1 downto 0 );
    rf_ref_phase : in std_logic_vector( 18-1 downto 0 );
    rf_ref_q : in std_logic_vector( 18-1 downto 0 );
    cav2_nco_phase_adj : in std_logic_vector( 32-1 downto 0 );
    rf_ref_i : in std_logic_vector( 18-1 downto 0 );
    cav2_p1_window_start : in std_logic_vector( 16-1 downto 0 );
    cav2_p1_window_stop : in std_logic_vector( 16-1 downto 0 );
    cav2_p1_cal_coef : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_cal_coef : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_window_start : in std_logic_vector( 16-1 downto 0 );
    cav2_p2_window_stop : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_if_i : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_q : in std_logic_vector( 18-1 downto 0 );
    flo_c1p2_window : in std_logic_vector( 1-1 downto 0 );
    c1p2_pt_cntr : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_dc_tvalid : in std_logic_vector( 1-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    c2p2_pt_window : out std_logic_vector( 1-1 downto 0 );
    flo_c2p1_window : out std_logic_vector( 1-1 downto 0 );
    cav2_p1_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_dc_freq : out std_logic_vector( 32-1 downto 0 );
    c2p1_freq_err : out std_logic_vector( 32-1 downto 0 );
    c2p1_window_func : out std_logic_vector( 33-1 downto 0 );
    c2p2_pt_cntr : out std_logic_vector( 16-1 downto 0 );
    c2p2_integral_logic : out std_logic_vector( 1-1 downto 0 );
    c2p2_delay_match : out std_logic_vector( 16-1 downto 0 );
    cav2_p2_delayed_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_delayed_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_delayed_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav2_p2_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_delayed_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_ref_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_integrated_ref_i : out std_logic_vector( 20-1 downto 0 );
    cav2_p2_integrated_ref_q : out std_logic_vector( 20-1 downto 0 );
    cav2_p2_integrated_i : out std_logic_vector( 20-1 downto 0 );
    dsp_cav2_reset : out std_logic_vector( 1-1 downto 0 );
    cav2_p2_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav2_p1_windowed_ref_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_windowed_ref_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_windowed_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_windowed_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_integrated_ref_i : out std_logic_vector( 20-1 downto 0 );
    cav2_p1_integrated_ref_q : out std_logic_vector( 20-1 downto 0 );
    cav2_p1_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav2_p1_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav2_p1_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_ref_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    c2p1_pt_window : out std_logic_vector( 1-1 downto 0 );
    c2p1_pt_cntr : out std_logic_vector( 16-1 downto 0 );
    c2p1_integral_logic : out std_logic_vector( 1-1 downto 0 );
    c2p1_delay_match : out std_logic_vector( 16-1 downto 0 );
    cav2_p1_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_amp_out : out std_logic_vector( 18-1 downto 0 );
    flo_c2p2_window : out std_logic_vector( 1-1 downto 0 );
    cav2_p1_if_amp : out std_logic_vector( 18-1 downto 0 );
    c2p2_window_func : out std_logic_vector( 33-1 downto 0 );
    cav2_nco_fb : out std_logic_vector( 32-1 downto 0 );
    cav2_p2_windowed_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_windowed_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_windowed_ref_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_windowed_ref_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_q : out std_logic_vector( 18-1 downto 0 );
    gateway_out10_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out16_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out3_x5 : out std_logic_vector( 26-1 downto 0 );
    gateway_out4_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out5_x3 : out std_logic_vector( 26-1 downto 0 );
    gateway_out6_x3 : out std_logic_vector( 18-1 downto 0 );
    gateway_out7_x3 : out std_logic_vector( 34-1 downto 0 );
    gateway_out8_x5 : out std_logic_vector( 1-1 downto 0 );
    gateway_out_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x6 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3_x3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x3 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x4 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out1_x5 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x5 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out24_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x3 : out std_logic_vector( 20-1 downto 0 );
    gateway_out24 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out1_x4 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x4 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5 : out std_logic_vector( 1-1 downto 0 );
    gateway_out34_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 10-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x0 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x1 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29_x1 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x1 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_cav2;
architecture structural of appmodel_cav2 is 
  signal amp : std_logic_vector( 18-1 downto 0 );
  signal ddci : std_logic_vector( 18-1 downto 0 );
  signal phase_x0 : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal ddcq : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel : std_logic_vector( 4-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x3 : std_logic_vector( 1-1 downto 0 );
  signal convert1_dout_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal addsub3_s_net_x2 : std_logic_vector( 33-1 downto 0 );
  signal counter_op_net_x1 : std_logic_vector( 16-1 downto 0 );
  signal convert5_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 16-1 downto 0 );
  signal dual_port_ram_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_doutb_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal convert6_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal mult4_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal addsub_s_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x5 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x5 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x4 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x4 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert9_dout_net : std_logic_vector( 20-1 downto 0 );
  signal convert3_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert10_dout_net : std_logic_vector( 20-1 downto 0 );
  signal nco_sin : std_logic_vector( 26-1 downto 0 );
  signal mult5_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal mult2_p_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal mult_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net_x5 : std_logic_vector( 20-1 downto 0 );
  signal convert4_dout_net_x1 : std_logic_vector( 20-1 downto 0 );
  signal convert9_dout_net_x1 : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net_x0 : std_logic_vector( 20-1 downto 0 );
  signal addsub_s_net : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert11_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal counter_op_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal convert5_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant1_op_net : std_logic_vector( 16-1 downto 0 );
  signal register13_q_net : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net_x4 : std_logic_vector( 1-1 downto 0 );
  signal down_sample1_q_net_x6 : std_logic_vector( 18-1 downto 0 );
  signal addsub3_s_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal mult2_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal mult_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult4_p_net : std_logic_vector( 18-1 downto 0 );
  signal mult5_p_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x6 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal register29_q_net : std_logic_vector( 4-1 downto 0 );
  signal register35_q_net : std_logic_vector( 1-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal down_sample1_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal register36_q_net : std_logic_vector( 32-1 downto 0 );
  signal down_sample1_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal register31_q_net : std_logic_vector( 16-1 downto 0 );
  signal register32_q_net : std_logic_vector( 16-1 downto 0 );
  signal register1_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register33_q_net : std_logic_vector( 16-1 downto 0 );
  signal register34_q_net : std_logic_vector( 16-1 downto 0 );
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 18-1 downto 0 );
  signal phase : std_logic_vector( 18-1 downto 0 );
  signal nco_cos : std_logic_vector( 26-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 18-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tdata_real_net : std_logic_vector( 34-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tvalid_net : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 32-1 downto 0 );
  signal register12_q_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter1_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal register11_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net_x3 : std_logic_vector( 32-1 downto 0 );
  signal register12_q_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x3 : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal accumulator_q_net : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal inverter1_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net : std_logic_vector( 32-1 downto 0 );
  signal register11_q_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal delay5_q_net_x2 : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net_x2 : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net_x2 : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x2 : std_logic_vector( 10-1 downto 0 );
  signal mult3_p_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net_x0 : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal register_q_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net_x1 : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x1 : std_logic_vector( 10-1 downto 0 );
  signal down_sample1_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal convert2_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal register1_q_net_x4 : std_logic_vector( 33-1 downto 0 );
  signal dds_compiler_6_0_m_axis_data_tvalid_net : std_logic;
  signal down_sample6_q_net : std_logic_vector( 32-1 downto 0 );
  signal down_sample5_q_net : std_logic_vector( 1-1 downto 0 );
  signal down_sample7_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample3_q_net : std_logic_vector( 18-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 33-1 downto 0 );
  signal convert4_dout_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal convert7_dout_net : std_logic_vector( 33-1 downto 0 );
  signal convert8_dout_net : std_logic_vector( 33-1 downto 0 );
  signal register2_q_net_x4 : std_logic_vector( 33-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 1-1 downto 0 );
  signal clock_enable_probe_q_net : std_logic_vector( 1-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 1-1 downto 0 );
  signal clock_enable_probe1_q_net : std_logic_vector( 1-1 downto 0 );
  signal register32_q_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal register33_q_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal register8_q_net : std_logic_vector( 1-1 downto 0 );
  signal register9_q_net : std_logic_vector( 32-1 downto 0 );
  signal complex_multiplier_6_0_m_axis_dout_tdata_imag_net : std_logic_vector( 33-1 downto 0 );
  signal complex_multiplier_6_0_m_axis_dout_tvalid_net : std_logic_vector( 1-1 downto 0 );
  signal complex_multiplier_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 33-1 downto 0 );
  signal complex_multiplier_6_0_1_m_axis_dout_tdata_imag_net : std_logic_vector( 33-1 downto 0 );
  signal complex_multiplier_6_0_1_m_axis_dout_tvalid_net : std_logic_vector( 1-1 downto 0 );
  signal complex_multiplier_6_0_1_m_axis_dout_tdata_real_net : std_logic_vector( 33-1 downto 0 );
  signal register7_q_net : std_logic_vector( 18-1 downto 0 );
  signal register10_q_net : std_logic_vector( 18-1 downto 0 );
begin
  amp <= pa_stream_1;
  ddci <= iq_stream_1;
  phase_x0 <= pa_stream_2;
  channel <= pa_stream_3;
  ddcq <= iq_stream_2;
  ddcchannel <= iq_stream_3;
  c2p2_pt_window <= convert11_dout_net;
  flo_c2p1_window <= convert2_dout_net_x3;
  cav2_p1_dc_real <= convert1_dout_net_x0;
  cav2_p1_dc_img <= convert5_dout_net;
  cav2_p1_dc_freq <= convert_dout_net_x1;
  c2p1_freq_err <= convert_dout_net_x1;
  c2p1_window_func <= addsub3_s_net_x2;
  c2p2_pt_cntr <= counter_op_net_x1;
  c2p2_integral_logic <= convert5_dout_net_x1;
  c2p2_delay_match <= constant2_op_net;
  cav2_p2_delayed_dc_img <= dual_port_ram_doutb_net;
  cav2_p2_delayed_dc_real <= dual_port_ram1_doutb_net;
  cav2_p1_delayed_dc_img <= dual_port_ram_doutb_net_x0;
  cav2_p2_dc_real <= convert2_dout_net_x2;
  cav2_p2_dc_img <= convert6_dout_net;
  cav2_p2_dc_freq <= convert_dout_net_x0;
  cav2_p2_phase_out <= register13_q_net_x0;
  cav2_p2_amp_out <= register14_q_net_x0;
  cav2_p2_comparison_i <= addsub_s_net_x0;
  cav2_p2_comparison_q <= addsub_s_net_x0;
  cav2_p2_comparison_phase <= addsub_s_net_x0;
  cav2_p1_delayed_dc_real <= dual_port_ram1_doutb_net_x0;
  cav2_p2_if_amp <= down_sample1_q_net_x5;
  cav2_p2_if_phase <= down_sample_q_net_x5;
  cav2_p2_if_i <= down_sample1_q_net_x4;
  cav2_p2_if_q <= down_sample_q_net_x4;
  cav1_p2_ref_phase_out <= register11_q_net_x2;
  cav2_p2_integrated_ref_i <= convert2_dout_net;
  cav2_p2_integrated_ref_q <= convert4_dout_net;
  cav2_p2_integrated_i <= convert9_dout_net;
  dsp_cav2_reset <= convert3_dout_net_x0;
  cav2_p2_integrated_q <= convert10_dout_net;
  cav2_p1_windowed_ref_i <= mult4_p_net_x0;
  cav2_p1_windowed_ref_q <= mult5_p_net_x0;
  cav2_p1_windowed_img <= mult2_p_net_x1;
  cav2_p1_windowed_real <= mult_p_net_x0;
  cav2_p1_integrated_ref_i <= convert2_dout_net_x5;
  cav2_p1_integrated_ref_q <= convert4_dout_net_x1;
  cav2_p1_integrated_i <= convert9_dout_net_x1;
  cav2_p1_integrated_q <= convert10_dout_net_x0;
  cav2_p1_comparison_i <= addsub_s_net;
  cav2_p1_ref_phase_out <= register11_q_net_x0;
  cav2_p1_comparison_q <= addsub_s_net;
  cav2_p1_comparison_phase <= addsub_s_net;
  c2p1_pt_window <= convert11_dout_net_x0;
  c2p1_pt_cntr <= counter_op_net_x0;
  c2p1_integral_logic <= convert5_dout_net_x0;
  c2p1_delay_match <= constant1_op_net;
  cav2_p1_phase_out <= register13_q_net;
  cav2_p1_amp_out <= register14_q_net;
  flo_c2p2_window <= convert2_dout_net_x4;
  cav2_p1_if_amp <= down_sample1_q_net_x6;
  c2p2_window_func <= addsub3_s_net_x0;
  cav2_nco_fb <= convert_dout_net_x0;
  cav2_p2_windowed_img <= mult2_p_net_x0;
  cav2_p2_windowed_real <= mult_p_net;
  cav2_p2_windowed_ref_i <= mult4_p_net;
  cav2_p2_windowed_ref_q <= mult5_p_net;
  cav2_p1_if_phase <= down_sample_q_net_x6;
  cav2_p1_if_i <= down_sample1_q_net_x3;
  cav2_p1_if_q <= down_sample_q_net_x3;
  register29_q_net <= cav2_p1_chan_sel;
  register35_q_net <= cav2_nco_phase_reset;
  register30_q_net <= cav2_p2_chan_sel;
  down_sample1_q_net_x1 <= rf_ref_amp;
  down_sample_q_net_x1 <= rf_ref_phase;
  down_sample_q_net_x2 <= rf_ref_q;
  register36_q_net <= cav2_nco_phase_adj;
  down_sample1_q_net_x2 <= rf_ref_i;
  register31_q_net <= cav2_p1_window_start;
  register32_q_net <= cav2_p1_window_stop;
  register1_q_net_x0 <= cav2_p1_cal_coef;
  register2_q_net_x0 <= cav2_p2_cal_coef;
  register33_q_net <= cav2_p2_window_start;
  register34_q_net <= cav2_p2_window_stop;
  gateway_out10_x1 <= mult2_p_net;
  gateway_out15_x1 <= convert_dout_net;
  gateway_out16_x1 <= convert1_dout_net;
  gateway_out3_x5 <= nco_sin;
  gateway_out4_x1 <= phase;
  gateway_out5_x3 <= nco_cos;
  gateway_out6_x3 <= cordic_6_0_m_axis_dout_tdata_real_net;
  gateway_out7_x3 <= fir_compiler_7_2_m_axis_data_tdata_real_net;
  gateway_out8_x5 <= fir_compiler_7_2_m_axis_data_tvalid_net;
  gateway_out_x2 <= inverter_op_net;
  gateway_out1_x6 <= convert2_dout_net;
  gateway_out10_x0 <= mult4_p_net;
  gateway_out11_x2 <= register1_q_net;
  gateway_out12_x0 <= convert4_dout_net;
  gateway_out13_x0 <= register12_q_net;
  gateway_out14_x0 <= mult5_p_net;
  gateway_out15_x0 <= register2_q_net;
  gateway_out16_x0 <= inverter3_op_net;
  gateway_out17_x0 <= accumulator3_q_net;
  gateway_out2_x6 <= inverter2_op_net;
  gateway_out22_x0 <= convert9_dout_net;
  gateway_out23_x0 <= convert10_dout_net;
  gateway_out3_x3 <= accumulator_q_net_x0;
  gateway_out4_x0 <= accumulator2_q_net;
  gateway_out5_x1 <= mult2_p_net_x0;
  gateway_out6_x0 <= inverter1_op_net;
  gateway_out7 <= accumulator1_q_net_x0;
  gateway_out8_x1 <= mult_p_net;
  gateway_out9 <= register11_q_net;
  gateway_out_x1 <= inverter_op_net_x0;
  gateway_out1_x3 <= convert2_dout_net_x5;
  gateway_out10 <= mult4_p_net_x0;
  gateway_out11_x1 <= register1_q_net_x3;
  gateway_out12 <= convert4_dout_net_x1;
  gateway_out13 <= register12_q_net_x1;
  gateway_out14 <= mult5_p_net_x0;
  gateway_out15 <= register2_q_net_x3;
  gateway_out16 <= inverter3_op_net_x0;
  gateway_out17 <= accumulator3_q_net_x0;
  gateway_out2_x3 <= inverter2_op_net_x0;
  gateway_out22 <= convert9_dout_net_x1;
  gateway_out23 <= convert10_dout_net_x0;
  gateway_out3_x2 <= accumulator_q_net;
  gateway_out4 <= accumulator2_q_net_x0;
  gateway_out5_x0 <= mult2_p_net_x1;
  gateway_out6 <= inverter1_op_net_x0;
  gateway_out7_x2 <= accumulator1_q_net;
  gateway_out8_x4 <= mult_p_net_x0;
  gateway_out9_x0 <= register11_q_net_x1;
  gateway_out1_x5 <= delay5_q_net_x2;
  gateway_out2_x5 <= delay3_q_net_x2;
  gateway_out27_x2 <= relational4_op_net_x0;
  gateway_out28_x2 <= relational3_op_net_x0;
  gateway_out29_x2 <= convert11_dout_net;
  gateway_out3_x4 <= convert7_dout_net_x1;
  gateway_out5_x2 <= convert5_dout_net_x1;
  gateway_out24_x0 <= convert5_dout_net_x0;
  gateway_out25 <= convert10_dout_net_x0;
  gateway_out26_x0 <= convert9_dout_net_x1;
  gateway_out6_x2 <= convert5_dout_net_x0;
  gateway_out7_x1 <= convert4_dout_net_x1;
  gateway_out8_x3 <= convert2_dout_net_x5;
  gateway_out24 <= convert5_dout_net_x1;
  gateway_out25_x0 <= convert10_dout_net;
  gateway_out26 <= convert9_dout_net;
  gateway_out6_x1 <= convert5_dout_net_x1;
  gateway_out7_x0 <= convert4_dout_net;
  gateway_out8_x2 <= convert2_dout_net;
  gateway_out1_x4 <= delay5_q_net_x0;
  gateway_out2_x4 <= delay3_q_net_x0;
  gateway_out27_x0 <= relational4_op_net;
  gateway_out28_x0 <= relational3_op_net;
  gateway_out29_x0 <= convert11_dout_net_x0;
  gateway_out3_x0 <= convert7_dout_net_x0;
  gateway_out5 <= convert5_dout_net_x0;
  gateway_out34_x0 <= convert11_dout_net_x0;
  gateway_out35_x0 <= mult4_p_net_x0;
  gateway_out37_x0 <= convert11_dout_net_x0;
  gateway_out38_x0 <= mult5_p_net_x0;
  gateway_out34 <= convert11_dout_net;
  gateway_out35 <= mult4_p_net;
  gateway_out37 <= convert11_dout_net;
  gateway_out38 <= mult5_p_net;
  gateway_out11_x0 <= convert_dout_net_x0;
  gateway_out19 <= mult3_p_net;
  gateway_out20 <= delay3_q_net;
  gateway_out8 <= divide_op_net;
  gateway_out27 <= addsub3_s_net;
  gateway_out28 <= register_q_net;
  gateway_out29 <= register1_q_net_x2;
  gateway_out3 <= mult1_p_net;
  gateway_out <= mult3_p_net;
  gateway_out1_x0 <= relational1_op_net_x0;
  gateway_out2_x0 <= delay5_q_net;
  gateway_out1 <= mult_p_net_x2;
  gateway_out2 <= register2_q_net_x2;
  gateway_out11 <= convert_dout_net_x1;
  gateway_out19_x0 <= mult3_p_net_x0;
  gateway_out20_x0 <= delay3_q_net_x1;
  gateway_out8_x0 <= divide_op_net_x0;
  gateway_out27_x1 <= addsub3_s_net_x1;
  gateway_out28_x1 <= register_q_net_x0;
  gateway_out29_x1 <= register1_q_net_x1;
  gateway_out3_x1 <= mult1_p_net_x0;
  gateway_out_x0 <= mult3_p_net_x0;
  gateway_out1_x2 <= relational1_op_net;
  gateway_out2_x2 <= delay5_q_net_x1;
  gateway_out1_x1 <= mult_p_net_x1;
  gateway_out2_x1 <= register2_q_net_x1;
  down_sample1_q_net_x0 <= cav1_p2_if_i;
  down_sample_q_net_x0 <= cav1_p2_if_q;
  convert2_dout_net_x0 <= flo_c1p2_window;
  counter_op_net <= c1p2_pt_cntr;
  convert2_dout_net_x1 <= cav1_p2_dc_tvalid;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  ddc_nco1 : entity work.appmodel_ddc_nco1 
  port map (
    phase_ctrl => down_sample6_q_net,
    phase_reset => down_sample5_q_net,
    flo_c1p2_window => convert2_dout_net_x0,
    cav1_p2_if_i => down_sample1_q_net_x0,
    cav1_p2_if_q => down_sample_q_net_x0,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    tvalid => dds_compiler_6_0_m_axis_data_tvalid_net,
    sine => nco_sin,
    cosine => nco_cos,
    nco_out_1 => nco_sin,
    nco_out_2 => nco_cos,
    gateway_out10 => mult2_p_net,
    gateway_out15 => convert_dout_net,
    gateway_out16 => convert1_dout_net,
    gateway_out3 => nco_sin,
    gateway_out4 => phase,
    gateway_out5 => nco_cos,
    gateway_out6 => cordic_6_0_m_axis_dout_tdata_real_net,
    gateway_out7 => fir_compiler_7_2_m_axis_data_tdata_real_net,
    gateway_out8 => fir_compiler_7_2_m_axis_data_tvalid_net
  );
  iq_integration : entity work.appmodel_iq_integration 
  port map (
    cav_windowed_imag => mult2_p_net_x0,
    cav_windowed_real => mult_p_net,
    ref_windowed_i => mult4_p_net,
    ref_windowed_q => mult5_p_net,
    window_profile => convert11_dout_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    cav_int_q => convert10_dout_net,
    cav_int_i => convert9_dout_net,
    ref_int_i => convert2_dout_net,
    ref_int_q => convert4_dout_net,
    gateway_out => inverter_op_net,
    gateway_out1 => convert2_dout_net,
    gateway_out11 => register1_q_net,
    gateway_out12 => convert4_dout_net,
    gateway_out13 => register12_q_net,
    gateway_out15 => register2_q_net,
    gateway_out16 => inverter3_op_net,
    gateway_out17 => accumulator3_q_net,
    gateway_out2 => inverter2_op_net,
    gateway_out22 => convert9_dout_net,
    gateway_out23 => convert10_dout_net,
    gateway_out3 => accumulator_q_net_x0,
    gateway_out4 => accumulator2_q_net,
    gateway_out6 => inverter1_op_net,
    gateway_out7 => accumulator1_q_net_x0,
    gateway_out9 => register11_q_net
  );
  iq_integration1 : entity work.appmodel_iq_integration1 
  port map (
    cav_windowed_imag => mult2_p_net_x1,
    cav_windowed_real => mult_p_net_x0,
    ref_windowed_i => mult4_p_net_x0,
    ref_windowed_q => mult5_p_net_x0,
    window_profile => convert11_dout_net_x0,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    cav_int_q => convert10_dout_net_x0,
    cav_int_i => convert9_dout_net_x1,
    ref_int_i => convert2_dout_net_x5,
    ref_int_q => convert4_dout_net_x1,
    gateway_out => inverter_op_net_x0,
    gateway_out1 => convert2_dout_net_x5,
    gateway_out11 => register1_q_net_x3,
    gateway_out12 => convert4_dout_net_x1,
    gateway_out13 => register12_q_net_x1,
    gateway_out15 => register2_q_net_x3,
    gateway_out16 => inverter3_op_net_x0,
    gateway_out17 => accumulator3_q_net_x0,
    gateway_out2 => inverter2_op_net_x0,
    gateway_out22 => convert9_dout_net_x1,
    gateway_out23 => convert10_dout_net_x0,
    gateway_out3 => accumulator_q_net,
    gateway_out4 => accumulator2_q_net_x0,
    gateway_out6 => inverter1_op_net_x0,
    gateway_out7 => accumulator1_q_net,
    gateway_out9 => register11_q_net_x1
  );
  masking_window : entity work.appmodel_masking_window 
  port map (
    phi_reset_trig => register35_q_net,
    start_pt => register33_q_net,
    stop_pt => register34_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    trig_reset => convert3_dout_net_x0,
    counter_x0 => counter_op_net_x1,
    eval_window => convert11_dout_net,
    integral_trig => convert5_dout_net_x1,
    flo_window => convert2_dout_net_x4,
    gateway_out1 => delay5_q_net_x2,
    gateway_out2 => delay3_q_net_x2,
    gateway_out27 => relational4_op_net_x0,
    gateway_out28 => relational3_op_net_x0,
    gateway_out29 => convert11_dout_net,
    gateway_out3 => convert7_dout_net_x1,
    gateway_out5 => convert5_dout_net_x1
  );
  pa_conversion1 : entity work.appmodel_pa_conversion1 
  port map (
    cav_int_q => convert10_dout_net_x0,
    cav_int_i => convert9_dout_net_x1,
    ref_int_q => convert4_dout_net_x1,
    ref_int_i => convert2_dout_net_x5,
    integration_trig => convert5_dout_net_x0,
    cal_coefficient => down_sample7_q_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    phi_diff => addsub_s_net,
    ref_phi_out => register11_q_net_x0,
    cav_phi_out => register13_q_net,
    cav_amp_out => register14_q_net
  );
  pa_conversion2 : entity work.appmodel_pa_conversion2 
  port map (
    cav_int_q => convert10_dout_net,
    cav_int_i => convert9_dout_net,
    ref_int_q => convert4_dout_net,
    ref_int_i => convert2_dout_net,
    integration_trig => convert5_dout_net_x1,
    cal_coefficient => down_sample3_q_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    phi_diff => addsub_s_net_x0,
    ref_phi_out => register11_q_net_x2,
    cav_phi_out => register13_q_net_x0,
    cav_amp_out => register14_q_net_x0
  );
  pa_select : entity work.appmodel_pa_select_x1 
  port map (
    pa_bus_1 => amp,
    pa_chan_sel => register29_q_net,
    pa_bus_2 => phase_x0,
    pa_bus_3 => channel,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    amp => down_sample1_q_net_x6,
    phase => down_sample_q_net_x6
  );
  pa_select1 : entity work.appmodel_pa_select1_x0 
  port map (
    pa_bus_1 => amp,
    pa_chan_sel => register30_q_net,
    pa_bus_2 => phase_x0,
    pa_bus_3 => channel,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    amp => down_sample1_q_net_x5,
    phase => down_sample_q_net_x5
  );
  subsystem1_x0 : entity work.appmodel_subsystem1 
  port map (
    iq_stream_in_1 => ddci,
    iq_chan_sel => register30_q_net,
    iq_stream_in_2 => ddcq,
    iq_stream_in_3 => ddcchannel,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    ddci => down_sample1_q_net_x4,
    ddcq => down_sample_q_net_x4
  );
  subsystem3 : entity work.appmodel_subsystem3 
  port map (
    iq_stream_in_1 => ddci,
    iq_chan_sel => register29_q_net,
    iq_stream_in_2 => ddcq,
    iq_stream_in_3 => ddcchannel,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    ddci => down_sample1_q_net_x3,
    ddcq => down_sample_q_net_x3
  );
  c1p1_masking_window : entity work.appmodel_c1p1_masking_window 
  port map (
    phi_reset_trig => register35_q_net,
    start_pt => register31_q_net,
    stop_pt => register32_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    counter_x0 => counter_op_net_x0,
    eval_window => convert11_dout_net_x0,
    integral_trig => convert5_dout_net_x0,
    flo_window => convert2_dout_net_x3,
    gateway_out1 => delay5_q_net_x0,
    gateway_out2 => delay3_q_net_x0,
    gateway_out27 => relational4_op_net,
    gateway_out28 => relational3_op_net,
    gateway_out29 => convert11_dout_net_x0,
    gateway_out3 => convert7_dout_net_x0,
    gateway_out5 => convert5_dout_net_x0
  );
  c1p1_window_wf : entity work.appmodel_c1p1_window_wf 
  port map (
    cav_img => convert5_dout_net,
    cav_real => convert1_dout_net_x0,
    ref_img => down_sample_q_net_x2,
    ref_real => down_sample1_q_net_x2,
    window_profile => addsub3_s_net_x2,
    pt_window => convert11_dout_net_x0,
    delay_match_amt => constant1_op_net,
    pt_cntr => counter_op_net_x0,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    cav_windowed_imag => mult2_p_net_x1,
    cav_windowed_real => mult_p_net_x0,
    ref_windowed_imag => mult5_p_net_x0,
    ref_windowed_real => mult4_p_net_x0,
    delayed_dc_img => dual_port_ram_doutb_net_x0,
    delayed_dc_real => dual_port_ram1_doutb_net_x0,
    gateway_out35 => mult4_p_net_x0,
    gateway_out38 => mult5_p_net_x0
  );
  c1p2_window_wf : entity work.appmodel_c1p2_window_wf_x0 
  port map (
    cav_img => convert6_dout_net,
    cav_real => convert2_dout_net_x2,
    ref_img => down_sample_q_net_x2,
    ref_real => down_sample1_q_net_x2,
    window_profile => addsub3_s_net_x0,
    pt_window => convert11_dout_net,
    delay_match_amt => constant2_op_net,
    pt_cntr => counter_op_net_x1,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    cav_windowed_imag => mult2_p_net_x0,
    cav_windowed_real => mult_p_net,
    ref_windowed_imag => mult5_p_net,
    ref_windowed_real => mult4_p_net,
    delayed_cav_dc_img => dual_port_ram_doutb_net,
    delayed_cav_dc_real => dual_port_ram1_doutb_net,
    gateway_out35 => mult4_p_net,
    gateway_out38 => mult5_p_net
  );
  c1p2_windowing_func : entity work.appmodel_c1p2_windowing_func 
  port map (
    imag => convert3_dout_net,
    real => convert4_dout_net_x0,
    eval_window => convert11_dout_net,
    flo_window => convert2_dout_net_x4,
    reset => convert3_dout_net_x0,
    c1p2_pt_cntr => counter_op_net,
    cav1_p2_dc_tvalid => convert2_dout_net_x1,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    window_profile => addsub3_s_net_x0,
    nco_feedback => convert_dout_net_x0,
    gateway_out11 => convert_dout_net_x0,
    gateway_out19 => mult3_p_net,
    gateway_out20 => delay3_q_net,
    gateway_out8 => divide_op_net,
    gateway_out27 => addsub3_s_net,
    gateway_out28 => register_q_net,
    gateway_out29 => register1_q_net_x2,
    gateway_out3 => mult1_p_net,
    gateway_out => mult3_p_net,
    gateway_out1_x0 => relational1_op_net_x0,
    gateway_out2_x0 => delay5_q_net,
    gateway_out1 => mult_p_net_x2,
    gateway_out2 => register2_q_net_x2
  );
  c1p2_windowing_func1 : entity work.appmodel_c1p2_windowing_func1 
  port map (
    imag => convert7_dout_net,
    real => convert8_dout_net,
    eval_window => convert11_dout_net_x0,
    flo_window => convert2_dout_net_x3,
    reset => convert3_dout_net_x0,
    c1p2_pt_cntr => counter_op_net,
    cav1_p2_dc_tvalid => convert2_dout_net_x1,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    window_profile => addsub3_s_net_x2,
    nco_feedback => convert_dout_net_x1,
    gateway_out11 => convert_dout_net_x1,
    gateway_out19 => mult3_p_net_x0,
    gateway_out20 => delay3_q_net_x1,
    gateway_out8 => divide_op_net_x0,
    gateway_out27 => addsub3_s_net_x1,
    gateway_out28 => register_q_net_x0,
    gateway_out29 => register1_q_net_x1,
    gateway_out3 => mult1_p_net_x0,
    gateway_out => mult3_p_net_x0,
    gateway_out1_x0 => relational1_op_net,
    gateway_out2_x0 => delay5_q_net_x1,
    gateway_out1 => mult_p_net_x1,
    gateway_out2 => register2_q_net_x1
  );
  convert5 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 16,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register1_q_net_x4,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert5_dout_net
  );
  convert1 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 16,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register2_q_net_x4,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert1_dout_net_x0
  );
  constant1 : entity work.sysgen_constant_ea3f16fdf4 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant1_op_net
  );
  convert7 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 31,
    dout_width => 33,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register1_q_net_x4,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert7_dout_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => clock_enable_probe_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => clock_enable_probe1_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  convert2 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 16,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register32_q_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert2_dout_net_x2
  );
  convert6 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 16,
    dout_width => 18,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register33_q_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert6_dout_net
  );
  convert8 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 31,
    dout_width => 33,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register2_q_net_x4,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert8_dout_net
  );
  down_sample5 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 0,
    d_width => 1,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 0,
    q_width => 1
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register8_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample5_q_net
  );
  down_sample6 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 32,
    d_width => 32,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 32,
    q_width => 32
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register9_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample6_q_net
  );
  register8 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => register35_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register8_q_net
  );
  register9 : entity work.appmodel_xlregister 
  generic map (
    d_width => 32,
    init_value => b"00000000000000000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register36_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register9_q_net
  );
  clock_enable_probe : entity work.appmodel_xlceprobe 
  generic map (
    d_width => 18,
    q_width => 1
  )
  port map (
    d => down_sample_q_net_x3,
    clk => d_clk_net,
    ce => q_ce_net,
    q => clock_enable_probe_q_net
  );
  clock_enable_probe1 : entity work.appmodel_xlceprobe 
  generic map (
    d_width => 18,
    q_width => 1
  )
  port map (
    d => down_sample_q_net_x4,
    clk => d_clk_net,
    ce => q_ce_net,
    q => clock_enable_probe1_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => complex_multiplier_6_0_m_axis_dout_tdata_imag_net,
    en => complex_multiplier_6_0_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register1_q_net_x4
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => complex_multiplier_6_0_m_axis_dout_tdata_real_net,
    en => complex_multiplier_6_0_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register2_q_net_x4
  );
  register32 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => complex_multiplier_6_0_1_m_axis_dout_tdata_imag_net,
    en => complex_multiplier_6_0_1_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register32_q_net_x0
  );
  register33 : entity work.appmodel_xlregister 
  generic map (
    d_width => 33,
    init_value => b"000000000000000000000000000000000"
  )
  port map (
    rst => "0",
    d => complex_multiplier_6_0_1_m_axis_dout_tdata_real_net,
    en => complex_multiplier_6_0_1_m_axis_dout_tvalid_net,
    clk => d_clk_net,
    ce => q_ce_net,
    q => register33_q_net_x0
  );
  complex_multiplier_6_0_1 : entity work.xlcomplex_multiplier_9ea3ea4f9302ca9c16802064e75abe37 
  port map (
    s_axis_a_tvalid => down_sample1_q_net(0),
    s_axis_a_tdata_imag => down_sample_q_net_x4,
    s_axis_a_tdata_real => down_sample1_q_net_x4,
    s_axis_b_tvalid => dds_compiler_6_0_m_axis_data_tvalid_net,
    s_axis_b_tdata_imag => nco_sin,
    s_axis_b_tdata_real => nco_cos,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => complex_multiplier_6_0_1_m_axis_dout_tvalid_net(0),
    m_axis_dout_tdata_imag => complex_multiplier_6_0_1_m_axis_dout_tdata_imag_net,
    m_axis_dout_tdata_real => complex_multiplier_6_0_1_m_axis_dout_tdata_real_net
  );
  constant2 : entity work.sysgen_constant_ea3f16fdf4 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant2_op_net
  );
  down_sample7 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register7_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample7_q_net
  );
  register7 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register1_q_net_x0,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register7_q_net
  );
  complex_multiplier_6_0 : entity work.xlcomplex_multiplier_9ea3ea4f9302ca9c16802064e75abe37 
  port map (
    s_axis_a_tvalid => down_sample_q_net(0),
    s_axis_a_tdata_imag => down_sample_q_net_x3,
    s_axis_a_tdata_real => down_sample1_q_net_x3,
    s_axis_b_tvalid => dds_compiler_6_0_m_axis_data_tvalid_net,
    s_axis_b_tdata_imag => nco_sin,
    s_axis_b_tdata_real => nco_cos,
    clk => d_clk_net,
    ce => q_ce_net,
    m_axis_dout_tvalid => complex_multiplier_6_0_m_axis_dout_tvalid_net(0),
    m_axis_dout_tdata_imag => complex_multiplier_6_0_m_axis_dout_tdata_imag_net,
    m_axis_dout_tdata_real => complex_multiplier_6_0_m_axis_dout_tdata_real_net
  );
  convert3 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 31,
    dout_width => 33,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register33_q_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert3_dout_net
  );
  convert4 : entity work.appmodel_xlconvert 
  generic map (
    bool_conversion => 0,
    din_arith => 2,
    din_bin_pt => 29,
    din_width => 33,
    dout_arith => 2,
    dout_bin_pt => 31,
    dout_width => 33,
    latency => 1,
    overflow => xlWrap,
    quantization => xlTruncate
  )
  port map (
    clr => '0',
    en => "1",
    din => register32_q_net_x0,
    clk => d_clk_net,
    ce => q_ce_net,
    dout => convert4_dout_net_x0
  );
  down_sample3 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlUnsigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlUnsigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register10_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample3_q_net
  );
  register10 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => register2_q_net_x0,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register10_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/RFLib_input
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_rflib_input is
  port (
    amp : in std_logic_vector( 18-1 downto 0 );
    ddcchannel : in std_logic_vector( 4-1 downto 0 );
    ddci : in std_logic_vector( 18-1 downto 0 );
    ddcq : in std_logic_vector( 18-1 downto 0 );
    phase : in std_logic_vector( 18-1 downto 0 );
    phaseampchannel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    pa_out_1 : out std_logic_vector( 18-1 downto 0 );
    iq_out_1 : out std_logic_vector( 18-1 downto 0 );
    pa_out_2 : out std_logic_vector( 18-1 downto 0 );
    pa_out_3 : out std_logic_vector( 4-1 downto 0 );
    iq_out_2 : out std_logic_vector( 18-1 downto 0 );
    iq_out_3 : out std_logic_vector( 4-1 downto 0 )
  );
end appmodel_rflib_input;
architecture structural of appmodel_rflib_input is 
  signal amp_x0 : std_logic_vector( 18-1 downto 0 );
  signal ddci_x0 : std_logic_vector( 18-1 downto 0 );
  signal phase_x0 : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal ddcq_x0 : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel_x0 : std_logic_vector( 4-1 downto 0 );
  signal amp_net : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel_net : std_logic_vector( 4-1 downto 0 );
  signal ddci_net : std_logic_vector( 18-1 downto 0 );
  signal ddcq_net : std_logic_vector( 18-1 downto 0 );
  signal phase_net : std_logic_vector( 18-1 downto 0 );
  signal phaseampchannel_net : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
begin
  pa_out_1 <= amp_x0;
  iq_out_1 <= ddci_x0;
  pa_out_2 <= phase_x0;
  pa_out_3 <= channel;
  iq_out_2 <= ddcq_x0;
  iq_out_3 <= ddcchannel_x0;
  amp_net <= amp;
  ddcchannel_net <= ddcchannel;
  ddci_net <= ddci;
  ddcq_net <= ddcq;
  phase_net <= phase;
  phaseampchannel_net <= phaseampchannel;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  register25 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => amp_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => amp_x0
  );
  register26 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => phase_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => phase_x0
  );
  register27 : entity work.appmodel_xlregister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => phaseampchannel_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => channel
  );
  register29 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => ddci_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => ddci_x0
  );
  register30 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    en => "1",
    rst => "0",
    d => ddcq_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => ddcq_x0
  );
  register31 : entity work.appmodel_xlregister 
  generic map (
    d_width => 4,
    init_value => b"0000"
  )
  port map (
    en => "1",
    rst => "0",
    d => ddcchannel_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => ddcchannel_x0
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Ref/IQ_select/Channel Select3
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_channel_select3 is
  port (
    in0 : in std_logic_vector( 18-1 downto 0 );
    in1 : in std_logic_vector( 18-1 downto 0 );
    ch_id : in std_logic_vector( 4-1 downto 0 );
    ch_sel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out0 : out std_logic_vector( 18-1 downto 0 );
    out1 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_channel_select3;
architecture structural of appmodel_channel_select3 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal ddci : std_logic_vector( 18-1 downto 0 );
  signal ddcq : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel : std_logic_vector( 4-1 downto 0 );
  signal register2_q_net : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant13_op_net : std_logic_vector( 4-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register3_q_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register_q_net : std_logic_vector( 18-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register6_q_net : std_logic_vector( 1-1 downto 0 );
  signal last : std_logic_vector( 1-1 downto 0 );
begin
  out0 <= down_sample1_q_net;
  out1 <= down_sample_q_net;
  ddci <= in0;
  ddcq <= in1;
  ddcchannel <= ch_id;
  register2_q_net <= ch_sel;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant13 : entity work.sysgen_constant_6cd5a293ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => ddcq,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => ddci,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay1_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register3_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register2_q_net_x0,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register1_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register1_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register2_q_net_x0
  );
  register3 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register3_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => last,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => ddcchannel,
    b => register2_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => ddcchannel,
    b => constant13_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => last
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Ref/IQ_select
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_iq_select is
  port (
    iq_stream_in_1 : in std_logic_vector( 18-1 downto 0 );
    iq_chan_sel : in std_logic_vector( 4-1 downto 0 );
    iq_stream_in_2 : in std_logic_vector( 18-1 downto 0 );
    iq_stream_in_3 : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    ddci : out std_logic_vector( 18-1 downto 0 );
    ddcq : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_iq_select;
architecture structural of appmodel_iq_select is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal ddci_x0 : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net : std_logic_vector( 4-1 downto 0 );
  signal ddcq_x0 : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
begin
  ddci <= down_sample1_q_net;
  ddcq <= down_sample_q_net;
  ddci_x0 <= iq_stream_in_1;
  register2_q_net <= iq_chan_sel;
  ddcq_x0 <= iq_stream_in_2;
  ddcchannel <= iq_stream_in_3;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  channel_select3 : entity work.appmodel_channel_select3 
  port map (
    in0 => ddci_x0,
    in1 => ddcq_x0,
    ch_id => ddcchannel,
    ch_sel => register2_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out0 => down_sample1_q_net,
    out1 => down_sample_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Ref/PA_select/Channel Select1
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_channel_select1_x0 is
  port (
    in0 : in std_logic_vector( 18-1 downto 0 );
    in1 : in std_logic_vector( 18-1 downto 0 );
    ch_id : in std_logic_vector( 4-1 downto 0 );
    ch_sel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    out0 : out std_logic_vector( 18-1 downto 0 );
    out1 : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_channel_select1_x0;
architecture structural of appmodel_channel_select1_x0 is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal amp : std_logic_vector( 18-1 downto 0 );
  signal phase : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal register2_q_net : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal constant13_op_net : std_logic_vector( 4-1 downto 0 );
  signal delay_q_net : std_logic_vector( 18-1 downto 0 );
  signal delay1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register3_q_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register_q_net : std_logic_vector( 18-1 downto 0 );
  signal relational_op_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register6_q_net : std_logic_vector( 1-1 downto 0 );
  signal last : std_logic_vector( 1-1 downto 0 );
begin
  out0 <= down_sample1_q_net;
  out1 <= down_sample_q_net;
  amp <= in0;
  phase <= in1;
  channel <= ch_id;
  register2_q_net <= ch_sel;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  constant13 : entity work.sysgen_constant_6cd5a293ca 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  delay : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => phase,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay_q_net
  );
  delay1 : entity work.appmodel_xldelay 
  generic map (
    latency => 1,
    reg_retiming => 0,
    reset => 0,
    width => 18
  )
  port map (
    en => '1',
    rst => '1',
    d => amp,
    clk => q_clk_net,
    ce => d_ce_net,
    q => delay1_q_net
  );
  down_sample : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register3_q_net,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample_q_net
  );
  down_sample1 : entity work.appmodel_xldsamp 
  generic map (
    d_arith => xlSigned,
    d_bin_pt => 17,
    d_width => 18,
    ds_ratio => 12,
    latency => 1,
    phase => 11,
    q_arith => xlSigned,
    q_bin_pt => 17,
    q_width => 18
  )
  port map (
    src_clr => '0',
    dest_clr => '0',
    en => "1",
    rst => "0",
    d => register2_q_net_x0,
    src_clk => q_clk_net,
    src_ce => d_ce_net,
    dest_clk => d_clk_net,
    dest_ce => q_ce_net,
    q => down_sample1_q_net
  );
  register_x0 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register_q_net
  );
  register1 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => delay1_q_net,
    en => relational_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register1_q_net
  );
  register2 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register1_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register2_q_net_x0
  );
  register3 : entity work.appmodel_xlregister 
  generic map (
    d_width => 18,
    init_value => b"000000000000000000"
  )
  port map (
    rst => "0",
    d => register_q_net,
    en => register6_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register3_q_net
  );
  register6 : entity work.appmodel_xlregister 
  generic map (
    d_width => 1,
    init_value => b"0"
  )
  port map (
    en => "1",
    rst => "0",
    d => last,
    clk => q_clk_net,
    ce => d_ce_net,
    q => register6_q_net
  );
  relational : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => channel,
    b => register2_q_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => relational_op_net
  );
  relational1 : entity work.sysgen_relational_64713a7784 
  port map (
    clr => '0',
    a => channel,
    b => constant13_op_net,
    clk => q_clk_net,
    ce => d_ce_net,
    op => last
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Ref/PA_select
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_pa_select is
  port (
    pa_bus_1 : in std_logic_vector( 18-1 downto 0 );
    pa_chan_sel : in std_logic_vector( 4-1 downto 0 );
    pa_bus_2 : in std_logic_vector( 18-1 downto 0 );
    pa_bus_3 : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    amp : out std_logic_vector( 18-1 downto 0 );
    phase : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_pa_select;
architecture structural of appmodel_pa_select is 
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal amp_x0 : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net : std_logic_vector( 4-1 downto 0 );
  signal phase_x0 : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
begin
  amp <= down_sample1_q_net;
  phase <= down_sample_q_net;
  amp_x0 <= pa_bus_1;
  register2_q_net <= pa_chan_sel;
  phase_x0 <= pa_bus_2;
  channel <= pa_bus_3;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  channel_select1 : entity work.appmodel_channel_select1_x0 
  port map (
    in0 => amp_x0,
    in1 => phase_x0,
    ch_id => channel,
    ch_sel => register2_q_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    out0 => down_sample1_q_net,
    out1 => down_sample_q_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp/Ref
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_ref is
  port (
    in1_1 : in std_logic_vector( 18-1 downto 0 );
    in2_1 : in std_logic_vector( 18-1 downto 0 );
    in1_2 : in std_logic_vector( 18-1 downto 0 );
    in1_3 : in std_logic_vector( 4-1 downto 0 );
    in2_2 : in std_logic_vector( 18-1 downto 0 );
    in2_3 : in std_logic_vector( 4-1 downto 0 );
    rf_ref_chan_sel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    ref_amp : out std_logic_vector( 18-1 downto 0 );
    ref_phi : out std_logic_vector( 18-1 downto 0 );
    ref_i : out std_logic_vector( 18-1 downto 0 );
    ref_q : out std_logic_vector( 18-1 downto 0 );
    rf_ref_amp : out std_logic_vector( 18-1 downto 0 );
    rf_ref_phase : out std_logic_vector( 18-1 downto 0 );
    rf_ref_i : out std_logic_vector( 18-1 downto 0 );
    rf_ref_q : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_ref;
architecture structural of appmodel_ref is 
  signal down_sample1_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal amp : std_logic_vector( 18-1 downto 0 );
  signal ddci : std_logic_vector( 18-1 downto 0 );
  signal phase : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal ddcq : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel : std_logic_vector( 4-1 downto 0 );
  signal register2_q_net : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
begin
  ref_amp <= down_sample1_q_net_x0;
  ref_phi <= down_sample_q_net_x0;
  ref_i <= down_sample1_q_net;
  ref_q <= down_sample_q_net;
  amp <= in1_1;
  ddci <= in2_1;
  phase <= in1_2;
  channel <= in1_3;
  ddcq <= in2_2;
  ddcchannel <= in2_3;
  rf_ref_amp <= down_sample1_q_net_x0;
  rf_ref_phase <= down_sample_q_net_x0;
  rf_ref_i <= down_sample1_q_net;
  rf_ref_q <= down_sample_q_net;
  register2_q_net <= rf_ref_chan_sel;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  iq_select : entity work.appmodel_iq_select 
  port map (
    iq_stream_in_1 => ddci,
    iq_chan_sel => register2_q_net,
    iq_stream_in_2 => ddcq,
    iq_stream_in_3 => ddcchannel,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    ddci => down_sample1_q_net,
    ddcq => down_sample_q_net
  );
  pa_select : entity work.appmodel_pa_select 
  port map (
    pa_bus_1 => amp,
    pa_chan_sel => register2_q_net,
    pa_bus_2 => phase,
    pa_bus_3 => channel,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    amp => down_sample1_q_net_x0,
    phase => down_sample_q_net_x0
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel/dsp
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_dsp is
  port (
    amp : in std_logic_vector( 18-1 downto 0 );
    ddcchannel : in std_logic_vector( 4-1 downto 0 );
    ddci : in std_logic_vector( 18-1 downto 0 );
    ddcq : in std_logic_vector( 18-1 downto 0 );
    phase : in std_logic_vector( 18-1 downto 0 );
    phaseampchannel : in std_logic_vector( 4-1 downto 0 );
    cav1_nco_phase_adj : in std_logic_vector( 32-1 downto 0 );
    cav1_nco_phase_reset : in std_logic_vector( 1-1 downto 0 );
    cav1_p1_cal_coef : in std_logic_vector( 18-1 downto 0 );
    cav1_p1_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav1_p1_window_start : in std_logic_vector( 16-1 downto 0 );
    cav1_p1_window_stop : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_cal_coef : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav1_p2_window_start : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_window_stop : in std_logic_vector( 16-1 downto 0 );
    cav2_nco_phase_adj : in std_logic_vector( 32-1 downto 0 );
    cav2_nco_phase_reset : in std_logic_vector( 1-1 downto 0 );
    cav2_p1_cal_coef : in std_logic_vector( 18-1 downto 0 );
    cav2_p1_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav2_p1_window_start : in std_logic_vector( 16-1 downto 0 );
    cav2_p1_window_stop : in std_logic_vector( 16-1 downto 0 );
    cav2_p2_cal_coef : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav2_p2_window_start : in std_logic_vector( 16-1 downto 0 );
    cav2_p2_window_stop : in std_logic_vector( 16-1 downto 0 );
    rf_ref_chan_sel : in std_logic_vector( 4-1 downto 0 );
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    diag1data_x0 : out std_logic_vector( 18-1 downto 0 );
    diag2data_x0 : out std_logic_vector( 18-1 downto 0 );
    wfdata_2 : out std_logic_vector( 18-1 downto 0 );
    wfdata_3 : out std_logic_vector( 18-1 downto 0 );
    wfdata_4 : out std_logic_vector( 18-1 downto 0 );
    wfdata_5 : out std_logic_vector( 18-1 downto 0 );
    wfdata_6 : out std_logic_vector( 18-1 downto 0 );
    wfdata_7 : out std_logic_vector( 18-1 downto 0 );
    wfvalid_2 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_3 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_4 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_5 : out std_logic_vector( 1-1 downto 0 );
    diag3data : out std_logic_vector( 18-1 downto 0 );
    wfvalid_6 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_7 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_1 : out std_logic_vector( 1-1 downto 0 );
    diag4data : out std_logic_vector( 18-1 downto 0 );
    diag5data : out std_logic_vector( 18-1 downto 0 );
    diag6data : out std_logic_vector( 18-1 downto 0 );
    diag7data : out std_logic_vector( 18-1 downto 0 );
    diag8data : out std_logic_vector( 18-1 downto 0 );
    wfdata_0 : out std_logic_vector( 18-1 downto 0 );
    wfdata_1 : out std_logic_vector( 18-1 downto 0 );
    diag1data : out std_logic_vector( 32-1 downto 0 );
    diag1fixed : out std_logic_vector( 1-1 downto 0 );
    diag1sevr : out std_logic_vector( 2-1 downto 0 );
    diag2data : out std_logic_vector( 32-1 downto 0 );
    diag2fixed : out std_logic_vector( 1-1 downto 0 );
    diag2sevr : out std_logic_vector( 2-1 downto 0 );
    diag3data_x0 : out std_logic_vector( 32-1 downto 0 );
    diag3fixed : out std_logic_vector( 1-1 downto 0 );
    diag3sevr : out std_logic_vector( 2-1 downto 0 );
    diag4data_x0 : out std_logic_vector( 32-1 downto 0 );
    diag4fixed : out std_logic_vector( 1-1 downto 0 );
    diag4sevr : out std_logic_vector( 2-1 downto 0 );
    diag5data_x0 : out std_logic_vector( 32-1 downto 0 );
    diag5fixed : out std_logic_vector( 1-1 downto 0 );
    diag5sevr : out std_logic_vector( 2-1 downto 0 );
    diag6data_x0 : out std_logic_vector( 32-1 downto 0 );
    diag6fixed : out std_logic_vector( 1-1 downto 0 );
    diag6sevr : out std_logic_vector( 2-1 downto 0 );
    diag7data_x0 : out std_logic_vector( 32-1 downto 0 );
    diag7fixed : out std_logic_vector( 1-1 downto 0 );
    diag7sevr : out std_logic_vector( 2-1 downto 0 );
    diag8data_x0 : out std_logic_vector( 32-1 downto 0 );
    diag8fixed : out std_logic_vector( 1-1 downto 0 );
    diag8sevr : out std_logic_vector( 2-1 downto 0 );
    diagnclk : out std_logic_vector( 1-1 downto 0 );
    diagnrst : out std_logic_vector( 1-1 downto 0 );
    diagnsync : out std_logic_vector( 1-1 downto 0 );
    wfdata_0_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_1_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_2_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_3_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_4_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_5_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_6_x0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_7_x0 : out std_logic_vector( 32-1 downto 0 );
    wfvalid_0_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_1_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_2_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_3_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_4_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_5_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_6_x0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_7_x0 : out std_logic_vector( 1-1 downto 0 );
    diag9fixed : out std_logic_vector( 1-1 downto 0 );
    diag10fixed : out std_logic_vector( 1-1 downto 0 );
    diag11fixed : out std_logic_vector( 1-1 downto 0 );
    diag12fixed : out std_logic_vector( 1-1 downto 0 );
    diag13fixed : out std_logic_vector( 1-1 downto 0 );
    diag14fixed : out std_logic_vector( 1-1 downto 0 );
    diag15fixed : out std_logic_vector( 1-1 downto 0 );
    diag16fixed : out std_logic_vector( 1-1 downto 0 );
    diag26fixed : out std_logic_vector( 1-1 downto 0 );
    diag27fixed : out std_logic_vector( 1-1 downto 0 );
    diag28fixed : out std_logic_vector( 1-1 downto 0 );
    diag29fixed : out std_logic_vector( 1-1 downto 0 );
    diag30fixed : out std_logic_vector( 1-1 downto 0 );
    diag31fixed : out std_logic_vector( 1-1 downto 0 );
    diag17fixed : out std_logic_vector( 1-1 downto 0 );
    diag18fixed : out std_logic_vector( 1-1 downto 0 );
    diag19fixed : out std_logic_vector( 1-1 downto 0 );
    diag20fixed : out std_logic_vector( 1-1 downto 0 );
    diag21fixed : out std_logic_vector( 1-1 downto 0 );
    diag22fixed : out std_logic_vector( 1-1 downto 0 );
    diag23fixed : out std_logic_vector( 1-1 downto 0 );
    diag24fixed : out std_logic_vector( 1-1 downto 0 );
    diag25fixed : out std_logic_vector( 1-1 downto 0 );
    diag9sevr : out std_logic_vector( 2-1 downto 0 );
    diag10sevr : out std_logic_vector( 2-1 downto 0 );
    diag11sevr : out std_logic_vector( 2-1 downto 0 );
    diag12sevr : out std_logic_vector( 2-1 downto 0 );
    diag13sevr : out std_logic_vector( 2-1 downto 0 );
    diag14sevr : out std_logic_vector( 2-1 downto 0 );
    diag15sevr : out std_logic_vector( 2-1 downto 0 );
    diag16sevr : out std_logic_vector( 2-1 downto 0 );
    diag26sevr : out std_logic_vector( 2-1 downto 0 );
    diag27sevr : out std_logic_vector( 2-1 downto 0 );
    diag28sevr : out std_logic_vector( 2-1 downto 0 );
    diag29sevr : out std_logic_vector( 2-1 downto 0 );
    diag30sevr : out std_logic_vector( 2-1 downto 0 );
    diag31sevr : out std_logic_vector( 2-1 downto 0 );
    diag17sevr : out std_logic_vector( 2-1 downto 0 );
    diag18sevr : out std_logic_vector( 2-1 downto 0 );
    diag19sevr : out std_logic_vector( 2-1 downto 0 );
    diag20sevr : out std_logic_vector( 2-1 downto 0 );
    diag21sevr : out std_logic_vector( 2-1 downto 0 );
    diag22sevr : out std_logic_vector( 2-1 downto 0 );
    diag23sevr : out std_logic_vector( 2-1 downto 0 );
    diag24sevr : out std_logic_vector( 2-1 downto 0 );
    diag25sevr : out std_logic_vector( 2-1 downto 0 );
    gateway_out3_x1 : out std_logic_vector( 26-1 downto 0 );
    gateway_out39 : out std_logic_vector( 18-1 downto 0 );
    gateway_out4_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out40 : out std_logic_vector( 18-1 downto 0 );
    gateway_out5_x1 : out std_logic_vector( 26-1 downto 0 );
    gateway_out10_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out16_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out3_x2 : out std_logic_vector( 26-1 downto 0 );
    gateway_out4_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out5_x2 : out std_logic_vector( 26-1 downto 0 );
    gateway_out6_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out7_x1 : out std_logic_vector( 34-1 downto 0 );
    gateway_out8_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9 : out std_logic_vector( 32-1 downto 0 );
    gateway_out : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out1_x0 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x0 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out24_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x5 : out std_logic_vector( 20-1 downto 0 );
    gateway_out24 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x3 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x4 : out std_logic_vector( 20-1 downto 0 );
    gateway_out1_x6 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x6 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x7 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out32 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35 : out std_logic_vector( 18-1 downto 0 );
    gateway_out36 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out32_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out36_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x2 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x1 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x2 : out std_logic_vector( 10-1 downto 0 );
    gateway_out11_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x3 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x1 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x5 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x2 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x5 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x5 : out std_logic_vector( 10-1 downto 0 );
    gateway_out39_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out40_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out10_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out16_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out3_x4 : out std_logic_vector( 26-1 downto 0 );
    gateway_out4_x3 : out std_logic_vector( 18-1 downto 0 );
    gateway_out5_x5 : out std_logic_vector( 26-1 downto 0 );
    gateway_out6_x7 : out std_logic_vector( 18-1 downto 0 );
    gateway_out7_x7 : out std_logic_vector( 34-1 downto 0 );
    gateway_out8_x9 : out std_logic_vector( 1-1 downto 0 );
    gateway_out_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x9 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10_x3 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x10 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3_x10 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4_x5 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x8 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6_x8 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x8 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x10 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x10 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10_x4 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x8 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3_x9 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x6 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x6 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out1_x7 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x7 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x8 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x7 : out std_logic_vector( 1-1 downto 0 );
    gateway_out24_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x6 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x8 : out std_logic_vector( 20-1 downto 0 );
    gateway_out24_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x5 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x5 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x7 : out std_logic_vector( 20-1 downto 0 );
    gateway_out1_x8 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x9 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x5 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x12 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x9 : out std_logic_vector( 1-1 downto 0 );
    gateway_out32_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out36_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out32_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out36_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x5 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19_x1 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x12 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x6 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x6 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29_x6 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x6 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x14 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x14 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x13 : out std_logic_vector( 10-1 downto 0 );
    gateway_out11_x6 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19_x2 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x11 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x5 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x5 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29_x4 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x5 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x12 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x12 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x11 : out std_logic_vector( 10-1 downto 0 );
    diag1fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag1sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag2fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag2sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag3fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag3sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag4fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag4sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag5fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag5sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag6fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag6sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag7fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag7sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diag8fixed_x0 : out std_logic_vector( 1-1 downto 0 );
    diag8sevr_ctl : out std_logic_vector( 3-1 downto 0 );
    diagnrst_ctl : out std_logic_vector( 1-1 downto 0 );
    diagnsync_ctl : out std_logic_vector( 1-1 downto 0 );
    cav1_nco_fb : out std_logic_vector( 32-1 downto 0 );
    c1p1_delay_match : out std_logic_vector( 16-1 downto 0 );
    c1p1_freq_err : out std_logic_vector( 32-1 downto 0 );
    c1p1_integral_logic : out std_logic_vector( 1-1 downto 0 );
    c1p1_pt_cntr : out std_logic_vector( 16-1 downto 0 );
    c1p1_pt_window : out std_logic_vector( 1-1 downto 0 );
    c1p1_window_func : out std_logic_vector( 33-1 downto 0 );
    c1p2_delay_match : out std_logic_vector( 16-1 downto 0 );
    c1p2_integral_logic : out std_logic_vector( 1-1 downto 0 );
    c1p2_pt_cntr : out std_logic_vector( 16-1 downto 0 );
    c1p2_pt_window : out std_logic_vector( 1-1 downto 0 );
    c1p2_window_func : out std_logic_vector( 33-1 downto 0 );
    cav1_p1_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav1_p1_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_delayed_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_delayed_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav1_p1_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav1_p1_integrated_ref_i : out std_logic_vector( 20-1 downto 0 );
    cav1_p1_integrated_ref_q : out std_logic_vector( 20-1 downto 0 );
    cav1_p1_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_ref_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_windowed_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_windowed_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_windowed_ref_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_windowed_ref_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav1_p2_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_dc_tvalid : out std_logic_vector( 1-1 downto 0 );
    cav1_p2_delayed_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_delayed_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav1_p2_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav1_p2_integrated_ref_i : out std_logic_vector( 20-1 downto 0 );
    cav1_p2_integrated_ref_q : out std_logic_vector( 20-1 downto 0 );
    cav1_p2_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_windowed_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_windowed_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_windowed_ref_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_windowed_ref_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_ref_phase_out : out std_logic_vector( 18-1 downto 0 );
    dsp_cav1_reset : out std_logic_vector( 1-1 downto 0 );
    flo_c1p1_window : out std_logic_vector( 1-1 downto 0 );
    flo_c1p2_window : out std_logic_vector( 1-1 downto 0 );
    cav2_nco_fb : out std_logic_vector( 32-1 downto 0 );
    c2p1_delay_match : out std_logic_vector( 16-1 downto 0 );
    c2p1_freq_err : out std_logic_vector( 32-1 downto 0 );
    c2p1_integral_logic : out std_logic_vector( 1-1 downto 0 );
    c2p1_pt_cntr : out std_logic_vector( 16-1 downto 0 );
    c2p1_pt_window : out std_logic_vector( 1-1 downto 0 );
    c2p1_window_func : out std_logic_vector( 33-1 downto 0 );
    c2p2_delay_match : out std_logic_vector( 16-1 downto 0 );
    c2p2_integral_logic : out std_logic_vector( 1-1 downto 0 );
    c2p2_pt_cntr : out std_logic_vector( 16-1 downto 0 );
    c2p2_pt_window : out std_logic_vector( 1-1 downto 0 );
    c2p2_window_func : out std_logic_vector( 33-1 downto 0 );
    cav1_p2_ref_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav2_p1_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_delayed_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_delayed_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav2_p1_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav2_p1_integrated_ref_i : out std_logic_vector( 20-1 downto 0 );
    cav2_p1_integrated_ref_q : out std_logic_vector( 20-1 downto 0 );
    cav2_p1_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_ref_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_windowed_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_windowed_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_windowed_ref_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_windowed_ref_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav2_p2_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_delayed_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_delayed_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav2_p2_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav2_p2_integrated_ref_i : out std_logic_vector( 20-1 downto 0 );
    cav2_p2_integrated_ref_q : out std_logic_vector( 20-1 downto 0 );
    cav2_p2_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_windowed_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_windowed_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_windowed_ref_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_windowed_ref_q : out std_logic_vector( 18-1 downto 0 );
    dsp_cav2_reset : out std_logic_vector( 1-1 downto 0 );
    flo_c2p1_window : out std_logic_vector( 1-1 downto 0 );
    flo_c2p2_window : out std_logic_vector( 1-1 downto 0 );
    rf_ref_amp : out std_logic_vector( 18-1 downto 0 );
    rf_ref_i : out std_logic_vector( 18-1 downto 0 );
    rf_ref_phase : out std_logic_vector( 18-1 downto 0 );
    rf_ref_q : out std_logic_vector( 18-1 downto 0 )
  );
end appmodel_dsp;
architecture structural of appmodel_dsp is 
  signal constant_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant13_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant24_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant25_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant27_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant28_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant29_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant30_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant33_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant34_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant35_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant36_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant16_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant37_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant38_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant31_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert15_dout_net : std_logic_vector( 2-1 downto 0 );
  signal constant32_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant17_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant18_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant19_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant20_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant21_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant22_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant23_op_net : std_logic_vector( 18-1 downto 0 );
  signal mux2_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert4_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert13_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux4_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert6_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert14_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux5_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert7_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert40_dout_net : std_logic_vector( 1-1 downto 0 );
  signal mux6_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert8_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert16_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux7_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert9_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert17_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux8_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert10_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert18_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux9_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert11_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert19_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux3_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert12_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert20_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert2_dout_net_x3 : std_logic_vector( 1-1 downto 0 );
  signal convert_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert1_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert27_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert28_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert29_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert30_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert31_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert32_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert33_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert34_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert35_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert36_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert37_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert38_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert39_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x1 : std_logic_vector( 20-1 downto 0 );
  signal convert41_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert42_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert54_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert55_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert56_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert57_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert58_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert51_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert52_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert53_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert67_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert68_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert69_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert70_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert63_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert64_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert62_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert71_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert72_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert73_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert74_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert59_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert60_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert61_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert66_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert65_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert75_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert76_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert77_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert78_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert79_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert80_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert81_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert91_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert92_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert93_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert94_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert95_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert96_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert82_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert83_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert84_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert85_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert86_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert87_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert88_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert89_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert90_dout_net : std_logic_vector( 2-1 downto 0 );
  signal nco_sin : std_logic_vector( 26-1 downto 0 );
  signal down_sample1_q_net_x5 : std_logic_vector( 18-1 downto 0 );
  signal register9_q_net : std_logic_vector( 32-1 downto 0 );
  signal down_sample_q_net_x5 : std_logic_vector( 18-1 downto 0 );
  signal nco_cos : std_logic_vector( 26-1 downto 0 );
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal phase_x0 : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 18-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tdata_real_net : std_logic_vector( 34-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tvalid_net : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator2_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal mult2_p_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal mult4_p_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register1_q_net : std_logic_vector( 32-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 20-1 downto 0 );
  signal register12_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal mult5_p_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert9_dout_net_x1 : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net : std_logic_vector( 20-1 downto 0 );
  signal accumulator_q_net : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net : std_logic_vector( 32-1 downto 0 );
  signal mult2_p_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal inverter1_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net : std_logic_vector( 32-1 downto 0 );
  signal mult_p_net_x6 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal inverter_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x2 : std_logic_vector( 20-1 downto 0 );
  signal mult4_p_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal register1_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal convert4_dout_net_x0 : std_logic_vector( 20-1 downto 0 );
  signal register12_q_net : std_logic_vector( 32-1 downto 0 );
  signal mult5_p_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert9_dout_net_x2 : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net_x0 : std_logic_vector( 20-1 downto 0 );
  signal accumulator_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal mult2_p_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal inverter1_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal mult_p_net_x5 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net : std_logic_vector( 32-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x5 : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net_x5 : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert11_dout_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal down_sample1_q_net_x4 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x4 : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x4 : std_logic_vector( 32-1 downto 0 );
  signal mult3_p_net_x1 : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net_x3 : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net_x1 : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net_x5 : std_logic_vector( 32-1 downto 0 );
  signal register_q_net_x1 : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net_x6 : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x3 : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net_x3 : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x6 : std_logic_vector( 10-1 downto 0 );
  signal convert_dout_net_x5 : std_logic_vector( 32-1 downto 0 );
  signal mult3_p_net_x2 : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net_x4 : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net_x2 : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net_x6 : std_logic_vector( 32-1 downto 0 );
  signal register_q_net_x2 : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net_x7 : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x4 : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net_x4 : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x7 : std_logic_vector( 10-1 downto 0 );
  signal mult2_p_net_x4 : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x6 : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal nco_sin_x0 : std_logic_vector( 26-1 downto 0 );
  signal phase_x2 : std_logic_vector( 18-1 downto 0 );
  signal nco_cos_x0 : std_logic_vector( 26-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_real_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tdata_real_net_x0 : std_logic_vector( 34-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tvalid_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x9 : std_logic_vector( 20-1 downto 0 );
  signal mult4_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register1_q_net_x9 : std_logic_vector( 32-1 downto 0 );
  signal convert4_dout_net_x3 : std_logic_vector( 20-1 downto 0 );
  signal register12_q_net_x5 : std_logic_vector( 32-1 downto 0 );
  signal mult5_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net_x8 : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal convert9_dout_net_x5 : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net_x3 : std_logic_vector( 20-1 downto 0 );
  signal accumulator_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal inverter1_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal mult_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x5 : std_logic_vector( 32-1 downto 0 );
  signal inverter_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x6 : std_logic_vector( 20-1 downto 0 );
  signal mult4_p_net : std_logic_vector( 18-1 downto 0 );
  signal register1_q_net_x8 : std_logic_vector( 32-1 downto 0 );
  signal convert4_dout_net_x2 : std_logic_vector( 20-1 downto 0 );
  signal register12_q_net_x6 : std_logic_vector( 32-1 downto 0 );
  signal mult5_p_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net_x9 : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert9_dout_net_x3 : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net_x2 : std_logic_vector( 20-1 downto 0 );
  signal accumulator_q_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal mult2_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal inverter1_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal mult_p_net : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x6 : std_logic_vector( 32-1 downto 0 );
  signal delay5_q_net_x6 : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net_x6 : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal convert11_dout_net_x3 : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net_x3 : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net_x3 : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x1 : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net_x2 : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert11_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert_dout_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net_x4 : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x4 : std_logic_vector( 10-1 downto 0 );
  signal convert_dout_net_x3 : std_logic_vector( 32-1 downto 0 );
  signal mult3_p_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net_x0 : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal register_q_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net_x5 : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x5 : std_logic_vector( 10-1 downto 0 );
  signal amp_net : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel_net : std_logic_vector( 4-1 downto 0 );
  signal ddci_net : std_logic_vector( 18-1 downto 0 );
  signal ddcq_net : std_logic_vector( 18-1 downto 0 );
  signal phase_net : std_logic_vector( 18-1 downto 0 );
  signal phaseampchannel_net : std_logic_vector( 4-1 downto 0 );
  signal constant8_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant64_op_net : std_logic_vector( 3-1 downto 0 );
  signal constant7_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant6_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant5_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant4_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant3_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant2_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant1_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant31_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant32_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant1_op_net : std_logic_vector( 16-1 downto 0 );
  signal counter_op_net_x1 : std_logic_vector( 16-1 downto 0 );
  signal addsub3_s_net_x3 : std_logic_vector( 33-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 16-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal addsub3_s_net_x4 : std_logic_vector( 33-1 downto 0 );
  signal register14_q_net : std_logic_vector( 18-1 downto 0 );
  signal addsub_s_net : std_logic_vector( 18-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert6_dout_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_doutb_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x8 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x7 : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal addsub_s_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal dual_port_ram_doutb_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x6 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x7 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x8 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x6 : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x5 : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant1_op_net_x1 : std_logic_vector( 16-1 downto 0 );
  signal counter_op_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal addsub3_s_net_x1 : std_logic_vector( 33-1 downto 0 );
  signal constant2_op_net_x1 : std_logic_vector( 16-1 downto 0 );
  signal counter_op_net_x2 : std_logic_vector( 16-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal register11_q_net_x4 : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal addsub_s_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal convert5_dout_net_x4 : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal addsub_s_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal convert6_dout_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net_x8 : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_doutb_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal convert3_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x4 : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x7 : std_logic_vector( 1-1 downto 0 );
  signal register36_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal register35_q_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register29_q_net : std_logic_vector( 4-1 downto 0 );
  signal register31_q_net : std_logic_vector( 16-1 downto 0 );
  signal register32_q_net : std_logic_vector( 16-1 downto 0 );
  signal register2_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal register33_q_net : std_logic_vector( 16-1 downto 0 );
  signal register34_q_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal register36_q_net : std_logic_vector( 32-1 downto 0 );
  signal register35_q_net : std_logic_vector( 1-1 downto 0 );
  signal register1_q_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal register29_q_net_x1 : std_logic_vector( 4-1 downto 0 );
  signal register31_q_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal register32_q_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal register2_q_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal register30_q_net_x0 : std_logic_vector( 4-1 downto 0 );
  signal register33_q_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal register34_q_net : std_logic_vector( 16-1 downto 0 );
  signal register2_q_net_x2 : std_logic_vector( 4-1 downto 0 );
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal ddci_x0 : std_logic_vector( 18-1 downto 0 );
  signal phase_x1 : std_logic_vector( 18-1 downto 0 );
  signal channel : std_logic_vector( 4-1 downto 0 );
  signal ddcq_x0 : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel_x0 : std_logic_vector( 4-1 downto 0 );
  signal amp_x0 : std_logic_vector( 18-1 downto 0 );
begin
  diag1data_x0 <= constant_op_net;
  diag2data_x0 <= constant13_op_net;
  wfdata_2 <= constant24_op_net;
  wfdata_3 <= constant25_op_net;
  wfdata_4 <= constant27_op_net;
  wfdata_5 <= constant28_op_net;
  wfdata_6 <= constant29_op_net;
  wfdata_7 <= constant30_op_net;
  wfvalid_2 <= constant33_op_net;
  wfvalid_3 <= constant34_op_net;
  wfvalid_4 <= constant35_op_net;
  wfvalid_5 <= constant36_op_net;
  diag3data <= constant16_op_net;
  wfvalid_6 <= constant37_op_net;
  wfvalid_7 <= constant38_op_net;
  wfvalid_0 <= constant31_op_net_x0;
  wfvalid_1 <= constant32_op_net_x0;
  diag4data <= constant17_op_net;
  diag5data <= constant18_op_net;
  diag6data <= constant19_op_net;
  diag7data <= constant20_op_net;
  diag8data <= constant21_op_net;
  wfdata_0 <= constant22_op_net;
  wfdata_1 <= constant23_op_net;
  diag1data <= mux2_y_net;
  diag1fixed <= convert4_dout_net_x1;
  diag1sevr <= convert13_dout_net;
  diag2data <= mux4_y_net;
  diag2fixed <= convert6_dout_net_x0;
  diag2sevr <= convert14_dout_net;
  diag3data_x0 <= mux5_y_net;
  diag3fixed <= convert7_dout_net_x0;
  diag3sevr <= convert15_dout_net;
  diag4data_x0 <= mux6_y_net;
  diag4fixed <= convert8_dout_net;
  diag4sevr <= convert16_dout_net;
  diag5data_x0 <= mux7_y_net;
  diag5fixed <= convert9_dout_net_x0;
  diag5sevr <= convert17_dout_net;
  diag6data_x0 <= mux8_y_net;
  diag6fixed <= convert10_dout_net_x1;
  diag6sevr <= convert18_dout_net;
  diag7data_x0 <= mux9_y_net;
  diag7fixed <= convert11_dout_net_x0;
  diag7sevr <= convert19_dout_net;
  diag8data_x0 <= mux3_y_net;
  diag8fixed <= convert12_dout_net;
  diag8sevr <= convert20_dout_net;
  diagnclk <= convert2_dout_net_x3;
  diagnrst <= convert_dout_net_x1;
  diagnsync <= convert1_dout_net_x1;
  wfdata_0_x0 <= convert27_dout_net;
  wfdata_1_x0 <= convert28_dout_net;
  wfdata_2_x0 <= convert29_dout_net;
  wfdata_3_x0 <= convert30_dout_net;
  wfdata_4_x0 <= convert31_dout_net;
  wfdata_5_x0 <= convert32_dout_net;
  wfdata_6_x0 <= convert33_dout_net;
  wfdata_7_x0 <= convert34_dout_net;
  wfvalid_0_x0 <= convert35_dout_net;
  wfvalid_1_x0 <= convert36_dout_net;
  wfvalid_2_x0 <= convert37_dout_net;
  wfvalid_3_x0 <= convert38_dout_net;
  wfvalid_4_x0 <= convert39_dout_net;
  wfvalid_5_x0 <= convert40_dout_net;
  wfvalid_6_x0 <= convert41_dout_net;
  wfvalid_7_x0 <= convert42_dout_net;
  diag9fixed <= convert54_dout_net;
  diag10fixed <= convert55_dout_net;
  diag11fixed <= convert56_dout_net;
  diag12fixed <= convert57_dout_net;
  diag13fixed <= convert58_dout_net;
  diag14fixed <= convert51_dout_net;
  diag15fixed <= convert52_dout_net;
  diag16fixed <= convert53_dout_net;
  diag26fixed <= convert67_dout_net;
  diag27fixed <= convert68_dout_net;
  diag28fixed <= convert69_dout_net;
  diag29fixed <= convert70_dout_net;
  diag30fixed <= convert63_dout_net;
  diag31fixed <= convert64_dout_net;
  diag17fixed <= convert62_dout_net;
  diag18fixed <= convert71_dout_net;
  diag19fixed <= convert72_dout_net;
  diag20fixed <= convert73_dout_net;
  diag21fixed <= convert74_dout_net;
  diag22fixed <= convert59_dout_net;
  diag23fixed <= convert60_dout_net;
  diag24fixed <= convert61_dout_net;
  diag25fixed <= convert66_dout_net;
  diag9sevr <= convert65_dout_net;
  diag10sevr <= convert75_dout_net;
  diag11sevr <= convert76_dout_net;
  diag12sevr <= convert77_dout_net;
  diag13sevr <= convert78_dout_net;
  diag14sevr <= convert79_dout_net;
  diag15sevr <= convert80_dout_net;
  diag16sevr <= convert81_dout_net;
  diag26sevr <= convert91_dout_net;
  diag27sevr <= convert92_dout_net;
  diag28sevr <= convert93_dout_net;
  diag29sevr <= convert94_dout_net;
  diag30sevr <= convert95_dout_net;
  diag31sevr <= convert96_dout_net;
  diag17sevr <= convert82_dout_net;
  diag18sevr <= convert83_dout_net;
  diag19sevr <= convert84_dout_net;
  diag20sevr <= convert85_dout_net;
  diag21sevr <= convert86_dout_net;
  diag22sevr <= convert87_dout_net;
  diag23sevr <= convert88_dout_net;
  diag24sevr <= convert89_dout_net;
  diag25sevr <= convert90_dout_net;
  gateway_out3_x1 <= nco_sin;
  gateway_out39 <= down_sample1_q_net_x5;
  gateway_out4_x1 <= register9_q_net;
  gateway_out40 <= down_sample_q_net_x5;
  gateway_out5_x1 <= nco_cos;
  gateway_out10_x0 <= mult2_p_net;
  gateway_out15_x0 <= convert_dout_net_x0;
  gateway_out16_x0 <= convert1_dout_net_x0;
  gateway_out3_x2 <= nco_sin;
  gateway_out4_x2 <= phase_x0;
  gateway_out5_x2 <= nco_cos;
  gateway_out6_x1 <= cordic_6_0_m_axis_dout_tdata_real_net;
  gateway_out7_x1 <= fir_compiler_7_2_m_axis_data_tdata_real_net;
  gateway_out8_x1 <= fir_compiler_7_2_m_axis_data_tvalid_net;
  gateway_out_x0 <= inverter_op_net;
  gateway_out1_x1 <= convert2_dout_net_x1;
  gateway_out10_x1 <= mult4_p_net_x1;
  gateway_out11_x0 <= register1_q_net;
  gateway_out12_x0 <= convert4_dout_net;
  gateway_out13_x0 <= register12_q_net_x2;
  gateway_out14_x0 <= mult5_p_net_x1;
  gateway_out15_x1 <= register2_q_net_x0;
  gateway_out16_x1 <= inverter3_op_net;
  gateway_out17 <= accumulator3_q_net;
  gateway_out2 <= inverter2_op_net;
  gateway_out22 <= convert9_dout_net_x1;
  gateway_out23 <= convert10_dout_net;
  gateway_out3 <= accumulator_q_net;
  gateway_out4 <= accumulator2_q_net;
  gateway_out5 <= mult2_p_net_x3;
  gateway_out6 <= inverter1_op_net;
  gateway_out7 <= accumulator1_q_net;
  gateway_out8 <= mult_p_net_x6;
  gateway_out9 <= register11_q_net_x2;
  gateway_out <= inverter_op_net_x0;
  gateway_out1 <= convert2_dout_net_x2;
  gateway_out10 <= mult4_p_net_x2;
  gateway_out11 <= register1_q_net_x0;
  gateway_out12 <= convert4_dout_net_x0;
  gateway_out13 <= register12_q_net;
  gateway_out14 <= mult5_p_net_x2;
  gateway_out15 <= register2_q_net;
  gateway_out16 <= inverter3_op_net_x0;
  gateway_out17_x0 <= accumulator3_q_net_x0;
  gateway_out2_x1 <= inverter2_op_net_x0;
  gateway_out22_x0 <= convert9_dout_net_x2;
  gateway_out23_x0 <= convert10_dout_net_x0;
  gateway_out3_x0 <= accumulator_q_net_x0;
  gateway_out4_x0 <= accumulator2_q_net_x0;
  gateway_out5_x0 <= mult2_p_net_x2;
  gateway_out6_x0 <= inverter1_op_net_x0;
  gateway_out7_x0 <= accumulator1_q_net_x0;
  gateway_out8_x0 <= mult_p_net_x5;
  gateway_out9_x0 <= register11_q_net;
  gateway_out1_x0 <= delay5_q_net;
  gateway_out2_x0 <= delay3_q_net;
  gateway_out27 <= relational4_op_net;
  gateway_out28 <= relational3_op_net;
  gateway_out29_x1 <= convert11_dout_net;
  gateway_out3_x6 <= convert7_dout_net;
  gateway_out5_x3 <= convert5_dout_net_x0;
  gateway_out24_x0 <= convert5_dout_net_x2;
  gateway_out25_x0 <= convert10_dout_net_x0;
  gateway_out26_x0 <= convert9_dout_net_x2;
  gateway_out6_x3 <= convert5_dout_net_x2;
  gateway_out7_x2 <= convert4_dout_net_x0;
  gateway_out8_x5 <= convert2_dout_net_x2;
  gateway_out24 <= convert5_dout_net_x0;
  gateway_out25 <= convert10_dout_net;
  gateway_out26 <= convert9_dout_net_x1;
  gateway_out6_x2 <= convert5_dout_net_x0;
  gateway_out7_x3 <= convert4_dout_net;
  gateway_out8_x4 <= convert2_dout_net_x1;
  gateway_out1_x6 <= delay5_q_net_x5;
  gateway_out2_x6 <= delay3_q_net_x5;
  gateway_out27_x2 <= relational4_op_net_x1;
  gateway_out28_x2 <= relational3_op_net_x1;
  gateway_out29_x2 <= convert11_dout_net_x2;
  gateway_out3_x7 <= convert7_dout_net_x2;
  gateway_out5_x4 <= convert5_dout_net_x2;
  gateway_out32 <= down_sample1_q_net_x4;
  gateway_out34 <= convert11_dout_net_x2;
  gateway_out35 <= mult4_p_net_x2;
  gateway_out36 <= down_sample_q_net_x4;
  gateway_out37_x0 <= convert11_dout_net_x2;
  gateway_out38_x0 <= mult5_p_net_x2;
  gateway_out32_x0 <= down_sample1_q_net_x4;
  gateway_out34_x0 <= convert11_dout_net;
  gateway_out35_x0 <= mult4_p_net_x1;
  gateway_out36_x0 <= down_sample_q_net_x4;
  gateway_out37 <= convert11_dout_net;
  gateway_out38 <= mult5_p_net_x1;
  gateway_out11_x2 <= convert_dout_net_x4;
  gateway_out19_x0 <= mult3_p_net_x1;
  gateway_out20_x0 <= delay3_q_net_x3;
  gateway_out8_x2 <= divide_op_net_x1;
  gateway_out27_x0 <= addsub3_s_net_x5;
  gateway_out28_x0 <= register_q_net_x1;
  gateway_out29 <= register1_q_net_x6;
  gateway_out3_x3 <= mult1_p_net_x1;
  gateway_out_x1 <= mult3_p_net_x1;
  gateway_out1_x3 <= relational1_op_net_x1;
  gateway_out2_x3 <= delay5_q_net_x3;
  gateway_out1_x2 <= mult_p_net_x3;
  gateway_out2_x2 <= register2_q_net_x6;
  gateway_out11_x1 <= convert_dout_net_x5;
  gateway_out19 <= mult3_p_net_x2;
  gateway_out20 <= delay3_q_net_x4;
  gateway_out8_x3 <= divide_op_net_x2;
  gateway_out27_x1 <= addsub3_s_net_x6;
  gateway_out28_x1 <= register_q_net_x2;
  gateway_out29_x0 <= register1_q_net_x7;
  gateway_out3_x5 <= mult1_p_net_x2;
  gateway_out_x2 <= mult3_p_net_x2;
  gateway_out1_x5 <= relational1_op_net_x2;
  gateway_out2_x4 <= delay5_q_net_x4;
  gateway_out1_x4 <= mult_p_net_x4;
  gateway_out2_x5 <= register2_q_net_x7;
  gateway_out39_x0 <= down_sample1_q_net_x5;
  gateway_out40_x0 <= down_sample_q_net_x5;
  gateway_out10_x2 <= mult2_p_net_x4;
  gateway_out15_x2 <= convert_dout_net_x6;
  gateway_out16_x2 <= convert1_dout_net_x3;
  gateway_out3_x4 <= nco_sin_x0;
  gateway_out4_x3 <= phase_x2;
  gateway_out5_x5 <= nco_cos_x0;
  gateway_out6_x7 <= cordic_6_0_m_axis_dout_tdata_real_net_x0;
  gateway_out7_x7 <= fir_compiler_7_2_m_axis_data_tdata_real_net_x0;
  gateway_out8_x9 <= fir_compiler_7_2_m_axis_data_tvalid_net_x0;
  gateway_out_x3 <= inverter_op_net_x2;
  gateway_out1_x9 <= convert2_dout_net_x9;
  gateway_out10_x3 <= mult4_p_net_x0;
  gateway_out11_x3 <= register1_q_net_x9;
  gateway_out12_x1 <= convert4_dout_net_x3;
  gateway_out13_x1 <= register12_q_net_x5;
  gateway_out14_x1 <= mult5_p_net_x0;
  gateway_out15_x3 <= register2_q_net_x8;
  gateway_out16_x4 <= inverter3_op_net_x2;
  gateway_out17_x2 <= accumulator3_q_net_x2;
  gateway_out2_x10 <= inverter2_op_net_x2;
  gateway_out22_x2 <= convert9_dout_net_x5;
  gateway_out23_x2 <= convert10_dout_net_x3;
  gateway_out3_x10 <= accumulator_q_net_x2;
  gateway_out4_x5 <= accumulator2_q_net_x2;
  gateway_out5_x8 <= mult2_p_net_x1;
  gateway_out6_x8 <= inverter1_op_net_x2;
  gateway_out7_x8 <= accumulator1_q_net_x2;
  gateway_out8_x10 <= mult_p_net_x0;
  gateway_out9_x2 <= register11_q_net_x5;
  gateway_out_x4 <= inverter_op_net_x1;
  gateway_out1_x10 <= convert2_dout_net_x6;
  gateway_out10_x4 <= mult4_p_net;
  gateway_out11_x4 <= register1_q_net_x8;
  gateway_out12_x2 <= convert4_dout_net_x2;
  gateway_out13_x2 <= register12_q_net_x6;
  gateway_out14_x2 <= mult5_p_net;
  gateway_out15_x4 <= register2_q_net_x9;
  gateway_out16_x3 <= inverter3_op_net_x1;
  gateway_out17_x1 <= accumulator3_q_net_x1;
  gateway_out2_x8 <= inverter2_op_net_x1;
  gateway_out22_x1 <= convert9_dout_net_x3;
  gateway_out23_x1 <= convert10_dout_net_x2;
  gateway_out3_x9 <= accumulator_q_net_x1;
  gateway_out4_x4 <= accumulator2_q_net_x1;
  gateway_out5_x6 <= mult2_p_net_x0;
  gateway_out6_x4 <= inverter1_op_net_x1;
  gateway_out7_x4 <= accumulator1_q_net_x1;
  gateway_out8_x6 <= mult_p_net;
  gateway_out9_x1 <= register11_q_net_x6;
  gateway_out1_x7 <= delay5_q_net_x6;
  gateway_out2_x7 <= delay3_q_net_x6;
  gateway_out27_x3 <= relational4_op_net_x2;
  gateway_out28_x3 <= relational3_op_net_x2;
  gateway_out29_x3 <= convert11_dout_net_x3;
  gateway_out3_x8 <= convert7_dout_net_x3;
  gateway_out5_x7 <= convert5_dout_net_x3;
  gateway_out24_x2 <= convert5_dout_net_x1;
  gateway_out25_x2 <= convert10_dout_net_x2;
  gateway_out26_x2 <= convert9_dout_net_x3;
  gateway_out6_x6 <= convert5_dout_net_x1;
  gateway_out7_x6 <= convert4_dout_net_x2;
  gateway_out8_x8 <= convert2_dout_net_x6;
  gateway_out24_x1 <= convert5_dout_net_x3;
  gateway_out25_x1 <= convert10_dout_net_x3;
  gateway_out26_x1 <= convert9_dout_net_x5;
  gateway_out6_x5 <= convert5_dout_net_x3;
  gateway_out7_x5 <= convert4_dout_net_x3;
  gateway_out8_x7 <= convert2_dout_net_x9;
  gateway_out1_x8 <= delay5_q_net_x1;
  gateway_out2_x9 <= delay3_q_net_x2;
  gateway_out27_x4 <= relational4_op_net_x0;
  gateway_out28_x4 <= relational3_op_net_x0;
  gateway_out29_x5 <= convert11_dout_net_x1;
  gateway_out3_x12 <= convert7_dout_net_x1;
  gateway_out5_x9 <= convert5_dout_net_x1;
  gateway_out32_x2 <= down_sample1_q_net_x4;
  gateway_out34_x2 <= convert11_dout_net_x1;
  gateway_out35_x2 <= mult4_p_net;
  gateway_out36_x2 <= down_sample_q_net_x4;
  gateway_out37_x2 <= convert11_dout_net_x1;
  gateway_out38_x1 <= mult5_p_net;
  gateway_out32_x1 <= down_sample1_q_net_x4;
  gateway_out34_x1 <= convert11_dout_net_x3;
  gateway_out35_x1 <= mult4_p_net_x0;
  gateway_out36_x1 <= down_sample_q_net_x4;
  gateway_out37_x1 <= convert11_dout_net_x3;
  gateway_out38_x2 <= mult5_p_net_x0;
  gateway_out11_x5 <= convert_dout_net_x2;
  gateway_out19_x1 <= mult3_p_net;
  gateway_out20_x1 <= delay3_q_net_x0;
  gateway_out8_x12 <= divide_op_net;
  gateway_out27_x6 <= addsub3_s_net_x0;
  gateway_out28_x6 <= register_q_net;
  gateway_out29_x6 <= register1_q_net_x4;
  gateway_out3_x13 <= mult1_p_net;
  gateway_out_x6 <= mult3_p_net;
  gateway_out1_x14 <= relational1_op_net;
  gateway_out2_x14 <= delay5_q_net_x0;
  gateway_out1_x13 <= mult_p_net_x1;
  gateway_out2_x13 <= register2_q_net_x4;
  gateway_out11_x6 <= convert_dout_net_x3;
  gateway_out19_x2 <= mult3_p_net_x0;
  gateway_out20_x2 <= delay3_q_net_x1;
  gateway_out8_x11 <= divide_op_net_x0;
  gateway_out27_x5 <= addsub3_s_net_x2;
  gateway_out28_x5 <= register_q_net_x0;
  gateway_out29_x4 <= register1_q_net_x5;
  gateway_out3_x11 <= mult1_p_net_x0;
  gateway_out_x5 <= mult3_p_net_x0;
  gateway_out1_x12 <= relational1_op_net_x0;
  gateway_out2_x12 <= delay5_q_net_x2;
  gateway_out1_x11 <= mult_p_net_x2;
  gateway_out2_x11 <= register2_q_net_x5;
  amp_net <= amp;
  ddcchannel_net <= ddcchannel;
  ddci_net <= ddci;
  ddcq_net <= ddcq;
  phase_net <= phase;
  phaseampchannel_net <= phaseampchannel;
  diag1fixed_x0 <= constant8_op_net;
  diag1sevr_ctl <= constant64_op_net;
  diag2fixed_x0 <= constant7_op_net;
  diag2sevr_ctl <= constant64_op_net;
  diag3fixed_x0 <= constant6_op_net;
  diag3sevr_ctl <= constant64_op_net;
  diag4fixed_x0 <= constant5_op_net;
  diag4sevr_ctl <= constant64_op_net;
  diag5fixed_x0 <= constant4_op_net;
  diag5sevr_ctl <= constant64_op_net;
  diag6fixed_x0 <= constant3_op_net;
  diag6sevr_ctl <= constant64_op_net;
  diag7fixed_x0 <= constant2_op_net_x0;
  diag7sevr_ctl <= constant64_op_net;
  diag8fixed_x0 <= constant1_op_net_x0;
  diag8sevr_ctl <= constant64_op_net;
  diagnrst_ctl <= constant31_op_net;
  diagnsync_ctl <= constant32_op_net;
  cav1_nco_fb <= convert_dout_net_x4;
  c1p1_delay_match <= constant1_op_net;
  c1p1_freq_err <= convert_dout_net_x5;
  c1p1_integral_logic <= convert5_dout_net_x2;
  c1p1_pt_cntr <= counter_op_net_x1;
  c1p1_pt_window <= convert11_dout_net_x2;
  c1p1_window_func <= addsub3_s_net_x3;
  c1p2_delay_match <= constant2_op_net;
  c1p2_integral_logic <= convert5_dout_net_x0;
  c1p2_pt_cntr <= counter_op_net;
  c1p2_pt_window <= convert11_dout_net;
  c1p2_window_func <= addsub3_s_net_x4;
  cav1_p1_amp_out <= register14_q_net;
  cav1_p1_comparison_i <= addsub_s_net;
  cav1_p1_comparison_phase <= addsub_s_net;
  cav1_p1_comparison_q <= addsub_s_net;
  cav1_p1_dc_freq <= convert_dout_net_x5;
  cav1_p1_dc_img <= convert5_dout_net;
  cav1_p1_dc_real <= convert6_dout_net;
  cav1_p1_delayed_dc_img <= dual_port_ram_doutb_net_x1;
  cav1_p1_delayed_dc_real <= dual_port_ram1_doutb_net_x1;
  cav1_p1_if_amp <= down_sample1_q_net;
  cav1_p1_if_i <= down_sample1_q_net_x8;
  cav1_p1_if_phase <= down_sample_q_net;
  cav1_p1_if_q <= down_sample_q_net_x7;
  cav1_p1_integrated_i <= convert9_dout_net_x2;
  cav1_p1_integrated_q <= convert10_dout_net_x0;
  cav1_p1_integrated_ref_i <= convert2_dout_net_x2;
  cav1_p1_integrated_ref_q <= convert4_dout_net_x0;
  cav1_p1_phase_out <= register13_q_net;
  cav1_p1_ref_phase_out <= register11_q_net_x0;
  cav1_p1_windowed_img <= mult2_p_net_x2;
  cav1_p1_windowed_real <= mult_p_net_x5;
  cav1_p1_windowed_ref_i <= mult4_p_net_x2;
  cav1_p1_windowed_ref_q <= mult5_p_net_x2;
  cav1_p2_amp_out <= register14_q_net_x0;
  cav1_p2_comparison_i <= addsub_s_net_x0;
  cav1_p2_comparison_phase <= addsub_s_net_x0;
  cav1_p2_comparison_q <= addsub_s_net_x0;
  cav1_p2_dc_freq <= convert_dout_net_x4;
  cav1_p2_dc_img <= convert_dout_net;
  cav1_p2_dc_real <= convert1_dout_net;
  cav1_p2_dc_tvalid <= convert2_dout_net;
  cav1_p2_delayed_dc_img <= dual_port_ram_doutb_net_x2;
  cav1_p2_delayed_dc_real <= dual_port_ram1_doutb_net_x2;
  cav1_p2_if_amp <= down_sample1_q_net_x6;
  cav1_p2_if_i <= down_sample1_q_net_x7;
  cav1_p2_if_phase <= down_sample_q_net_x8;
  cav1_p2_if_q <= down_sample_q_net_x6;
  cav1_p2_integrated_i <= convert9_dout_net_x1;
  cav1_p2_integrated_q <= convert10_dout_net;
  cav1_p2_integrated_ref_i <= convert2_dout_net_x1;
  cav1_p2_integrated_ref_q <= convert4_dout_net;
  cav1_p2_phase_out <= register13_q_net_x0;
  cav1_p2_windowed_img <= mult2_p_net_x3;
  cav1_p2_windowed_real <= mult_p_net_x6;
  cav1_p2_windowed_ref_i <= mult4_p_net_x1;
  cav1_p2_windowed_ref_q <= mult5_p_net_x1;
  cav2_p2_ref_phase_out <= register11_q_net_x1;
  dsp_cav1_reset <= convert3_dout_net;
  flo_c1p1_window <= convert2_dout_net_x5;
  flo_c1p2_window <= convert2_dout_net_x0;
  cav2_nco_fb <= convert_dout_net_x2;
  c2p1_delay_match <= constant1_op_net_x1;
  c2p1_freq_err <= convert_dout_net_x3;
  c2p1_integral_logic <= convert5_dout_net_x1;
  c2p1_pt_cntr <= counter_op_net_x0;
  c2p1_pt_window <= convert11_dout_net_x1;
  c2p1_window_func <= addsub3_s_net_x1;
  c2p2_delay_match <= constant2_op_net_x1;
  c2p2_integral_logic <= convert5_dout_net_x3;
  c2p2_pt_cntr <= counter_op_net_x2;
  c2p2_pt_window <= convert11_dout_net_x3;
  c2p2_window_func <= addsub3_s_net;
  cav1_p2_ref_phase_out <= register11_q_net_x4;
  cav2_p1_amp_out <= register14_q_net_x1;
  cav2_p1_comparison_i <= addsub_s_net_x2;
  cav2_p1_comparison_phase <= addsub_s_net_x2;
  cav2_p1_comparison_q <= addsub_s_net_x2;
  cav2_p1_dc_freq <= convert_dout_net_x3;
  cav2_p1_dc_img <= convert5_dout_net_x4;
  cav2_p1_dc_real <= convert1_dout_net_x2;
  cav2_p1_delayed_dc_img <= dual_port_ram_doutb_net;
  cav2_p1_delayed_dc_real <= dual_port_ram1_doutb_net;
  cav2_p1_if_amp <= down_sample1_q_net_x0;
  cav2_p1_if_i <= down_sample1_q_net_x3;
  cav2_p1_if_phase <= down_sample_q_net_x0;
  cav2_p1_if_q <= down_sample_q_net_x3;
  cav2_p1_integrated_i <= convert9_dout_net_x3;
  cav2_p1_integrated_q <= convert10_dout_net_x2;
  cav2_p1_integrated_ref_i <= convert2_dout_net_x6;
  cav2_p1_integrated_ref_q <= convert4_dout_net_x2;
  cav2_p1_phase_out <= register13_q_net_x1;
  cav2_p1_ref_phase_out <= register11_q_net_x3;
  cav2_p1_windowed_img <= mult2_p_net_x0;
  cav2_p1_windowed_real <= mult_p_net;
  cav2_p1_windowed_ref_i <= mult4_p_net;
  cav2_p1_windowed_ref_q <= mult5_p_net;
  cav2_p2_amp_out <= register14_q_net_x2;
  cav2_p2_comparison_i <= addsub_s_net_x1;
  cav2_p2_comparison_phase <= addsub_s_net_x1;
  cav2_p2_comparison_q <= addsub_s_net_x1;
  cav2_p2_dc_freq <= convert_dout_net_x2;
  cav2_p2_dc_img <= convert6_dout_net_x1;
  cav2_p2_dc_real <= convert2_dout_net_x8;
  cav2_p2_delayed_dc_img <= dual_port_ram_doutb_net_x0;
  cav2_p2_delayed_dc_real <= dual_port_ram1_doutb_net_x0;
  cav2_p2_if_amp <= down_sample1_q_net_x1;
  cav2_p2_if_i <= down_sample1_q_net_x2;
  cav2_p2_if_phase <= down_sample_q_net_x1;
  cav2_p2_if_q <= down_sample_q_net_x2;
  cav2_p2_integrated_i <= convert9_dout_net_x5;
  cav2_p2_integrated_q <= convert10_dout_net_x3;
  cav2_p2_integrated_ref_i <= convert2_dout_net_x9;
  cav2_p2_integrated_ref_q <= convert4_dout_net_x3;
  cav2_p2_phase_out <= register13_q_net_x2;
  cav2_p2_windowed_img <= mult2_p_net_x1;
  cav2_p2_windowed_real <= mult_p_net_x0;
  cav2_p2_windowed_ref_i <= mult4_p_net_x0;
  cav2_p2_windowed_ref_q <= mult5_p_net_x0;
  dsp_cav2_reset <= convert3_dout_net_x0;
  flo_c2p1_window <= convert2_dout_net_x4;
  flo_c2p2_window <= convert2_dout_net_x7;
  rf_ref_amp <= down_sample1_q_net_x5;
  rf_ref_i <= down_sample1_q_net_x4;
  rf_ref_phase <= down_sample_q_net_x5;
  rf_ref_q <= down_sample_q_net_x4;
  register36_q_net_x0 <= cav1_nco_phase_adj;
  register35_q_net_x0 <= cav1_nco_phase_reset;
  register1_q_net_x1 <= cav1_p1_cal_coef;
  register29_q_net <= cav1_p1_chan_sel;
  register31_q_net <= cav1_p1_window_start;
  register32_q_net <= cav1_p1_window_stop;
  register2_q_net_x1 <= cav1_p2_cal_coef;
  register30_q_net <= cav1_p2_chan_sel;
  register33_q_net <= cav1_p2_window_start;
  register34_q_net_x0 <= cav1_p2_window_stop;
  register36_q_net <= cav2_nco_phase_adj;
  register35_q_net <= cav2_nco_phase_reset;
  register1_q_net_x3 <= cav2_p1_cal_coef;
  register29_q_net_x1 <= cav2_p1_chan_sel;
  register31_q_net_x0 <= cav2_p1_window_start;
  register32_q_net_x0 <= cav2_p1_window_stop;
  register2_q_net_x3 <= cav2_p2_cal_coef;
  register30_q_net_x0 <= cav2_p2_chan_sel;
  register33_q_net_x0 <= cav2_p2_window_start;
  register34_q_net <= cav2_p2_window_stop;
  register2_q_net_x2 <= rf_ref_chan_sel;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  bsa_streaming : entity work.appmodel_bsa_streaming 
  port map (
    diag7data_x0 => constant20_op_net,
    diag6data_x0 => constant19_op_net,
    diag5data_x0 => constant18_op_net,
    diag4data_x0 => constant17_op_net,
    diag3data_x0 => constant16_op_net,
    diag2data_x0 => constant13_op_net,
    wfdata_0 => constant22_op_net,
    wfdata_1 => constant23_op_net,
    wfdata_2 => constant24_op_net,
    wfdata_3 => constant25_op_net,
    wfdata_4 => constant27_op_net,
    wfdata_5 => constant28_op_net,
    wfdata_6 => constant29_op_net,
    wfdata_7 => constant30_op_net,
    wfvalid_0 => constant31_op_net_x0,
    wfvalid_1 => constant32_op_net_x0,
    wfvalid_2 => constant33_op_net,
    wfvalid_3 => constant34_op_net,
    wfvalid_4 => constant35_op_net,
    wfvalid_5 => constant36_op_net,
    wfvalid_6 => constant37_op_net,
    wfvalid_7 => constant38_op_net,
    diag1data_x0 => constant_op_net,
    diag8data => constant21_op_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    diagnrst_ctl => constant31_op_net,
    diag6fixed_x0 => constant3_op_net,
    diag2sevr_ctl => constant64_op_net,
    diag3sevr_ctl => constant64_op_net,
    diag4sevr_ctl => constant64_op_net,
    diag5sevr_ctl => constant64_op_net,
    diag6sevr_ctl => constant64_op_net,
    diag7sevr_ctl => constant64_op_net,
    diag8sevr_ctl => constant64_op_net,
    diag5fixed_x0 => constant4_op_net,
    diag7fixed_x0 => constant2_op_net_x0,
    diag4fixed_x0 => constant5_op_net,
    diag3fixed_x0 => constant6_op_net,
    diag2fixed_x0 => constant7_op_net,
    diag1fixed_x0 => constant8_op_net,
    diag8fixed_x0 => constant1_op_net_x0,
    diagnsync_ctl => constant32_op_net,
    diag1sevr_ctl => constant64_op_net,
    diag1data => mux2_y_net,
    diag1fixed => convert4_dout_net_x1,
    diag1sevr => convert13_dout_net,
    diag2data => mux4_y_net,
    diag2fixed => convert6_dout_net_x0,
    diag2sevr => convert14_dout_net,
    diag3data => mux5_y_net,
    diag3fixed => convert7_dout_net_x0,
    diag3sevr => convert15_dout_net,
    diag4data => mux6_y_net,
    diag4fixed => convert8_dout_net,
    diag4sevr => convert16_dout_net,
    diag5data => mux7_y_net,
    diag5fixed => convert9_dout_net_x0,
    diag5sevr => convert17_dout_net,
    diag6data => mux8_y_net,
    diag6fixed => convert10_dout_net_x1,
    diag6sevr => convert18_dout_net,
    diag7data => mux9_y_net,
    diag7fixed => convert11_dout_net_x0,
    diag7sevr => convert19_dout_net,
    diag8data_x0 => mux3_y_net,
    diag8fixed => convert12_dout_net,
    diag8sevr => convert20_dout_net,
    diagnclk => convert2_dout_net_x3,
    diagnrst => convert_dout_net_x1,
    diagnsync => convert1_dout_net_x1,
    wfdata_0_x0 => convert27_dout_net,
    wfdata_1_x0 => convert28_dout_net,
    wfdata_2_x0 => convert29_dout_net,
    wfdata_3_x0 => convert30_dout_net,
    wfdata_4_x0 => convert31_dout_net,
    wfdata_5_x0 => convert32_dout_net,
    wfdata_6_x0 => convert33_dout_net,
    wfdata_7_x0 => convert34_dout_net,
    wfvalid_0_x0 => convert35_dout_net,
    wfvalid_1_x0 => convert36_dout_net,
    wfvalid_2_x0 => convert37_dout_net,
    wfvalid_3_x0 => convert38_dout_net,
    wfvalid_4_x0 => convert39_dout_net,
    wfvalid_5_x0 => convert40_dout_net,
    wfvalid_6_x0 => convert41_dout_net,
    wfvalid_7_x0 => convert42_dout_net,
    diag9fixed => convert54_dout_net,
    diag10fixed => convert55_dout_net,
    diag11fixed => convert56_dout_net,
    diag12fixed => convert57_dout_net,
    diag13fixed => convert58_dout_net,
    diag14fixed => convert51_dout_net,
    diag15fixed => convert52_dout_net,
    diag16fixed => convert53_dout_net,
    diag26fixed => convert67_dout_net,
    diag27fixed => convert68_dout_net,
    diag28fixed => convert69_dout_net,
    diag29fixed => convert70_dout_net,
    diag30fixed => convert63_dout_net,
    diag31fixed => convert64_dout_net,
    diag17fixed => convert62_dout_net,
    diag18fixed => convert71_dout_net,
    diag19fixed => convert72_dout_net,
    diag20fixed => convert73_dout_net,
    diag21fixed => convert74_dout_net,
    diag22fixed => convert59_dout_net,
    diag23fixed => convert60_dout_net,
    diag24fixed => convert61_dout_net,
    diag25fixed => convert66_dout_net,
    diag9sevr => convert65_dout_net,
    diag10sevr => convert75_dout_net,
    diag11sevr => convert76_dout_net,
    diag12sevr => convert77_dout_net,
    diag13sevr => convert78_dout_net,
    diag14sevr => convert79_dout_net,
    diag15sevr => convert80_dout_net,
    diag16sevr => convert81_dout_net,
    diag26sevr => convert91_dout_net,
    diag27sevr => convert92_dout_net,
    diag28sevr => convert93_dout_net,
    diag29sevr => convert94_dout_net,
    diag30sevr => convert95_dout_net,
    diag31sevr => convert96_dout_net,
    diag17sevr => convert82_dout_net,
    diag18sevr => convert83_dout_net,
    diag19sevr => convert84_dout_net,
    diag20sevr => convert85_dout_net,
    diag21sevr => convert86_dout_net,
    diag22sevr => convert87_dout_net,
    diag23sevr => convert88_dout_net,
    diag24sevr => convert89_dout_net,
    diag25sevr => convert90_dout_net
  );
  cav1 : entity work.appmodel_cav1 
  port map (
    pa_stream_1 => amp_x0,
    iq_stream_1 => ddci_x0,
    pa_stream_2 => phase_x1,
    pa_stream_3 => channel,
    iq_stream_2 => ddcq_x0,
    iq_stream_3 => ddcchannel_x0,
    cav1_p1_chan_sel => register29_q_net,
    cav1_p1_cal_coef => register1_q_net_x1,
    cav1_nco_phase_reset => register35_q_net_x0,
    cav1_p2_chan_sel => register30_q_net,
    rf_ref_amp => down_sample1_q_net_x5,
    rf_ref_phase => down_sample_q_net_x5,
    rf_ref_q => down_sample_q_net_x4,
    cav1_nco_phase_adj => register36_q_net_x0,
    cav1_p1_window_start => register31_q_net,
    cav1_p1_window_stop => register32_q_net,
    rf_ref_i => down_sample1_q_net_x4,
    cav1_p2_window_start => register33_q_net,
    cav1_p2_window_stop => register34_q_net_x0,
    cav1_p2_cal_coef => register2_q_net_x1,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    c1p2_pt_window => convert11_dout_net,
    cav1_p2_dc_tvalid => convert2_dout_net,
    cav1_p1_dc_real => convert6_dout_net,
    cav1_p1_dc_img => convert5_dout_net,
    cav1_p1_dc_freq => convert_dout_net_x5,
    c1p1_freq_err => convert_dout_net_x5,
    flo_c1p1_window => convert2_dout_net_x5,
    cav1_p1_delayed_dc_img => dual_port_ram_doutb_net_x1,
    cav1_p1_delayed_dc_real => dual_port_ram1_doutb_net_x1,
    cav1_p1_ref_phase_out => register11_q_net_x0,
    c1p2_pt_cntr => counter_op_net,
    cav1_p2_dc_real => convert1_dout_net,
    cav1_p2_dc_img => convert_dout_net,
    cav1_p2_dc_freq => convert_dout_net_x4,
    cav1_p2_delayed_dc_img => dual_port_ram_doutb_net_x2,
    c1p2_integral_logic => convert5_dout_net_x0,
    cav1_p2_delayed_dc_real => dual_port_ram1_doutb_net_x2,
    cav2_p2_ref_phase_out => register11_q_net_x1,
    cav1_p2_integrated_ref_i => convert2_dout_net_x1,
    cav1_p2_integrated_ref_q => convert4_dout_net,
    c1p1_window_func => addsub3_s_net_x3,
    cav1_p2_if_amp => down_sample1_q_net_x6,
    cav1_p2_if_phase => down_sample_q_net_x8,
    cav1_p2_if_i => down_sample1_q_net_x7,
    cav1_p2_if_q => down_sample_q_net_x6,
    cav1_p2_integrated_i => convert9_dout_net_x1,
    cav1_p2_integrated_q => convert10_dout_net,
    cav1_p2_comparison_i => addsub_s_net_x0,
    cav1_p2_comparison_q => addsub_s_net_x0,
    cav1_p2_comparison_phase => addsub_s_net_x0,
    dsp_cav1_reset => convert3_dout_net,
    c1p2_window_func => addsub3_s_net_x4,
    cav1_nco_fb => convert_dout_net_x4,
    cav1_p1_windowed_ref_i => mult4_p_net_x2,
    cav1_p1_windowed_ref_q => mult5_p_net_x2,
    cav1_p1_windowed_img => mult2_p_net_x2,
    cav1_p1_windowed_real => mult_p_net_x5,
    cav1_p1_integrated_ref_i => convert2_dout_net_x2,
    cav1_p1_integrated_ref_q => convert4_dout_net_x0,
    cav1_p1_integrated_i => convert9_dout_net_x2,
    cav1_p1_integrated_q => convert10_dout_net_x0,
    cav1_p1_comparison_i => addsub_s_net,
    c1p2_delay_match => constant2_op_net,
    cav1_p1_comparison_q => addsub_s_net,
    cav1_p1_comparison_phase => addsub_s_net,
    c1p1_pt_window => convert11_dout_net_x2,
    c1p1_pt_cntr => counter_op_net_x1,
    c1p1_integral_logic => convert5_dout_net_x2,
    c1p1_delay_match => constant1_op_net,
    cav1_p1_phase_out => register13_q_net,
    cav1_p1_amp_out => register14_q_net,
    flo_c1p2_window => convert2_dout_net_x0,
    cav1_p1_if_amp => down_sample1_q_net,
    cav1_p2_windowed_img => mult2_p_net_x3,
    cav1_p2_windowed_real => mult_p_net_x6,
    cav1_p2_windowed_ref_i => mult4_p_net_x1,
    cav1_p2_windowed_ref_q => mult5_p_net_x1,
    cav1_p2_phase_out => register13_q_net_x0,
    cav1_p2_amp_out => register14_q_net_x0,
    cav1_p1_if_phase => down_sample_q_net,
    cav1_p1_if_i => down_sample1_q_net_x8,
    cav1_p1_if_q => down_sample_q_net_x7,
    gateway_out3_x5 => nco_sin,
    gateway_out4_x1 => register9_q_net,
    gateway_out5_x3 => nco_cos,
    gateway_out10_x1 => mult2_p_net,
    gateway_out15_x1 => convert_dout_net_x0,
    gateway_out16_x1 => convert1_dout_net_x0,
    gateway_out3_x6 => nco_sin,
    gateway_out4_x2 => phase_x0,
    gateway_out5_x4 => nco_cos,
    gateway_out6_x3 => cordic_6_0_m_axis_dout_tdata_real_net,
    gateway_out7_x3 => fir_compiler_7_2_m_axis_data_tdata_real_net,
    gateway_out8_x5 => fir_compiler_7_2_m_axis_data_tvalid_net,
    gateway_out_x2 => inverter_op_net,
    gateway_out1_x6 => convert2_dout_net_x1,
    gateway_out10_x0 => mult4_p_net_x1,
    gateway_out11_x2 => register1_q_net,
    gateway_out12_x0 => convert4_dout_net,
    gateway_out13_x0 => register12_q_net_x2,
    gateway_out14_x0 => mult5_p_net_x1,
    gateway_out15_x0 => register2_q_net_x0,
    gateway_out16_x0 => inverter3_op_net,
    gateway_out17_x0 => accumulator3_q_net,
    gateway_out2_x6 => inverter2_op_net,
    gateway_out22_x0 => convert9_dout_net_x1,
    gateway_out23_x0 => convert10_dout_net,
    gateway_out3_x3 => accumulator_q_net,
    gateway_out4_x0 => accumulator2_q_net,
    gateway_out5_x1 => mult2_p_net_x3,
    gateway_out6_x0 => inverter1_op_net,
    gateway_out7_x0 => accumulator1_q_net,
    gateway_out8_x1 => mult_p_net_x6,
    gateway_out9 => register11_q_net_x2,
    gateway_out_x1 => inverter_op_net_x0,
    gateway_out1_x3 => convert2_dout_net_x2,
    gateway_out10 => mult4_p_net_x2,
    gateway_out11_x1 => register1_q_net_x0,
    gateway_out12 => convert4_dout_net_x0,
    gateway_out13 => register12_q_net,
    gateway_out14 => mult5_p_net_x2,
    gateway_out15 => register2_q_net,
    gateway_out16 => inverter3_op_net_x0,
    gateway_out17 => accumulator3_q_net_x0,
    gateway_out2_x3 => inverter2_op_net_x0,
    gateway_out22 => convert9_dout_net_x2,
    gateway_out23 => convert10_dout_net_x0,
    gateway_out3_x2 => accumulator_q_net_x0,
    gateway_out4 => accumulator2_q_net_x0,
    gateway_out5_x0 => mult2_p_net_x2,
    gateway_out6 => inverter1_op_net_x0,
    gateway_out7 => accumulator1_q_net_x0,
    gateway_out8_x4 => mult_p_net_x5,
    gateway_out9_x0 => register11_q_net,
    gateway_out1_x5 => delay5_q_net,
    gateway_out2_x5 => delay3_q_net,
    gateway_out27_x2 => relational4_op_net,
    gateway_out28_x2 => relational3_op_net,
    gateway_out29_x2 => convert11_dout_net,
    gateway_out3_x4 => convert7_dout_net,
    gateway_out5_x2 => convert5_dout_net_x0,
    gateway_out24_x0 => convert5_dout_net_x2,
    gateway_out25_x0 => convert10_dout_net_x0,
    gateway_out26_x0 => convert9_dout_net_x2,
    gateway_out6_x1 => convert5_dout_net_x2,
    gateway_out7_x2 => convert4_dout_net_x0,
    gateway_out8_x3 => convert2_dout_net_x2,
    gateway_out24 => convert5_dout_net_x0,
    gateway_out25 => convert10_dout_net,
    gateway_out26 => convert9_dout_net_x1,
    gateway_out6_x2 => convert5_dout_net_x0,
    gateway_out7_x1 => convert4_dout_net,
    gateway_out8_x2 => convert2_dout_net_x1,
    gateway_out1_x4 => delay5_q_net_x5,
    gateway_out2_x4 => delay3_q_net_x5,
    gateway_out27_x1 => relational4_op_net_x1,
    gateway_out28_x1 => relational3_op_net_x1,
    gateway_out29_x1 => convert11_dout_net_x2,
    gateway_out3_x0 => convert7_dout_net_x2,
    gateway_out5 => convert5_dout_net_x2,
    gateway_out34_x0 => convert11_dout_net_x2,
    gateway_out35_x0 => mult4_p_net_x2,
    gateway_out37_x0 => convert11_dout_net_x2,
    gateway_out38_x0 => mult5_p_net_x2,
    gateway_out34 => convert11_dout_net,
    gateway_out35 => mult4_p_net_x1,
    gateway_out37 => convert11_dout_net,
    gateway_out38 => mult5_p_net_x1,
    gateway_out11_x0 => convert_dout_net_x4,
    gateway_out19_x0 => mult3_p_net_x1,
    gateway_out20_x0 => delay3_q_net_x3,
    gateway_out8 => divide_op_net_x1,
    gateway_out27 => addsub3_s_net_x5,
    gateway_out28 => register_q_net_x1,
    gateway_out29 => register1_q_net_x6,
    gateway_out3 => mult1_p_net_x1,
    gateway_out => mult3_p_net_x1,
    gateway_out1_x0 => relational1_op_net_x1,
    gateway_out2_x0 => delay5_q_net_x3,
    gateway_out1 => mult_p_net_x3,
    gateway_out2 => register2_q_net_x6,
    gateway_out11 => convert_dout_net_x5,
    gateway_out19 => mult3_p_net_x2,
    gateway_out20 => delay3_q_net_x4,
    gateway_out8_x0 => divide_op_net_x2,
    gateway_out27_x0 => addsub3_s_net_x6,
    gateway_out28_x0 => register_q_net_x2,
    gateway_out29_x0 => register1_q_net_x7,
    gateway_out3_x1 => mult1_p_net_x2,
    gateway_out_x0 => mult3_p_net_x2,
    gateway_out1_x2 => relational1_op_net_x2,
    gateway_out2_x2 => delay5_q_net_x4,
    gateway_out1_x1 => mult_p_net_x4,
    gateway_out2_x1 => register2_q_net_x7
  );
  cav2 : entity work.appmodel_cav2 
  port map (
    pa_stream_1 => amp_x0,
    iq_stream_1 => ddci_x0,
    pa_stream_2 => phase_x1,
    pa_stream_3 => channel,
    iq_stream_2 => ddcq_x0,
    iq_stream_3 => ddcchannel_x0,
    cav2_p1_chan_sel => register29_q_net_x1,
    cav2_nco_phase_reset => register35_q_net,
    cav2_p2_chan_sel => register30_q_net_x0,
    rf_ref_amp => down_sample1_q_net_x5,
    rf_ref_phase => down_sample_q_net_x5,
    rf_ref_q => down_sample_q_net_x4,
    cav2_nco_phase_adj => register36_q_net,
    rf_ref_i => down_sample1_q_net_x4,
    cav2_p1_window_start => register31_q_net_x0,
    cav2_p1_window_stop => register32_q_net_x0,
    cav2_p1_cal_coef => register1_q_net_x3,
    cav2_p2_cal_coef => register2_q_net_x3,
    cav2_p2_window_start => register33_q_net_x0,
    cav2_p2_window_stop => register34_q_net,
    cav1_p2_if_i => down_sample1_q_net_x7,
    cav1_p2_if_q => down_sample_q_net_x6,
    flo_c1p2_window => convert2_dout_net_x0,
    c1p2_pt_cntr => counter_op_net,
    cav1_p2_dc_tvalid => convert2_dout_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    c2p2_pt_window => convert11_dout_net_x3,
    flo_c2p1_window => convert2_dout_net_x4,
    cav2_p1_dc_real => convert1_dout_net_x2,
    cav2_p1_dc_img => convert5_dout_net_x4,
    cav2_p1_dc_freq => convert_dout_net_x3,
    c2p1_freq_err => convert_dout_net_x3,
    c2p1_window_func => addsub3_s_net_x1,
    c2p2_pt_cntr => counter_op_net_x2,
    c2p2_integral_logic => convert5_dout_net_x3,
    c2p2_delay_match => constant2_op_net_x1,
    cav2_p2_delayed_dc_img => dual_port_ram_doutb_net_x0,
    cav2_p2_delayed_dc_real => dual_port_ram1_doutb_net_x0,
    cav2_p1_delayed_dc_img => dual_port_ram_doutb_net,
    cav2_p2_dc_real => convert2_dout_net_x8,
    cav2_p2_dc_img => convert6_dout_net_x1,
    cav2_p2_dc_freq => convert_dout_net_x2,
    cav2_p2_phase_out => register13_q_net_x2,
    cav2_p2_amp_out => register14_q_net_x2,
    cav2_p2_comparison_i => addsub_s_net_x1,
    cav2_p2_comparison_q => addsub_s_net_x1,
    cav2_p2_comparison_phase => addsub_s_net_x1,
    cav2_p1_delayed_dc_real => dual_port_ram1_doutb_net,
    cav2_p2_if_amp => down_sample1_q_net_x1,
    cav2_p2_if_phase => down_sample_q_net_x1,
    cav2_p2_if_i => down_sample1_q_net_x2,
    cav2_p2_if_q => down_sample_q_net_x2,
    cav1_p2_ref_phase_out => register11_q_net_x4,
    cav2_p2_integrated_ref_i => convert2_dout_net_x9,
    cav2_p2_integrated_ref_q => convert4_dout_net_x3,
    cav2_p2_integrated_i => convert9_dout_net_x5,
    dsp_cav2_reset => convert3_dout_net_x0,
    cav2_p2_integrated_q => convert10_dout_net_x3,
    cav2_p1_windowed_ref_i => mult4_p_net,
    cav2_p1_windowed_ref_q => mult5_p_net,
    cav2_p1_windowed_img => mult2_p_net_x0,
    cav2_p1_windowed_real => mult_p_net,
    cav2_p1_integrated_ref_i => convert2_dout_net_x6,
    cav2_p1_integrated_ref_q => convert4_dout_net_x2,
    cav2_p1_integrated_i => convert9_dout_net_x3,
    cav2_p1_integrated_q => convert10_dout_net_x2,
    cav2_p1_comparison_i => addsub_s_net_x2,
    cav2_p1_ref_phase_out => register11_q_net_x3,
    cav2_p1_comparison_q => addsub_s_net_x2,
    cav2_p1_comparison_phase => addsub_s_net_x2,
    c2p1_pt_window => convert11_dout_net_x1,
    c2p1_pt_cntr => counter_op_net_x0,
    c2p1_integral_logic => convert5_dout_net_x1,
    c2p1_delay_match => constant1_op_net_x1,
    cav2_p1_phase_out => register13_q_net_x1,
    cav2_p1_amp_out => register14_q_net_x1,
    flo_c2p2_window => convert2_dout_net_x7,
    cav2_p1_if_amp => down_sample1_q_net_x0,
    c2p2_window_func => addsub3_s_net,
    cav2_nco_fb => convert_dout_net_x2,
    cav2_p2_windowed_img => mult2_p_net_x1,
    cav2_p2_windowed_real => mult_p_net_x0,
    cav2_p2_windowed_ref_i => mult4_p_net_x0,
    cav2_p2_windowed_ref_q => mult5_p_net_x0,
    cav2_p1_if_phase => down_sample_q_net_x0,
    cav2_p1_if_i => down_sample1_q_net_x3,
    cav2_p1_if_q => down_sample_q_net_x3,
    gateway_out10_x1 => mult2_p_net_x4,
    gateway_out15_x1 => convert_dout_net_x6,
    gateway_out16_x1 => convert1_dout_net_x3,
    gateway_out3_x5 => nco_sin_x0,
    gateway_out4_x1 => phase_x2,
    gateway_out5_x3 => nco_cos_x0,
    gateway_out6_x3 => cordic_6_0_m_axis_dout_tdata_real_net_x0,
    gateway_out7_x3 => fir_compiler_7_2_m_axis_data_tdata_real_net_x0,
    gateway_out8_x5 => fir_compiler_7_2_m_axis_data_tvalid_net_x0,
    gateway_out_x2 => inverter_op_net_x2,
    gateway_out1_x6 => convert2_dout_net_x9,
    gateway_out10_x0 => mult4_p_net_x0,
    gateway_out11_x2 => register1_q_net_x9,
    gateway_out12_x0 => convert4_dout_net_x3,
    gateway_out13_x0 => register12_q_net_x5,
    gateway_out14_x0 => mult5_p_net_x0,
    gateway_out15_x0 => register2_q_net_x8,
    gateway_out16_x0 => inverter3_op_net_x2,
    gateway_out17_x0 => accumulator3_q_net_x2,
    gateway_out2_x6 => inverter2_op_net_x2,
    gateway_out22_x0 => convert9_dout_net_x5,
    gateway_out23_x0 => convert10_dout_net_x3,
    gateway_out3_x3 => accumulator_q_net_x2,
    gateway_out4_x0 => accumulator2_q_net_x2,
    gateway_out5_x1 => mult2_p_net_x1,
    gateway_out6_x0 => inverter1_op_net_x2,
    gateway_out7 => accumulator1_q_net_x2,
    gateway_out8_x1 => mult_p_net_x0,
    gateway_out9 => register11_q_net_x5,
    gateway_out_x1 => inverter_op_net_x1,
    gateway_out1_x3 => convert2_dout_net_x6,
    gateway_out10 => mult4_p_net,
    gateway_out11_x1 => register1_q_net_x8,
    gateway_out12 => convert4_dout_net_x2,
    gateway_out13 => register12_q_net_x6,
    gateway_out14 => mult5_p_net,
    gateway_out15 => register2_q_net_x9,
    gateway_out16 => inverter3_op_net_x1,
    gateway_out17 => accumulator3_q_net_x1,
    gateway_out2_x3 => inverter2_op_net_x1,
    gateway_out22 => convert9_dout_net_x3,
    gateway_out23 => convert10_dout_net_x2,
    gateway_out3_x2 => accumulator_q_net_x1,
    gateway_out4 => accumulator2_q_net_x1,
    gateway_out5_x0 => mult2_p_net_x0,
    gateway_out6 => inverter1_op_net_x1,
    gateway_out7_x2 => accumulator1_q_net_x1,
    gateway_out8_x4 => mult_p_net,
    gateway_out9_x0 => register11_q_net_x6,
    gateway_out1_x5 => delay5_q_net_x6,
    gateway_out2_x5 => delay3_q_net_x6,
    gateway_out27_x2 => relational4_op_net_x2,
    gateway_out28_x2 => relational3_op_net_x2,
    gateway_out29_x2 => convert11_dout_net_x3,
    gateway_out3_x4 => convert7_dout_net_x3,
    gateway_out5_x2 => convert5_dout_net_x3,
    gateway_out24_x0 => convert5_dout_net_x1,
    gateway_out25 => convert10_dout_net_x2,
    gateway_out26_x0 => convert9_dout_net_x3,
    gateway_out6_x2 => convert5_dout_net_x1,
    gateway_out7_x1 => convert4_dout_net_x2,
    gateway_out8_x3 => convert2_dout_net_x6,
    gateway_out24 => convert5_dout_net_x3,
    gateway_out25_x0 => convert10_dout_net_x3,
    gateway_out26 => convert9_dout_net_x5,
    gateway_out6_x1 => convert5_dout_net_x3,
    gateway_out7_x0 => convert4_dout_net_x3,
    gateway_out8_x2 => convert2_dout_net_x9,
    gateway_out1_x4 => delay5_q_net_x1,
    gateway_out2_x4 => delay3_q_net_x2,
    gateway_out27_x0 => relational4_op_net_x0,
    gateway_out28_x0 => relational3_op_net_x0,
    gateway_out29_x0 => convert11_dout_net_x1,
    gateway_out3_x0 => convert7_dout_net_x1,
    gateway_out5 => convert5_dout_net_x1,
    gateway_out34_x0 => convert11_dout_net_x1,
    gateway_out35_x0 => mult4_p_net,
    gateway_out37_x0 => convert11_dout_net_x1,
    gateway_out38_x0 => mult5_p_net,
    gateway_out34 => convert11_dout_net_x3,
    gateway_out35 => mult4_p_net_x0,
    gateway_out37 => convert11_dout_net_x3,
    gateway_out38 => mult5_p_net_x0,
    gateway_out11_x0 => convert_dout_net_x2,
    gateway_out19 => mult3_p_net,
    gateway_out20 => delay3_q_net_x0,
    gateway_out8 => divide_op_net,
    gateway_out27 => addsub3_s_net_x0,
    gateway_out28 => register_q_net,
    gateway_out29 => register1_q_net_x4,
    gateway_out3 => mult1_p_net,
    gateway_out => mult3_p_net,
    gateway_out1_x0 => relational1_op_net,
    gateway_out2_x0 => delay5_q_net_x0,
    gateway_out1 => mult_p_net_x1,
    gateway_out2 => register2_q_net_x4,
    gateway_out11 => convert_dout_net_x3,
    gateway_out19_x0 => mult3_p_net_x0,
    gateway_out20_x0 => delay3_q_net_x1,
    gateway_out8_x0 => divide_op_net_x0,
    gateway_out27_x1 => addsub3_s_net_x2,
    gateway_out28_x1 => register_q_net_x0,
    gateway_out29_x1 => register1_q_net_x5,
    gateway_out3_x1 => mult1_p_net_x0,
    gateway_out_x0 => mult3_p_net_x0,
    gateway_out1_x2 => relational1_op_net_x0,
    gateway_out2_x2 => delay5_q_net_x2,
    gateway_out1_x1 => mult_p_net_x2,
    gateway_out2_x1 => register2_q_net_x5
  );
  rflib_input : entity work.appmodel_rflib_input 
  port map (
    amp => amp_net,
    ddcchannel => ddcchannel_net,
    ddci => ddci_net,
    ddcq => ddcq_net,
    phase => phase_net,
    phaseampchannel => phaseampchannel_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    pa_out_1 => amp_x0,
    iq_out_1 => ddci_x0,
    pa_out_2 => phase_x1,
    pa_out_3 => channel,
    iq_out_2 => ddcq_x0,
    iq_out_3 => ddcchannel_x0
  );
  ref : entity work.appmodel_ref 
  port map (
    in1_1 => amp_x0,
    in2_1 => ddci_x0,
    in1_2 => phase_x1,
    in1_3 => channel,
    in2_2 => ddcq_x0,
    in2_3 => ddcchannel_x0,
    rf_ref_chan_sel => register2_q_net_x2,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    ref_amp => down_sample1_q_net_x5,
    ref_phi => down_sample_q_net_x5,
    ref_i => down_sample1_q_net_x4,
    ref_q => down_sample_q_net_x4,
    rf_ref_amp => down_sample1_q_net_x5,
    rf_ref_phase => down_sample_q_net_x5,
    rf_ref_i => down_sample1_q_net_x4,
    rf_ref_q => down_sample_q_net_x4
  );
  constant_x0 : entity work.sysgen_constant_5c16ad887f 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant_op_net
  );
  constant13 : entity work.sysgen_constant_96e430d046 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant13_op_net
  );
  constant16 : entity work.sysgen_constant_da1d4aca8c 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant16_op_net
  );
  constant17 : entity work.sysgen_constant_b6f4743585 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant17_op_net
  );
  constant18 : entity work.sysgen_constant_4251757c3a 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant18_op_net
  );
  constant19 : entity work.sysgen_constant_f7aadbb9a8 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant19_op_net
  );
  constant20 : entity work.sysgen_constant_b268d11832 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant20_op_net
  );
  constant21 : entity work.sysgen_constant_669e1daaf5 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant21_op_net
  );
  constant22 : entity work.sysgen_constant_5c16ad887f 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant22_op_net
  );
  constant23 : entity work.sysgen_constant_96e430d046 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant23_op_net
  );
  constant24 : entity work.sysgen_constant_da1d4aca8c 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant24_op_net
  );
  constant25 : entity work.sysgen_constant_b6f4743585 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant25_op_net
  );
  constant27 : entity work.sysgen_constant_4251757c3a 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant27_op_net
  );
  constant28 : entity work.sysgen_constant_f7aadbb9a8 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant28_op_net
  );
  constant29 : entity work.sysgen_constant_b268d11832 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant29_op_net
  );
  constant30 : entity work.sysgen_constant_669e1daaf5 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant30_op_net
  );
  constant31 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant31_op_net_x0
  );
  constant32 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant32_op_net_x0
  );
  constant33 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant33_op_net
  );
  constant34 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant34_op_net
  );
  constant35 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant35_op_net
  );
  constant36 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant36_op_net
  );
  constant37 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant37_op_net
  );
  constant38 : entity work.sysgen_constant_5dffabb296 
  port map (
    clk => '0',
    ce => '0',
    clr => '0',
    op => constant38_op_net
  );
end structural;
-- Generated from Simulink block exampleModel_bus_axi/AppModel_struct
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_struct is
  port (
    cav1_nco_phase_adj : in std_logic_vector( 32-1 downto 0 );
    cav1_nco_phase_reset : in std_logic_vector( 1-1 downto 0 );
    cav1_p1_calibration_coeff : in std_logic_vector( 18-1 downto 0 );
    cav1_p1_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav1_p1_window_start : in std_logic_vector( 16-1 downto 0 );
    cav1_p1_window_stop : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_calibration_coeff : in std_logic_vector( 18-1 downto 0 );
    cav1_p2_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav1_p2_window_start : in std_logic_vector( 16-1 downto 0 );
    cav1_p2_window_stop : in std_logic_vector( 16-1 downto 0 );
    cav2_nco_phase_adj : in std_logic_vector( 32-1 downto 0 );
    cav2_nco_phase_reset : in std_logic_vector( 1-1 downto 0 );
    cav2_p1_calibration_coeff : in std_logic_vector( 18-1 downto 0 );
    cav2_p1_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav2_p1_window_start : in std_logic_vector( 16-1 downto 0 );
    cav2_p1_window_stop : in std_logic_vector( 16-1 downto 0 );
    cav2_p2_calibration_coeff : in std_logic_vector( 18-1 downto 0 );
    cav2_p2_chan_sel : in std_logic_vector( 4-1 downto 0 );
    cav2_p2_window_start : in std_logic_vector( 16-1 downto 0 );
    cav2_p2_window_stop : in std_logic_vector( 16-1 downto 0 );
    ref_window_start : in std_logic_vector( 16-1 downto 0 );
    ref_window_stop : in std_logic_vector( 16-1 downto 0 );
    rf_ref_chan_sel : in std_logic_vector( 4-1 downto 0 );
    scratchpad : in std_logic_vector( 32-1 downto 0 );
    amp : in std_logic_vector( 18-1 downto 0 );
    ddcchannel : in std_logic_vector( 4-1 downto 0 );
    ddci : in std_logic_vector( 18-1 downto 0 );
    ddcq : in std_logic_vector( 18-1 downto 0 );
    ddcsync : in std_logic_vector( 1-1 downto 0 );
    phase : in std_logic_vector( 18-1 downto 0 );
    phaseampchannel : in std_logic_vector( 4-1 downto 0 );
    phaseampsync : in std_logic_vector( 1-1 downto 0 );
    clk_1_x0 : in std_logic;
    ce_1_x0 : in std_logic;
    clk_12 : in std_logic;
    ce_12 : in std_logic;
    clk_1 : in std_logic;
    ce_1 : in std_logic;
    clk_8 : in std_logic;
    ce_8 : in std_logic;
    cav1_p1_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav1_p1_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_if_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p1_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav1_p1_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav1_p1_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav1_p2_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_i : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_if_q : out std_logic_vector( 18-1 downto 0 );
    cav1_p2_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav1_p2_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav1_p2_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav2_p1_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_if_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p1_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav2_p1_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav2_p1_phase_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_amp_out : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_comparison_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_comparison_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_comparison_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_dc_freq : out std_logic_vector( 32-1 downto 0 );
    cav2_p2_dc_img : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_dc_real : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_amp : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_i : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_phase : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_if_q : out std_logic_vector( 18-1 downto 0 );
    cav2_p2_integrated_i : out std_logic_vector( 20-1 downto 0 );
    cav2_p2_integrated_q : out std_logic_vector( 20-1 downto 0 );
    cav2_p2_phase_out : out std_logic_vector( 18-1 downto 0 );
    rf_ref_amp : out std_logic_vector( 18-1 downto 0 );
    rf_ref_i : out std_logic_vector( 18-1 downto 0 );
    rf_ref_phase : out std_logic_vector( 18-1 downto 0 );
    rf_ref_q : out std_logic_vector( 18-1 downto 0 );
    status_0 : out std_logic_vector( 32-1 downto 0 );
    diag1data : out std_logic_vector( 32-1 downto 0 );
    diag1fixed : out std_logic_vector( 1-1 downto 0 );
    diag1sevr : out std_logic_vector( 2-1 downto 0 );
    diag2data : out std_logic_vector( 32-1 downto 0 );
    diag2fixed : out std_logic_vector( 1-1 downto 0 );
    diag2sevr : out std_logic_vector( 2-1 downto 0 );
    diag3data : out std_logic_vector( 32-1 downto 0 );
    diag3fixed : out std_logic_vector( 1-1 downto 0 );
    diag3sevr : out std_logic_vector( 2-1 downto 0 );
    diag4data : out std_logic_vector( 32-1 downto 0 );
    diag4fixed : out std_logic_vector( 1-1 downto 0 );
    diag4sevr : out std_logic_vector( 2-1 downto 0 );
    diag5data : out std_logic_vector( 32-1 downto 0 );
    diag5fixed : out std_logic_vector( 1-1 downto 0 );
    diag5sevr : out std_logic_vector( 2-1 downto 0 );
    diag6data : out std_logic_vector( 32-1 downto 0 );
    diag6fixed : out std_logic_vector( 1-1 downto 0 );
    diag6sevr : out std_logic_vector( 2-1 downto 0 );
    diag7data : out std_logic_vector( 32-1 downto 0 );
    diag7fixed : out std_logic_vector( 1-1 downto 0 );
    diag7sevr : out std_logic_vector( 2-1 downto 0 );
    diag8data : out std_logic_vector( 32-1 downto 0 );
    diag8fixed : out std_logic_vector( 1-1 downto 0 );
    diag8sevr : out std_logic_vector( 2-1 downto 0 );
    diagnclk : out std_logic_vector( 1-1 downto 0 );
    diagnrst : out std_logic_vector( 1-1 downto 0 );
    diagnsync : out std_logic_vector( 1-1 downto 0 );
    wfdata_0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_1 : out std_logic_vector( 32-1 downto 0 );
    wfdata_2 : out std_logic_vector( 32-1 downto 0 );
    wfdata_3 : out std_logic_vector( 32-1 downto 0 );
    wfdata_4 : out std_logic_vector( 32-1 downto 0 );
    wfdata_5 : out std_logic_vector( 32-1 downto 0 );
    wfdata_6 : out std_logic_vector( 32-1 downto 0 );
    wfdata_7 : out std_logic_vector( 32-1 downto 0 );
    wfvalid_0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_1 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_2 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_3 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_4 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_5 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_6 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_7 : out std_logic_vector( 1-1 downto 0 );
    diag9fixed : out std_logic_vector( 1-1 downto 0 );
    diag10fixed : out std_logic_vector( 1-1 downto 0 );
    diag11fixed : out std_logic_vector( 1-1 downto 0 );
    diag12fixed : out std_logic_vector( 1-1 downto 0 );
    diag13fixed : out std_logic_vector( 1-1 downto 0 );
    diag14fixed : out std_logic_vector( 1-1 downto 0 );
    diag15fixed : out std_logic_vector( 1-1 downto 0 );
    diag16fixed : out std_logic_vector( 1-1 downto 0 );
    diag26fixed : out std_logic_vector( 1-1 downto 0 );
    diag27fixed : out std_logic_vector( 1-1 downto 0 );
    diag28fixed : out std_logic_vector( 1-1 downto 0 );
    diag29fixed : out std_logic_vector( 1-1 downto 0 );
    diag30fixed : out std_logic_vector( 1-1 downto 0 );
    diag31fixed : out std_logic_vector( 1-1 downto 0 );
    diag17fixed : out std_logic_vector( 1-1 downto 0 );
    diag18fixed : out std_logic_vector( 1-1 downto 0 );
    diag19fixed : out std_logic_vector( 1-1 downto 0 );
    diag20fixed : out std_logic_vector( 1-1 downto 0 );
    diag21fixed : out std_logic_vector( 1-1 downto 0 );
    diag22fixed : out std_logic_vector( 1-1 downto 0 );
    diag23fixed : out std_logic_vector( 1-1 downto 0 );
    diag24fixed : out std_logic_vector( 1-1 downto 0 );
    diag25fixed : out std_logic_vector( 1-1 downto 0 );
    diag9sevr : out std_logic_vector( 2-1 downto 0 );
    diag10sevr : out std_logic_vector( 2-1 downto 0 );
    diag11sevr : out std_logic_vector( 2-1 downto 0 );
    diag12sevr : out std_logic_vector( 2-1 downto 0 );
    diag13sevr : out std_logic_vector( 2-1 downto 0 );
    diag14sevr : out std_logic_vector( 2-1 downto 0 );
    diag15sevr : out std_logic_vector( 2-1 downto 0 );
    diag16sevr : out std_logic_vector( 2-1 downto 0 );
    diag26sevr : out std_logic_vector( 2-1 downto 0 );
    diag27sevr : out std_logic_vector( 2-1 downto 0 );
    diag28sevr : out std_logic_vector( 2-1 downto 0 );
    diag29sevr : out std_logic_vector( 2-1 downto 0 );
    diag30sevr : out std_logic_vector( 2-1 downto 0 );
    diag31sevr : out std_logic_vector( 2-1 downto 0 );
    diag17sevr : out std_logic_vector( 2-1 downto 0 );
    diag18sevr : out std_logic_vector( 2-1 downto 0 );
    diag19sevr : out std_logic_vector( 2-1 downto 0 );
    diag20sevr : out std_logic_vector( 2-1 downto 0 );
    diag21sevr : out std_logic_vector( 2-1 downto 0 );
    diag22sevr : out std_logic_vector( 2-1 downto 0 );
    diag23sevr : out std_logic_vector( 2-1 downto 0 );
    diag24sevr : out std_logic_vector( 2-1 downto 0 );
    diag25sevr : out std_logic_vector( 2-1 downto 0 );
    gateway_out3_x0 : out std_logic_vector( 26-1 downto 0 );
    gateway_out39 : out std_logic_vector( 18-1 downto 0 );
    gateway_out4_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out40 : out std_logic_vector( 18-1 downto 0 );
    gateway_out5_x1 : out std_logic_vector( 26-1 downto 0 );
    gateway_out10_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out16_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out3_x1 : out std_logic_vector( 26-1 downto 0 );
    gateway_out4_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out5 : out std_logic_vector( 26-1 downto 0 );
    gateway_out6 : out std_logic_vector( 18-1 downto 0 );
    gateway_out7 : out std_logic_vector( 34-1 downto 0 );
    gateway_out8 : out std_logic_vector( 1-1 downto 0 );
    gateway_out : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x8 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3_x9 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x7 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6_x7 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x7 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x9 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out1_x9 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x9 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x10 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x8 : out std_logic_vector( 1-1 downto 0 );
    gateway_out24_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x5 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x5 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x7 : out std_logic_vector( 20-1 downto 0 );
    gateway_out24_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x6 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x8 : out std_logic_vector( 20-1 downto 0 );
    gateway_out1_x8 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x7 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x8 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out32_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out36_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out32_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out36_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x5 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19_x1 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x11 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x5 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x5 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29_x5 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x12 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x6 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x12 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x14 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x13 : out std_logic_vector( 10-1 downto 0 );
    gateway_out11_x6 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19_x2 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x12 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x6 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x6 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29_x6 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x5 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x14 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x10 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x10 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x11 : out std_logic_vector( 10-1 downto 0 );
    gateway_out39_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out40_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out10_x3 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x3 : out std_logic_vector( 18-1 downto 0 );
    gateway_out16_x3 : out std_logic_vector( 18-1 downto 0 );
    gateway_out3_x11 : out std_logic_vector( 26-1 downto 0 );
    gateway_out4_x5 : out std_logic_vector( 18-1 downto 0 );
    gateway_out5_x9 : out std_logic_vector( 26-1 downto 0 );
    gateway_out6_x8 : out std_logic_vector( 18-1 downto 0 );
    gateway_out7_x8 : out std_logic_vector( 34-1 downto 0 );
    gateway_out8_x10 : out std_logic_vector( 1-1 downto 0 );
    gateway_out_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x11 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10_x4 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x12 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3_x3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x4 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x4 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x3 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4_x3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x3 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out1_x1 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x0 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out24 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out24_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x3 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x3 : out std_logic_vector( 20-1 downto 0 );
    gateway_out1_x2 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x1 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x5 : out std_logic_vector( 1-1 downto 0 );
    gateway_out32 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out36 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38 : out std_logic_vector( 18-1 downto 0 );
    gateway_out32_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35 : out std_logic_vector( 18-1 downto 0 );
    gateway_out36_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x6 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x2 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29_x2 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x7 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x3 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x5 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x4 : out std_logic_vector( 10-1 downto 0 );
    gateway_out11_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x5 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x5 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x2 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x5 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x7 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x6 : out std_logic_vector( 10-1 downto 0 )
  );
end appmodel_struct;
architecture structural of appmodel_struct is 
  signal cav1_nco_phase_reset_net : std_logic_vector( 1-1 downto 0 );
  signal register13_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_calibration_coeff_net : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_chan_sel_net : std_logic_vector( 4-1 downto 0 );
  signal register14_q_net : std_logic_vector( 18-1 downto 0 );
  signal register16_q_net : std_logic_vector( 18-1 downto 0 );
  signal register15_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav1_nco_phase_adj_net : std_logic_vector( 32-1 downto 0 );
  signal register9_q_net : std_logic_vector( 32-1 downto 0 );
  signal register8_q_net : std_logic_vector( 18-1 downto 0 );
  signal register7_q_net : std_logic_vector( 18-1 downto 0 );
  signal register3_q_net : std_logic_vector( 18-1 downto 0 );
  signal register5_q_net : std_logic_vector( 18-1 downto 0 );
  signal register4_q_net : std_logic_vector( 18-1 downto 0 );
  signal register6_q_net : std_logic_vector( 18-1 downto 0 );
  signal register10_q_net : std_logic_vector( 20-1 downto 0 );
  signal register11_q_net : std_logic_vector( 20-1 downto 0 );
  signal register12_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_window_start_net : std_logic_vector( 16-1 downto 0 );
  signal cav1_p1_window_stop_net : std_logic_vector( 16-1 downto 0 );
  signal register20_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_calibration_coeff_net : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_chan_sel_net : std_logic_vector( 4-1 downto 0 );
  signal register21_q_net : std_logic_vector( 18-1 downto 0 );
  signal register103_q_net : std_logic_vector( 32-1 downto 0 );
  signal register23_q_net : std_logic_vector( 18-1 downto 0 );
  signal register22_q_net : std_logic_vector( 18-1 downto 0 );
  signal register30_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal register29_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register28_q_net : std_logic_vector( 18-1 downto 0 );
  signal register24_q_net : std_logic_vector( 18-1 downto 0 );
  signal register26_q_net : std_logic_vector( 18-1 downto 0 );
  signal register25_q_net : std_logic_vector( 18-1 downto 0 );
  signal register1_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal register17_q_net : std_logic_vector( 20-1 downto 0 );
  signal register18_q_net : std_logic_vector( 20-1 downto 0 );
  signal register19_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_window_start_net : std_logic_vector( 16-1 downto 0 );
  signal cav1_p2_window_stop_net : std_logic_vector( 16-1 downto 0 );
  signal cav2_nco_phase_adj_net : std_logic_vector( 32-1 downto 0 );
  signal cav2_nco_phase_reset_net : std_logic_vector( 1-1 downto 0 );
  signal register93_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_calibration_coeff_net : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_chan_sel_net : std_logic_vector( 4-1 downto 0 );
  signal register94_q_net : std_logic_vector( 18-1 downto 0 );
  signal register96_q_net : std_logic_vector( 18-1 downto 0 );
  signal register95_q_net : std_logic_vector( 18-1 downto 0 );
  signal mux4_y_net : std_logic_vector( 32-1 downto 0 );
  signal register102_q_net : std_logic_vector( 18-1 downto 0 );
  signal register101_q_net : std_logic_vector( 18-1 downto 0 );
  signal register97_q_net : std_logic_vector( 18-1 downto 0 );
  signal register99_q_net : std_logic_vector( 18-1 downto 0 );
  signal register98_q_net : std_logic_vector( 18-1 downto 0 );
  signal register100_q_net : std_logic_vector( 18-1 downto 0 );
  signal register90_q_net : std_logic_vector( 20-1 downto 0 );
  signal register91_q_net : std_logic_vector( 20-1 downto 0 );
  signal register92_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_window_start_net : std_logic_vector( 16-1 downto 0 );
  signal cav2_p1_window_stop_net : std_logic_vector( 16-1 downto 0 );
  signal register121_q_net : std_logic_vector( 18-1 downto 0 );
  signal q_clk_net_x0 : std_logic;
  signal cav2_p2_calibration_coeff_net : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_chan_sel_net : std_logic_vector( 4-1 downto 0 );
  signal register122_q_net : std_logic_vector( 18-1 downto 0 );
  signal register124_q_net : std_logic_vector( 18-1 downto 0 );
  signal register123_q_net : std_logic_vector( 18-1 downto 0 );
  signal register131_q_net : std_logic_vector( 32-1 downto 0 );
  signal register130_q_net : std_logic_vector( 18-1 downto 0 );
  signal register129_q_net : std_logic_vector( 18-1 downto 0 );
  signal register125_q_net : std_logic_vector( 18-1 downto 0 );
  signal register127_q_net : std_logic_vector( 18-1 downto 0 );
  signal register126_q_net : std_logic_vector( 18-1 downto 0 );
  signal register128_q_net : std_logic_vector( 18-1 downto 0 );
  signal register118_q_net : std_logic_vector( 20-1 downto 0 );
  signal register119_q_net : std_logic_vector( 20-1 downto 0 );
  signal register120_q_net : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_window_start_net : std_logic_vector( 16-1 downto 0 );
  signal cav2_p2_window_stop_net : std_logic_vector( 16-1 downto 0 );
  signal ref_window_start_net : std_logic_vector( 16-1 downto 0 );
  signal ref_window_stop_net : std_logic_vector( 16-1 downto 0 );
  signal register76_q_net : std_logic_vector( 18-1 downto 0 );
  signal rf_ref_chan_sel_net : std_logic_vector( 4-1 downto 0 );
  signal register80_q_net : std_logic_vector( 18-1 downto 0 );
  signal register78_q_net : std_logic_vector( 18-1 downto 0 );
  signal register82_q_net : std_logic_vector( 18-1 downto 0 );
  signal scratchpad_net : std_logic_vector( 32-1 downto 0 );
  signal register27_q_net : std_logic_vector( 32-1 downto 0 );
  signal mux2_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert4_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert13_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert75_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert6_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert14_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux5_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert7_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert15_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux6_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert8_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert16_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux7_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert9_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert17_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux8_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert10_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert18_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux9_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert11_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert19_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mux3_y_net : std_logic_vector( 32-1 downto 0 );
  signal convert12_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert20_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert2_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert1_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert27_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert28_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert29_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert30_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert31_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert32_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert33_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert34_dout_net : std_logic_vector( 32-1 downto 0 );
  signal convert35_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert36_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert37_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert38_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert39_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert40_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert41_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert42_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert54_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert55_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert56_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert57_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert58_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert51_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert52_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert53_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert67_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert68_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert69_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert70_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert63_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert64_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert62_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert71_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert72_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert73_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert74_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert59_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert60_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert61_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert66_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert65_dout_net : std_logic_vector( 2-1 downto 0 );
  signal mult3_p_net_x1 : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net_x4 : std_logic_vector( 1-1 downto 0 );
  signal convert76_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert77_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert78_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert79_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert80_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert81_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert91_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert92_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert93_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert94_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert95_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert96_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert82_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert83_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert84_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert85_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert86_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert87_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert88_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert89_dout_net : std_logic_vector( 2-1 downto 0 );
  signal convert90_dout_net : std_logic_vector( 2-1 downto 0 );
  signal nco_sin : std_logic_vector( 26-1 downto 0 );
  signal down_sample1_q_net : std_logic_vector( 18-1 downto 0 );
  signal register9_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal down_sample_q_net_x8 : std_logic_vector( 18-1 downto 0 );
  signal nco_cos : std_logic_vector( 26-1 downto 0 );
  signal mult2_p_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal phase_x0 : std_logic_vector( 18-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_real_net : std_logic_vector( 18-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tdata_real_net_x0 : std_logic_vector( 34-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tvalid_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x7 : std_logic_vector( 20-1 downto 0 );
  signal mult4_p_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register1_q_net_x8 : std_logic_vector( 32-1 downto 0 );
  signal convert4_dout_net_x3 : std_logic_vector( 20-1 downto 0 );
  signal register12_q_net_x5 : std_logic_vector( 32-1 downto 0 );
  signal mult5_p_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net_x7 : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal convert9_dout_net_x4 : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net_x3 : std_logic_vector( 20-1 downto 0 );
  signal accumulator_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal mult2_p_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal inverter1_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal mult_p_net_x5 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x7 : std_logic_vector( 32-1 downto 0 );
  signal inverter_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x4 : std_logic_vector( 20-1 downto 0 );
  signal mult4_p_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal register1_q_net_x7 : std_logic_vector( 32-1 downto 0 );
  signal convert4_dout_net_x2 : std_logic_vector( 20-1 downto 0 );
  signal register12_q_net_x4 : std_logic_vector( 32-1 downto 0 );
  signal mult5_p_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net_x6 : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert9_dout_net_x2 : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net_x2 : std_logic_vector( 20-1 downto 0 );
  signal accumulator_q_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal mult2_p_net_x4 : std_logic_vector( 18-1 downto 0 );
  signal inverter1_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal mult_p_net_x6 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x4 : std_logic_vector( 32-1 downto 0 );
  signal delay5_q_net_x3 : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net_x3 : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert11_dout_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net_x4 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x6 : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net_x6 : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal convert11_dout_net_x3 : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net_x3 : std_logic_vector( 1-1 downto 0 );
  signal down_sample1_q_net_x4 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x6 : std_logic_vector( 32-1 downto 0 );
  signal mult3_p_net_x2 : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net_x5 : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net_x2 : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net_x5 : std_logic_vector( 32-1 downto 0 );
  signal register_q_net_x2 : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net_x9 : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x5 : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net_x3 : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x8 : std_logic_vector( 10-1 downto 0 );
  signal convert_dout_net_x4 : std_logic_vector( 32-1 downto 0 );
  signal divide_op_net_x1 : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net_x3 : std_logic_vector( 32-1 downto 0 );
  signal register_q_net_x1 : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net_x10 : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x4 : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net_x4 : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x9 : std_logic_vector( 10-1 downto 0 );
  signal mult2_p_net : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x5 : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal nco_sin_x0 : std_logic_vector( 26-1 downto 0 );
  signal phase_x1 : std_logic_vector( 18-1 downto 0 );
  signal nco_cos_x0 : std_logic_vector( 26-1 downto 0 );
  signal cordic_6_0_m_axis_dout_tdata_real_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tdata_real_net : std_logic_vector( 34-1 downto 0 );
  signal fir_compiler_7_2_m_axis_data_tvalid_net : std_logic_vector( 1-1 downto 0 );
  signal inverter_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x1 : std_logic_vector( 20-1 downto 0 );
  signal mult4_p_net : std_logic_vector( 18-1 downto 0 );
  signal register1_q_net_x3 : std_logic_vector( 32-1 downto 0 );
  signal convert4_dout_net_x0 : std_logic_vector( 20-1 downto 0 );
  signal register12_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal mult5_p_net : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert9_dout_net_x0 : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net_x0 : std_logic_vector( 20-1 downto 0 );
  signal accumulator_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net : std_logic_vector( 32-1 downto 0 );
  signal mult2_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal inverter1_op_net : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net : std_logic_vector( 32-1 downto 0 );
  signal mult_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal inverter_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x3 : std_logic_vector( 20-1 downto 0 );
  signal mult4_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register1_q_net_x4 : std_logic_vector( 32-1 downto 0 );
  signal convert4_dout_net_x1 : std_logic_vector( 20-1 downto 0 );
  signal register12_q_net_x3 : std_logic_vector( 32-1 downto 0 );
  signal mult5_p_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net_x3 : std_logic_vector( 32-1 downto 0 );
  signal inverter3_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal accumulator3_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal inverter2_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert9_dout_net_x1 : std_logic_vector( 20-1 downto 0 );
  signal convert10_dout_net_x1 : std_logic_vector( 20-1 downto 0 );
  signal accumulator_q_net : std_logic_vector( 32-1 downto 0 );
  signal accumulator2_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal mult2_p_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal inverter1_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal accumulator1_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal mult_p_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x3 : std_logic_vector( 32-1 downto 0 );
  signal delay5_q_net : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net : std_logic_vector( 1-1 downto 0 );
  signal convert11_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert5_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal delay3_q_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal relational4_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal relational3_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert11_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert7_dout_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal convert_dout_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal mult3_p_net : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal register_q_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net_x6 : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net_x2 : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x5 : std_logic_vector( 10-1 downto 0 );
  signal convert_dout_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal mult3_p_net_x0 : std_logic_vector( 33-1 downto 0 );
  signal delay3_q_net_x2 : std_logic_vector( 1-1 downto 0 );
  signal divide_op_net_x0 : std_logic_vector( 63-1 downto 0 );
  signal addsub3_s_net_x1 : std_logic_vector( 32-1 downto 0 );
  signal register_q_net : std_logic_vector( 33-1 downto 0 );
  signal register1_q_net_x5 : std_logic_vector( 33-1 downto 0 );
  signal mult1_p_net : std_logic_vector( 32-1 downto 0 );
  signal relational1_op_net : std_logic_vector( 1-1 downto 0 );
  signal delay5_q_net_x1 : std_logic_vector( 1-1 downto 0 );
  signal mult_p_net : std_logic_vector( 32-1 downto 0 );
  signal register2_q_net_x4 : std_logic_vector( 10-1 downto 0 );
  signal amp_net : std_logic_vector( 18-1 downto 0 );
  signal ddcchannel_net : std_logic_vector( 4-1 downto 0 );
  signal ddci_net : std_logic_vector( 18-1 downto 0 );
  signal ddcq_net : std_logic_vector( 18-1 downto 0 );
  signal ddcsync_net : std_logic_vector( 1-1 downto 0 );
  signal phase_net : std_logic_vector( 18-1 downto 0 );
  signal phaseampchannel_net : std_logic_vector( 4-1 downto 0 );
  signal phaseampsync_net : std_logic_vector( 1-1 downto 0 );
  signal d_ce_net_x0 : std_logic;
  signal d_clk_net : std_logic;
  signal q_ce_net : std_logic;
  signal q_clk_net : std_logic;
  signal d_ce_net : std_logic;
  signal dest_clk_net : std_logic;
  signal dest_ce_net : std_logic;
  signal c1p1_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal c1p1_if_amp : std_logic_vector( 18-1 downto 0 );
  signal c1p2_if_amp : std_logic_vector( 18-1 downto 0 );
  signal c1p1_if_phi : std_logic_vector( 18-1 downto 0 );
  signal c1p1_if_i : std_logic_vector( 18-1 downto 0 );
  signal c1p1_if_q : std_logic_vector( 18-1 downto 0 );
  signal c1p1_dc_i : std_logic_vector( 18-1 downto 0 );
  signal c1p1_dc_q : std_logic_vector( 18-1 downto 0 );
  signal c1p1_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal c1p1_integ_i : std_logic_vector( 20-1 downto 0 );
  signal c1p1_integ_q : std_logic_vector( 20-1 downto 0 );
  signal c1p1_phi_out : std_logic_vector( 18-1 downto 0 );
  signal c1p1_amp_out : std_logic_vector( 18-1 downto 0 );
  signal c1p1_comp_i : std_logic_vector( 18-1 downto 0 );
  signal c1p1_comp_q : std_logic_vector( 18-1 downto 0 );
  signal c1p1_comp_phi : std_logic_vector( 18-1 downto 0 );
  signal c1p2_if_phi : std_logic_vector( 18-1 downto 0 );
  signal c1p2_if_i : std_logic_vector( 18-1 downto 0 );
  signal c1p2_if_q : std_logic_vector( 18-1 downto 0 );
  signal c1p2_dc_i : std_logic_vector( 18-1 downto 0 );
  signal c1p2_dc_q : std_logic_vector( 18-1 downto 0 );
  signal c1p2_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal c1p2_integ_i : std_logic_vector( 20-1 downto 0 );
  signal c1p2_integ_q : std_logic_vector( 20-1 downto 0 );
  signal c1p2_phi_out : std_logic_vector( 18-1 downto 0 );
  signal c1p2_amp_out : std_logic_vector( 18-1 downto 0 );
  signal c1p2_comp_i : std_logic_vector( 18-1 downto 0 );
  signal c1p2_comp_q : std_logic_vector( 18-1 downto 0 );
  signal c1p2_comp_phi : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x8 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x7 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x5 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x4 : std_logic_vector( 18-1 downto 0 );
  signal convert6_dout_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert5_dout_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal addsub_s_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x7 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x6 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x6 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x5 : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal convert_dout_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal addsub_s_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal c1p2_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal c1p1_win_start : std_logic_vector( 16-1 downto 0 );
  signal c1p1_win_stop : std_logic_vector( 16-1 downto 0 );
  signal c1p2_win_start : std_logic_vector( 16-1 downto 0 );
  signal c1p2_win_stop : std_logic_vector( 16-1 downto 0 );
  signal c1_nco_reset : std_logic_vector( 1-1 downto 0 );
  signal c1p1_cal_coeff : std_logic_vector( 18-1 downto 0 );
  signal c1p2_cal_coeff : std_logic_vector( 18-1 downto 0 );
  signal c1_nco_phi : std_logic_vector( 32-1 downto 0 );
  signal register29_q_net_x0 : std_logic_vector( 4-1 downto 0 );
  signal register30_q_net : std_logic_vector( 4-1 downto 0 );
  signal register31_q_net : std_logic_vector( 16-1 downto 0 );
  signal register32_q_net : std_logic_vector( 16-1 downto 0 );
  signal register35_q_net : std_logic_vector( 1-1 downto 0 );
  signal register36_q_net : std_logic_vector( 32-1 downto 0 );
  signal register33_q_net : std_logic_vector( 16-1 downto 0 );
  signal register34_q_net : std_logic_vector( 16-1 downto 0 );
  signal register1_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register2_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal ref_amp : std_logic_vector( 18-1 downto 0 );
  signal ref_phi : std_logic_vector( 18-1 downto 0 );
  signal ref_i : std_logic_vector( 18-1 downto 0 );
  signal ref_q : std_logic_vector( 18-1 downto 0 );
  signal ref_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal register2_q_net : std_logic_vector( 4-1 downto 0 );
  signal c2p1_if_amp : std_logic_vector( 18-1 downto 0 );
  signal c2p2_if_amp : std_logic_vector( 18-1 downto 0 );
  signal c2p1_if_phi : std_logic_vector( 18-1 downto 0 );
  signal c2p1_if_i : std_logic_vector( 18-1 downto 0 );
  signal c2p1_if_q : std_logic_vector( 18-1 downto 0 );
  signal c2p1_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal c2p1_dc_i : std_logic_vector( 18-1 downto 0 );
  signal c2p1_dc_q : std_logic_vector( 18-1 downto 0 );
  signal c2p1_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal c2p1_integ_i : std_logic_vector( 20-1 downto 0 );
  signal c2p1_integ_q : std_logic_vector( 20-1 downto 0 );
  signal c2p1_phi_out : std_logic_vector( 18-1 downto 0 );
  signal c2p1_amp_out : std_logic_vector( 18-1 downto 0 );
  signal c2p1_comp_i : std_logic_vector( 18-1 downto 0 );
  signal c2p1_comp_q : std_logic_vector( 18-1 downto 0 );
  signal c2p1_comp_phi : std_logic_vector( 18-1 downto 0 );
  signal c2p2_if_phi : std_logic_vector( 18-1 downto 0 );
  signal c2p2_if_i : std_logic_vector( 18-1 downto 0 );
  signal c2p2_if_q : std_logic_vector( 18-1 downto 0 );
  signal c2p2_dc_i : std_logic_vector( 18-1 downto 0 );
  signal c2p2_dc_q : std_logic_vector( 18-1 downto 0 );
  signal c2p2_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal c2p2_integ_i : std_logic_vector( 20-1 downto 0 );
  signal c2p2_integ_q : std_logic_vector( 20-1 downto 0 );
  signal c2p2_phi_out : std_logic_vector( 18-1 downto 0 );
  signal c2p2_amp_out : std_logic_vector( 18-1 downto 0 );
  signal c2p2_comp_i : std_logic_vector( 18-1 downto 0 );
  signal c2p2_comp_q : std_logic_vector( 18-1 downto 0 );
  signal c2p2_comp_phi : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal convert1_dout_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal convert5_dout_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal addsub_s_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x3 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal down_sample1_q_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal down_sample_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net_x8 : std_logic_vector( 18-1 downto 0 );
  signal convert6_dout_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register13_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register14_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal addsub_s_net : std_logic_vector( 18-1 downto 0 );
  signal c2p2_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal c2p1_win_start : std_logic_vector( 16-1 downto 0 );
  signal c2p1_win_stop : std_logic_vector( 16-1 downto 0 );
  signal c2p2_win_start : std_logic_vector( 16-1 downto 0 );
  signal c2p2_win_stop : std_logic_vector( 16-1 downto 0 );
  signal c2_nco_reset : std_logic_vector( 1-1 downto 0 );
  signal c2p1_cal_coeff : std_logic_vector( 18-1 downto 0 );
  signal c2p2_cal_coeff : std_logic_vector( 18-1 downto 0 );
  signal c2_nco_phi : std_logic_vector( 32-1 downto 0 );
  signal register1_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register35_q_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal register36_q_net_x0 : std_logic_vector( 32-1 downto 0 );
  signal register33_q_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal register34_q_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal register2_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register29_q_net_x2 : std_logic_vector( 4-1 downto 0 );
  signal register30_q_net_x1 : std_logic_vector( 4-1 downto 0 );
  signal register31_q_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal register32_q_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal constant13_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant24_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant25_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant27_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant28_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant29_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant30_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant33_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant34_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant35_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant36_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant16_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant37_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant38_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant31_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant32_op_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal constant8_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant17_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant18_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant19_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant20_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant21_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant22_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant23_op_net : std_logic_vector( 18-1 downto 0 );
  signal constant64_op_net : std_logic_vector( 3-1 downto 0 );
  signal constant7_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant6_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant5_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant4_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant3_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant2_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant1_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant31_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant32_op_net : std_logic_vector( 1-1 downto 0 );
  signal constant1_op_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal counter_op_net_x2 : std_logic_vector( 16-1 downto 0 );
  signal addsub3_s_net_x4 : std_logic_vector( 33-1 downto 0 );
  signal constant2_op_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal counter_op_net_x1 : std_logic_vector( 16-1 downto 0 );
  signal addsub3_s_net_x6 : std_logic_vector( 33-1 downto 0 );
  signal dual_port_ram_doutb_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net_x2 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x6 : std_logic_vector( 18-1 downto 0 );
  signal convert2_dout_net_x6 : std_logic_vector( 1-1 downto 0 );
  signal dual_port_ram_doutb_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x5 : std_logic_vector( 18-1 downto 0 );
  signal convert3_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x9 : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x5 : std_logic_vector( 1-1 downto 0 );
  signal constant1_op_net_x1 : std_logic_vector( 16-1 downto 0 );
  signal counter_op_net_x0 : std_logic_vector( 16-1 downto 0 );
  signal addsub3_s_net_x2 : std_logic_vector( 33-1 downto 0 );
  signal constant2_op_net_x1 : std_logic_vector( 16-1 downto 0 );
  signal counter_op_net : std_logic_vector( 16-1 downto 0 );
  signal addsub3_s_net : std_logic_vector( 33-1 downto 0 );
  signal register11_q_net_x1 : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal register11_q_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram_doutb_net_x0 : std_logic_vector( 18-1 downto 0 );
  signal dual_port_ram1_doutb_net : std_logic_vector( 18-1 downto 0 );
  signal convert3_dout_net : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x0 : std_logic_vector( 1-1 downto 0 );
  signal convert2_dout_net_x2 : std_logic_vector( 1-1 downto 0 );
begin
  cav1_nco_phase_adj_net <= cav1_nco_phase_adj;
  cav1_nco_phase_reset_net <= cav1_nco_phase_reset;
  cav1_p1_amp_out <= register13_q_net;
  cav1_p1_calibration_coeff_net <= cav1_p1_calibration_coeff;
  cav1_p1_chan_sel_net <= cav1_p1_chan_sel;
  cav1_p1_comparison_i <= register14_q_net;
  cav1_p1_comparison_phase <= register16_q_net;
  cav1_p1_comparison_q <= register15_q_net;
  cav1_p1_dc_freq <= register9_q_net;
  cav1_p1_dc_img <= register8_q_net;
  cav1_p1_dc_real <= register7_q_net;
  cav1_p1_if_amp <= register3_q_net;
  cav1_p1_if_i <= register5_q_net;
  cav1_p1_if_phase <= register4_q_net;
  cav1_p1_if_q <= register6_q_net;
  cav1_p1_integrated_i <= register10_q_net;
  cav1_p1_integrated_q <= register11_q_net;
  cav1_p1_phase_out <= register12_q_net;
  cav1_p1_window_start_net <= cav1_p1_window_start;
  cav1_p1_window_stop_net <= cav1_p1_window_stop;
  cav1_p2_amp_out <= register20_q_net;
  cav1_p2_calibration_coeff_net <= cav1_p2_calibration_coeff;
  cav1_p2_chan_sel_net <= cav1_p2_chan_sel;
  cav1_p2_comparison_i <= register21_q_net;
  cav1_p2_comparison_phase <= register23_q_net;
  cav1_p2_comparison_q <= register22_q_net;
  cav1_p2_dc_freq <= register30_q_net_x0;
  cav1_p2_dc_img <= register29_q_net_x1;
  cav1_p2_dc_real <= register28_q_net;
  cav1_p2_if_amp <= register24_q_net;
  cav1_p2_if_i <= register26_q_net;
  cav1_p2_if_phase <= register25_q_net;
  cav1_p2_if_q <= register1_q_net_x2;
  cav1_p2_integrated_i <= register17_q_net;
  cav1_p2_integrated_q <= register18_q_net;
  cav1_p2_phase_out <= register19_q_net;
  cav1_p2_window_start_net <= cav1_p2_window_start;
  cav1_p2_window_stop_net <= cav1_p2_window_stop;
  cav2_nco_phase_adj_net <= cav2_nco_phase_adj;
  cav2_nco_phase_reset_net <= cav2_nco_phase_reset;
  cav2_p1_amp_out <= register93_q_net;
  cav2_p1_calibration_coeff_net <= cav2_p1_calibration_coeff;
  cav2_p1_chan_sel_net <= cav2_p1_chan_sel;
  cav2_p1_comparison_i <= register94_q_net;
  cav2_p1_comparison_phase <= register96_q_net;
  cav2_p1_comparison_q <= register95_q_net;
  cav2_p1_dc_freq <= register103_q_net;
  cav2_p1_dc_img <= register102_q_net;
  cav2_p1_dc_real <= register101_q_net;
  cav2_p1_if_amp <= register97_q_net;
  cav2_p1_if_i <= register99_q_net;
  cav2_p1_if_phase <= register98_q_net;
  cav2_p1_if_q <= register100_q_net;
  cav2_p1_integrated_i <= register90_q_net;
  cav2_p1_integrated_q <= register91_q_net;
  cav2_p1_phase_out <= register92_q_net;
  cav2_p1_window_start_net <= cav2_p1_window_start;
  cav2_p1_window_stop_net <= cav2_p1_window_stop;
  cav2_p2_amp_out <= register121_q_net;
  cav2_p2_calibration_coeff_net <= cav2_p2_calibration_coeff;
  cav2_p2_chan_sel_net <= cav2_p2_chan_sel;
  cav2_p2_comparison_i <= register122_q_net;
  cav2_p2_comparison_phase <= register124_q_net;
  cav2_p2_comparison_q <= register123_q_net;
  cav2_p2_dc_freq <= register131_q_net;
  cav2_p2_dc_img <= register130_q_net;
  cav2_p2_dc_real <= register129_q_net;
  cav2_p2_if_amp <= register125_q_net;
  cav2_p2_if_i <= register127_q_net;
  cav2_p2_if_phase <= register126_q_net;
  cav2_p2_if_q <= register128_q_net;
  cav2_p2_integrated_i <= register118_q_net;
  cav2_p2_integrated_q <= register119_q_net;
  cav2_p2_phase_out <= register120_q_net;
  cav2_p2_window_start_net <= cav2_p2_window_start;
  cav2_p2_window_stop_net <= cav2_p2_window_stop;
  ref_window_start_net <= ref_window_start;
  ref_window_stop_net <= ref_window_stop;
  rf_ref_amp <= register76_q_net;
  rf_ref_chan_sel_net <= rf_ref_chan_sel;
  rf_ref_i <= register80_q_net;
  rf_ref_phase <= register78_q_net;
  rf_ref_q <= register82_q_net;
  scratchpad_net <= scratchpad;
  status_0 <= register27_q_net;
  diag1data <= mux2_y_net;
  diag1fixed <= convert4_dout_net;
  diag1sevr <= convert13_dout_net;
  diag2data <= mux4_y_net;
  diag2fixed <= convert6_dout_net;
  diag2sevr <= convert14_dout_net;
  diag3data <= mux5_y_net;
  diag3fixed <= convert7_dout_net;
  diag3sevr <= convert15_dout_net;
  diag4data <= mux6_y_net;
  diag4fixed <= convert8_dout_net;
  diag4sevr <= convert16_dout_net;
  diag5data <= mux7_y_net;
  diag5fixed <= convert9_dout_net;
  diag5sevr <= convert17_dout_net;
  diag6data <= mux8_y_net;
  diag6fixed <= convert10_dout_net;
  diag6sevr <= convert18_dout_net;
  diag7data <= mux9_y_net;
  diag7fixed <= convert11_dout_net;
  diag7sevr <= convert19_dout_net;
  diag8data <= mux3_y_net;
  diag8fixed <= convert12_dout_net;
  diag8sevr <= convert20_dout_net;
  diagnclk <= convert2_dout_net;
  diagnrst <= convert_dout_net;
  diagnsync <= convert1_dout_net;
  wfdata_0 <= convert27_dout_net;
  wfdata_1 <= convert28_dout_net;
  wfdata_2 <= convert29_dout_net;
  wfdata_3 <= convert30_dout_net;
  wfdata_4 <= convert31_dout_net;
  wfdata_5 <= convert32_dout_net;
  wfdata_6 <= convert33_dout_net;
  wfdata_7 <= convert34_dout_net;
  wfvalid_0 <= convert35_dout_net;
  wfvalid_1 <= convert36_dout_net;
  wfvalid_2 <= convert37_dout_net;
  wfvalid_3 <= convert38_dout_net;
  wfvalid_4 <= convert39_dout_net;
  wfvalid_5 <= convert40_dout_net;
  wfvalid_6 <= convert41_dout_net;
  wfvalid_7 <= convert42_dout_net;
  diag9fixed <= convert54_dout_net;
  diag10fixed <= convert55_dout_net;
  diag11fixed <= convert56_dout_net;
  diag12fixed <= convert57_dout_net;
  diag13fixed <= convert58_dout_net;
  diag14fixed <= convert51_dout_net;
  diag15fixed <= convert52_dout_net;
  diag16fixed <= convert53_dout_net;
  diag26fixed <= convert67_dout_net;
  diag27fixed <= convert68_dout_net;
  diag28fixed <= convert69_dout_net;
  diag29fixed <= convert70_dout_net;
  diag30fixed <= convert63_dout_net;
  diag31fixed <= convert64_dout_net;
  diag17fixed <= convert62_dout_net;
  diag18fixed <= convert71_dout_net;
  diag19fixed <= convert72_dout_net;
  diag20fixed <= convert73_dout_net;
  diag21fixed <= convert74_dout_net;
  diag22fixed <= convert59_dout_net;
  diag23fixed <= convert60_dout_net;
  diag24fixed <= convert61_dout_net;
  diag25fixed <= convert66_dout_net;
  diag9sevr <= convert65_dout_net;
  diag10sevr <= convert75_dout_net;
  diag11sevr <= convert76_dout_net;
  diag12sevr <= convert77_dout_net;
  diag13sevr <= convert78_dout_net;
  diag14sevr <= convert79_dout_net;
  diag15sevr <= convert80_dout_net;
  diag16sevr <= convert81_dout_net;
  diag26sevr <= convert91_dout_net;
  diag27sevr <= convert92_dout_net;
  diag28sevr <= convert93_dout_net;
  diag29sevr <= convert94_dout_net;
  diag30sevr <= convert95_dout_net;
  diag31sevr <= convert96_dout_net;
  diag17sevr <= convert82_dout_net;
  diag18sevr <= convert83_dout_net;
  diag19sevr <= convert84_dout_net;
  diag20sevr <= convert85_dout_net;
  diag21sevr <= convert86_dout_net;
  diag22sevr <= convert87_dout_net;
  diag23sevr <= convert88_dout_net;
  diag24sevr <= convert89_dout_net;
  diag25sevr <= convert90_dout_net;
  gateway_out3_x0 <= nco_sin;
  gateway_out39 <= down_sample1_q_net;
  gateway_out4_x0 <= register9_q_net_x0;
  gateway_out40 <= down_sample_q_net_x8;
  gateway_out5_x1 <= nco_cos;
  gateway_out10_x1 <= mult2_p_net_x2;
  gateway_out15_x0 <= convert_dout_net_x3;
  gateway_out16_x0 <= convert1_dout_net_x0;
  gateway_out3_x1 <= nco_sin;
  gateway_out4_x1 <= phase_x0;
  gateway_out5 <= nco_cos;
  gateway_out6 <= cordic_6_0_m_axis_dout_tdata_real_net;
  gateway_out7 <= fir_compiler_7_2_m_axis_data_tdata_real_net_x0;
  gateway_out8 <= fir_compiler_7_2_m_axis_data_tvalid_net_x0;
  gateway_out <= inverter_op_net_x2;
  gateway_out1 <= convert2_dout_net_x7;
  gateway_out10_x0 <= mult4_p_net_x1;
  gateway_out11 <= register1_q_net_x8;
  gateway_out12 <= convert4_dout_net_x3;
  gateway_out13 <= register12_q_net_x5;
  gateway_out14 <= mult5_p_net_x1;
  gateway_out15 <= register2_q_net_x7;
  gateway_out16 <= inverter3_op_net_x2;
  gateway_out17 <= accumulator3_q_net_x2;
  gateway_out2 <= inverter2_op_net_x2;
  gateway_out22 <= convert9_dout_net_x4;
  gateway_out23 <= convert10_dout_net_x3;
  gateway_out3 <= accumulator_q_net_x2;
  gateway_out4 <= accumulator2_q_net_x2;
  gateway_out5_x0 <= mult2_p_net_x3;
  gateway_out6_x0 <= inverter1_op_net_x2;
  gateway_out7_x0 <= accumulator1_q_net_x2;
  gateway_out8_x0 <= mult_p_net_x5;
  gateway_out9 <= register11_q_net_x7;
  gateway_out_x0 <= inverter_op_net_x1;
  gateway_out1_x0 <= convert2_dout_net_x4;
  gateway_out10 <= mult4_p_net_x2;
  gateway_out11_x3 <= register1_q_net_x7;
  gateway_out12_x1 <= convert4_dout_net_x2;
  gateway_out13_x1 <= register12_q_net_x4;
  gateway_out14_x0 <= mult5_p_net_x2;
  gateway_out15_x2 <= register2_q_net_x6;
  gateway_out16_x2 <= inverter3_op_net_x1;
  gateway_out17_x1 <= accumulator3_q_net_x1;
  gateway_out2_x8 <= inverter2_op_net_x1;
  gateway_out22_x2 <= convert9_dout_net_x2;
  gateway_out23_x2 <= convert10_dout_net_x2;
  gateway_out3_x9 <= accumulator_q_net_x1;
  gateway_out4_x4 <= accumulator2_q_net_x1;
  gateway_out5_x7 <= mult2_p_net_x4;
  gateway_out6_x7 <= inverter1_op_net_x1;
  gateway_out7_x7 <= accumulator1_q_net_x1;
  gateway_out8_x9 <= mult_p_net_x6;
  gateway_out9_x2 <= register11_q_net_x4;
  gateway_out1_x9 <= delay5_q_net_x3;
  gateway_out2_x9 <= delay3_q_net_x3;
  gateway_out27_x4 <= relational4_op_net_x1;
  gateway_out28_x4 <= relational3_op_net_x1;
  gateway_out29_x4 <= convert11_dout_net_x2;
  gateway_out3_x10 <= convert7_dout_net_x2;
  gateway_out5_x8 <= convert5_dout_net_x1;
  gateway_out24_x2 <= convert5_dout_net_x4;
  gateway_out25_x2 <= convert10_dout_net_x2;
  gateway_out26_x2 <= convert9_dout_net_x2;
  gateway_out6_x5 <= convert5_dout_net_x4;
  gateway_out7_x5 <= convert4_dout_net_x2;
  gateway_out8_x7 <= convert2_dout_net_x4;
  gateway_out24_x1 <= convert5_dout_net_x1;
  gateway_out25_x1 <= convert10_dout_net_x3;
  gateway_out26_x1 <= convert9_dout_net_x4;
  gateway_out6_x6 <= convert5_dout_net_x1;
  gateway_out7_x6 <= convert4_dout_net_x3;
  gateway_out8_x8 <= convert2_dout_net_x7;
  gateway_out1_x8 <= delay5_q_net_x6;
  gateway_out2_x7 <= delay3_q_net_x6;
  gateway_out27_x3 <= relational4_op_net_x2;
  gateway_out28_x3 <= relational3_op_net_x2;
  gateway_out29_x3 <= convert11_dout_net_x3;
  gateway_out3_x8 <= convert7_dout_net_x3;
  gateway_out5_x6 <= convert5_dout_net_x4;
  gateway_out32_x1 <= down_sample1_q_net_x4;
  gateway_out34_x1 <= convert11_dout_net_x3;
  gateway_out35_x1 <= mult4_p_net_x2;
  gateway_out36_x1 <= down_sample_q_net_x3;
  gateway_out37_x1 <= convert11_dout_net_x3;
  gateway_out38_x1 <= mult5_p_net_x2;
  gateway_out32_x2 <= down_sample1_q_net_x4;
  gateway_out34_x2 <= convert11_dout_net_x2;
  gateway_out35_x2 <= mult4_p_net_x1;
  gateway_out36_x2 <= down_sample_q_net_x3;
  gateway_out37_x2 <= convert11_dout_net_x2;
  gateway_out38_x2 <= mult5_p_net_x1;
  gateway_out11_x5 <= convert_dout_net_x6;
  gateway_out19_x1 <= mult3_p_net_x2;
  gateway_out20_x1 <= delay3_q_net_x5;
  gateway_out8_x11 <= divide_op_net_x2;
  gateway_out27_x5 <= addsub3_s_net_x5;
  gateway_out28_x5 <= register_q_net_x2;
  gateway_out29_x5 <= register1_q_net_x9;
  gateway_out3_x12 <= mult1_p_net_x2;
  gateway_out_x6 <= mult3_p_net_x2;
  gateway_out1_x12 <= relational1_op_net_x1;
  gateway_out2_x14 <= delay5_q_net_x5;
  gateway_out1_x13 <= mult_p_net_x3;
  gateway_out2_x13 <= register2_q_net_x8;
  gateway_out11_x6 <= convert_dout_net_x4;
  gateway_out19_x2 <= mult3_p_net_x1;
  gateway_out20_x2 <= delay3_q_net_x4;
  gateway_out8_x12 <= divide_op_net_x1;
  gateway_out27_x6 <= addsub3_s_net_x3;
  gateway_out28_x6 <= register_q_net_x1;
  gateway_out29_x6 <= register1_q_net_x10;
  gateway_out3_x13 <= mult1_p_net_x1;
  gateway_out_x5 <= mult3_p_net_x1;
  gateway_out1_x14 <= relational1_op_net_x2;
  gateway_out2_x10 <= delay5_q_net_x4;
  gateway_out1_x10 <= mult_p_net_x4;
  gateway_out2_x11 <= register2_q_net_x9;
  gateway_out39_x0 <= down_sample1_q_net;
  gateway_out40_x0 <= down_sample_q_net_x8;
  gateway_out10_x3 <= mult2_p_net;
  gateway_out15_x3 <= convert_dout_net_x5;
  gateway_out16_x3 <= convert1_dout_net_x2;
  gateway_out3_x11 <= nco_sin_x0;
  gateway_out4_x5 <= phase_x1;
  gateway_out5_x9 <= nco_cos_x0;
  gateway_out6_x8 <= cordic_6_0_m_axis_dout_tdata_real_net_x0;
  gateway_out7_x8 <= fir_compiler_7_2_m_axis_data_tdata_real_net;
  gateway_out8_x10 <= fir_compiler_7_2_m_axis_data_tvalid_net;
  gateway_out_x4 <= inverter_op_net;
  gateway_out1_x11 <= convert2_dout_net_x1;
  gateway_out10_x4 <= mult4_p_net;
  gateway_out11_x4 <= register1_q_net_x3;
  gateway_out12_x2 <= convert4_dout_net_x0;
  gateway_out13_x2 <= register12_q_net_x2;
  gateway_out14_x2 <= mult5_p_net;
  gateway_out15_x4 <= register2_q_net_x2;
  gateway_out16_x4 <= inverter3_op_net;
  gateway_out17_x2 <= accumulator3_q_net;
  gateway_out2_x12 <= inverter2_op_net;
  gateway_out22_x0 <= convert9_dout_net_x0;
  gateway_out23_x0 <= convert10_dout_net_x0;
  gateway_out3_x3 <= accumulator_q_net_x0;
  gateway_out4_x2 <= accumulator2_q_net;
  gateway_out5_x4 <= mult2_p_net_x0;
  gateway_out6_x4 <= inverter1_op_net;
  gateway_out7_x4 <= accumulator1_q_net;
  gateway_out8_x4 <= mult_p_net_x0;
  gateway_out9_x1 <= register11_q_net_x2;
  gateway_out_x1 <= inverter_op_net_x0;
  gateway_out1_x3 <= convert2_dout_net_x3;
  gateway_out10_x2 <= mult4_p_net_x0;
  gateway_out11_x0 <= register1_q_net_x4;
  gateway_out12_x0 <= convert4_dout_net_x1;
  gateway_out13_x0 <= register12_q_net_x3;
  gateway_out14_x1 <= mult5_p_net_x0;
  gateway_out15_x1 <= register2_q_net_x3;
  gateway_out16_x1 <= inverter3_op_net_x0;
  gateway_out17_x0 <= accumulator3_q_net_x0;
  gateway_out2_x2 <= inverter2_op_net_x0;
  gateway_out22_x1 <= convert9_dout_net_x1;
  gateway_out23_x1 <= convert10_dout_net_x1;
  gateway_out3_x4 <= accumulator_q_net;
  gateway_out4_x3 <= accumulator2_q_net_x0;
  gateway_out5_x3 <= mult2_p_net_x1;
  gateway_out6_x1 <= inverter1_op_net_x0;
  gateway_out7_x1 <= accumulator1_q_net_x0;
  gateway_out8_x1 <= mult_p_net_x1;
  gateway_out9_x0 <= register11_q_net_x3;
  gateway_out1_x1 <= delay5_q_net;
  gateway_out2_x0 <= delay3_q_net;
  gateway_out27 <= relational4_op_net;
  gateway_out28 <= relational3_op_net;
  gateway_out29 <= convert11_dout_net_x1;
  gateway_out3_x2 <= convert7_dout_net_x0;
  gateway_out5_x2 <= convert5_dout_net;
  gateway_out24 <= convert5_dout_net_x0;
  gateway_out25 <= convert10_dout_net_x1;
  gateway_out26 <= convert9_dout_net_x1;
  gateway_out6_x2 <= convert5_dout_net_x0;
  gateway_out7_x2 <= convert4_dout_net_x1;
  gateway_out8_x2 <= convert2_dout_net_x3;
  gateway_out24_x0 <= convert5_dout_net;
  gateway_out25_x0 <= convert10_dout_net_x0;
  gateway_out26_x0 <= convert9_dout_net_x0;
  gateway_out6_x3 <= convert5_dout_net;
  gateway_out7_x3 <= convert4_dout_net_x0;
  gateway_out8_x3 <= convert2_dout_net_x1;
  gateway_out1_x2 <= delay5_q_net_x0;
  gateway_out2_x1 <= delay3_q_net_x0;
  gateway_out27_x0 <= relational4_op_net_x0;
  gateway_out28_x1 <= relational3_op_net_x0;
  gateway_out29_x1 <= convert11_dout_net_x0;
  gateway_out3_x6 <= convert7_dout_net_x1;
  gateway_out5_x5 <= convert5_dout_net_x0;
  gateway_out32 <= down_sample1_q_net_x4;
  gateway_out34 <= convert11_dout_net_x0;
  gateway_out35_x0 <= mult4_p_net_x0;
  gateway_out36 <= down_sample_q_net_x3;
  gateway_out37 <= convert11_dout_net_x0;
  gateway_out38 <= mult5_p_net_x0;
  gateway_out32_x0 <= down_sample1_q_net_x4;
  gateway_out34_x0 <= convert11_dout_net_x1;
  gateway_out35 <= mult4_p_net;
  gateway_out36_x0 <= down_sample_q_net_x3;
  gateway_out37_x0 <= convert11_dout_net_x1;
  gateway_out38_x0 <= mult5_p_net;
  gateway_out11_x2 <= convert_dout_net_x0;
  gateway_out19_x0 <= mult3_p_net;
  gateway_out20_x0 <= delay3_q_net_x1;
  gateway_out8_x6 <= divide_op_net;
  gateway_out27_x2 <= addsub3_s_net_x0;
  gateway_out28_x2 <= register_q_net_x0;
  gateway_out29_x2 <= register1_q_net_x6;
  gateway_out3_x7 <= mult1_p_net_x0;
  gateway_out_x3 <= mult3_p_net;
  gateway_out1_x4 <= relational1_op_net_x0;
  gateway_out2_x3 <= delay5_q_net_x2;
  gateway_out1_x5 <= mult_p_net_x2;
  gateway_out2_x4 <= register2_q_net_x5;
  gateway_out11_x1 <= convert_dout_net_x1;
  gateway_out19 <= mult3_p_net_x0;
  gateway_out20 <= delay3_q_net_x2;
  gateway_out8_x5 <= divide_op_net_x0;
  gateway_out27_x1 <= addsub3_s_net_x1;
  gateway_out28_x0 <= register_q_net;
  gateway_out29_x0 <= register1_q_net_x5;
  gateway_out3_x5 <= mult1_p_net;
  gateway_out_x2 <= mult3_p_net_x0;
  gateway_out1_x6 <= relational1_op_net;
  gateway_out2_x5 <= delay5_q_net_x1;
  gateway_out1_x7 <= mult_p_net;
  gateway_out2_x6 <= register2_q_net_x4;
  amp_net <= amp;
  ddcchannel_net <= ddcchannel;
  ddci_net <= ddci;
  ddcq_net <= ddcq;
  ddcsync_net <= ddcsync;
  phase_net <= phase;
  phaseampchannel_net <= phaseampchannel;
  phaseampsync_net <= phaseampsync;
  q_clk_net_x0 <= clk_1_x0;
  d_ce_net_x0 <= ce_1_x0;
  d_clk_net <= clk_12;
  q_ce_net <= ce_12;
  q_clk_net <= clk_1;
  d_ce_net <= ce_1;
  dest_clk_net <= clk_8;
  dest_ce_net <= ce_8;
  subsystem : entity work.appmodel_subsystem 
  port map (
    cav1_p1_if_amp => down_sample1_q_net_x8,
    cav1_p1_if_phase => down_sample_q_net_x7,
    cav1_p1_if_i => down_sample1_q_net_x5,
    cav1_p1_if_q => down_sample_q_net_x4,
    cav1_p1_dc_real => convert6_dout_net_x0,
    cav1_p1_dc_img => convert5_dout_net_x2,
    cav1_p1_dc_freq => convert_dout_net_x4,
    cav1_p1_integrated_i => convert9_dout_net_x2,
    cav1_p1_integrated_q => convert10_dout_net_x2,
    cav1_p1_phase_out => register13_q_net_x2,
    cav1_p1_amp_out => register14_q_net_x2,
    cav1_p1_comparison_i => addsub_s_net_x2,
    cav1_p2_if_amp => down_sample1_q_net_x7,
    cav1_p2_if_phase => down_sample_q_net_x6,
    cav1_p2_if_i => down_sample1_q_net_x6,
    cav1_p2_if_q => down_sample_q_net_x5,
    cav1_p2_dc_real => convert1_dout_net_x1,
    cav1_p2_dc_img => convert_dout_net_x2,
    cav1_p2_dc_freq => convert_dout_net_x6,
    cav1_p2_integrated_i => convert9_dout_net_x4,
    cav1_p2_integrated_q => convert10_dout_net_x3,
    cav1_p2_phase_out => register13_q_net_x3,
    cav1_p2_amp_out => register14_q_net_x3,
    cav1_p2_comparison_i => addsub_s_net_x1,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    p1_1 => c1p1_if_amp,
    p2_1 => c1p2_if_amp,
    p1_2 => c1p1_if_phi,
    p1_3 => c1p1_if_i,
    p1_4 => c1p1_if_q,
    p1_5 => c1p1_dc_i,
    p1_6 => c1p1_dc_q,
    p1_7 => c1p1_dc_freq,
    p1_8 => c1p1_integ_i,
    p1_9 => c1p1_integ_q,
    p1_10 => c1p1_phi_out,
    p1_11 => c1p1_amp_out,
    p1_12 => c1p1_comp_i,
    p1_13 => c1p1_comp_q,
    p1_14 => c1p1_comp_phi,
    p2_2 => c1p2_if_phi,
    p2_3 => c1p2_if_i,
    p2_4 => c1p2_if_q,
    p2_5 => c1p2_dc_i,
    p2_6 => c1p2_dc_q,
    p2_7 => c1p2_dc_freq,
    p2_8 => c1p2_integ_i,
    p2_9 => c1p2_integ_q,
    p2_10 => c1p2_phi_out,
    p2_11 => c1p2_amp_out,
    p2_12 => c1p2_comp_i,
    p2_13 => c1p2_comp_q,
    p2_14 => c1p2_comp_phi
  );
  subsystem2_x0 : entity work.appmodel_subsystem2 
  port map (
    in1_1 => c1p1_chan_sel,
    in1_2 => c1p2_chan_sel,
    in1_3 => c1p1_win_start,
    in1_4 => c1p1_win_stop,
    in1_5 => c1p2_win_start,
    in1_6 => c1p2_win_stop,
    in1_7 => c1_nco_reset,
    in1_8 => c1p1_cal_coeff,
    in1_9 => c1p2_cal_coeff,
    in1_10 => c1_nco_phi,
    clk_1_x0 => q_clk_net_x0,
    ce_1 => d_ce_net_x0,
    clk_1 => q_clk_net,
    ce_1_x0 => d_ce_net,
    cav1_p1_chan_sel => register29_q_net_x0,
    cav1_p2_chan_sel => register30_q_net,
    cav1_p1_window_start => register31_q_net,
    cav1_p1_window_stop => register32_q_net,
    cav1_nco_phase_reset => register35_q_net,
    cav1_nco_phase_adj => register36_q_net,
    cav1_p2_window_start => register33_q_net,
    cav1_p2_window_stop => register34_q_net,
    cav1_p1_cal_coef => register1_q_net_x0,
    cav1_p2_cal_coef => register2_q_net_x0
  );
  subsystem3 : entity work.appmodel_subsystem3_x0 
  port map (
    rf_ref_amp => down_sample1_q_net,
    rf_ref_phase => down_sample_q_net_x8,
    rf_ref_i => down_sample1_q_net_x4,
    rf_ref_q => down_sample_q_net_x3,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    out1_1 => ref_amp,
    out1_2 => ref_phi,
    out1_3 => ref_i,
    out1_4 => ref_q
  );
  subsystem4 : entity work.appmodel_subsystem4 
  port map (
    in1_3 => ref_chan_sel,
    clk_1_x0 => q_clk_net_x0,
    ce_1 => d_ce_net_x0,
    clk_1 => q_clk_net,
    ce_1_x0 => d_ce_net,
    rf_ref_chan_sel => register2_q_net
  );
  subsystem5 : entity work.appmodel_subsystem5 
  port map (
    cav2_p1_if_amp => down_sample1_q_net_x0,
    cav2_p1_if_phase => down_sample_q_net,
    cav2_p1_if_i => down_sample1_q_net_x1,
    cav2_p1_if_q => down_sample_q_net_x0,
    cav2_p1_dc_real => convert1_dout_net_x3,
    cav2_p1_dc_img => convert5_dout_net_x3,
    cav2_p1_dc_freq => convert_dout_net_x1,
    cav2_p1_integrated_i => convert9_dout_net_x1,
    cav2_p1_integrated_q => convert10_dout_net_x1,
    cav2_p1_phase_out => register13_q_net_x1,
    cav2_p1_amp_out => register14_q_net_x1,
    cav2_p1_comparison_i => addsub_s_net_x0,
    cav2_p2_if_amp => down_sample1_q_net_x3,
    cav2_p2_if_phase => down_sample_q_net_x2,
    cav2_p2_if_i => down_sample1_q_net_x2,
    cav2_p2_if_q => down_sample_q_net_x1,
    cav2_p2_dc_real => convert2_dout_net_x8,
    cav2_p2_dc_img => convert6_dout_net_x1,
    cav2_p2_dc_freq => convert_dout_net_x0,
    cav2_p2_integrated_i => convert9_dout_net_x0,
    cav2_p2_integrated_q => convert10_dout_net_x0,
    cav2_p2_phase_out => register13_q_net_x0,
    cav2_p2_amp_out => register14_q_net_x0,
    cav2_p2_comparison_i => addsub_s_net,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    p1_1 => c2p1_if_amp,
    p2_1 => c2p2_if_amp,
    p1_2 => c2p1_if_phi,
    p1_3 => c2p1_if_i,
    p1_4 => c2p1_if_q,
    p1_5 => c2p1_dc_i,
    p1_6 => c2p1_dc_q,
    p1_7 => c2p1_dc_freq,
    p1_8 => c2p1_integ_i,
    p1_9 => c2p1_integ_q,
    p1_10 => c2p1_phi_out,
    p1_11 => c2p1_amp_out,
    p1_12 => c2p1_comp_i,
    p1_13 => c2p1_comp_q,
    p1_14 => c2p1_comp_phi,
    p2_2 => c2p2_if_phi,
    p2_3 => c2p2_if_i,
    p2_4 => c2p2_if_q,
    p2_5 => c2p2_dc_i,
    p2_6 => c2p2_dc_q,
    p2_7 => c2p2_dc_freq,
    p2_8 => c2p2_integ_i,
    p2_9 => c2p2_integ_q,
    p2_10 => c2p2_phi_out,
    p2_11 => c2p2_amp_out,
    p2_12 => c2p2_comp_i,
    p2_13 => c2p2_comp_q,
    p2_14 => c2p2_comp_phi
  );
  subsystem7 : entity work.appmodel_subsystem7 
  port map (
    in1_1 => c2p1_chan_sel,
    in1_2 => c2p2_chan_sel,
    in1_3 => c2p1_win_start,
    in1_4 => c2p1_win_stop,
    in1_5 => c2p2_win_start,
    in1_6 => c2p2_win_stop,
    in1_7 => c2_nco_reset,
    in1_8 => c2p1_cal_coeff,
    in1_9 => c2p2_cal_coeff,
    in1_10 => c2_nco_phi,
    clk_1_x0 => q_clk_net_x0,
    ce_1 => d_ce_net_x0,
    clk_1 => q_clk_net,
    ce_1_x0 => d_ce_net,
    cav2_p1_cal_coef => register1_q_net_x1,
    cav2_nco_phase_reset => register35_q_net_x0,
    cav2_nco_phase_adj => register36_q_net_x0,
    cav2_p2_window_start => register33_q_net_x0,
    cav2_p2_window_stop => register34_q_net_x0,
    cav2_p2_cal_coef => register2_q_net_x1,
    cav2_p1_chan_sel => register29_q_net_x2,
    cav2_p2_chan_sel => register30_q_net_x1,
    cav2_p1_window_start => register31_q_net_x0,
    cav2_p1_window_stop => register32_q_net_x0
  );
  axi_lite : entity work.appmodel_axi_lite 
  port map (
    in1_1 => ref_amp,
    in2_1 => c1p1_if_amp,
    in3_1 => c1p2_if_amp,
    in4_1 => c2p1_if_amp,
    in5_1 => c2p2_if_amp,
    in1_2 => ref_phi,
    in1_3 => ref_i,
    in1_4 => ref_q,
    in2_2 => c1p1_if_phi,
    in2_3 => c1p1_if_i,
    in2_4 => c1p1_if_q,
    in2_5 => c1p1_dc_i,
    in2_6 => c1p1_dc_q,
    in2_7 => c1p1_dc_freq,
    in2_8 => c1p1_integ_i,
    in2_9 => c1p1_integ_q,
    in2_10 => c1p1_phi_out,
    in2_11 => c1p1_amp_out,
    in2_12 => c1p1_comp_i,
    in2_13 => c1p1_comp_q,
    in2_14 => c1p1_comp_phi,
    in3_2 => c1p2_if_phi,
    in3_3 => c1p2_if_i,
    in3_4 => c1p2_if_q,
    in3_5 => c1p2_dc_i,
    in3_6 => c1p2_dc_q,
    in3_7 => c1p2_dc_freq,
    in3_8 => c1p2_integ_i,
    in3_9 => c1p2_integ_q,
    in3_10 => c1p2_phi_out,
    in3_11 => c1p2_amp_out,
    in3_12 => c1p2_comp_i,
    in3_13 => c1p2_comp_q,
    in3_14 => c1p2_comp_phi,
    in4_2 => c2p1_if_phi,
    in4_3 => c2p1_if_i,
    in4_4 => c2p1_if_q,
    in4_5 => c2p1_dc_i,
    in4_6 => c2p1_dc_q,
    in4_7 => c2p1_dc_freq,
    in4_8 => c2p1_integ_i,
    in4_9 => c2p1_integ_q,
    in4_10 => c2p1_phi_out,
    in4_11 => c2p1_amp_out,
    in4_12 => c2p1_comp_i,
    in4_13 => c2p1_comp_q,
    in4_14 => c2p1_comp_phi,
    in5_2 => c2p2_if_phi,
    in5_3 => c2p2_if_i,
    in5_4 => c2p2_if_q,
    in5_5 => c2p2_dc_i,
    in5_6 => c2p2_dc_q,
    in5_7 => c2p2_dc_freq,
    in5_8 => c2p2_integ_i,
    in5_9 => c2p2_integ_q,
    in5_10 => c2p2_phi_out,
    in5_11 => c2p2_amp_out,
    in5_12 => c2p2_comp_i,
    in5_13 => c2p2_comp_q,
    in5_14 => c2p2_comp_phi,
    cav1_nco_phase_adj => cav1_nco_phase_adj_net,
    cav1_nco_phase_reset => cav1_nco_phase_reset_net,
    cav1_p1_calibration_coeff => cav1_p1_calibration_coeff_net,
    cav1_p1_chan_sel => cav1_p1_chan_sel_net,
    cav1_p1_window_start => cav1_p1_window_start_net,
    cav1_p1_window_stop => cav1_p1_window_stop_net,
    cav1_p2_calibration_coeff => cav1_p2_calibration_coeff_net,
    cav1_p2_chan_sel => cav1_p2_chan_sel_net,
    cav1_p2_window_start => cav1_p2_window_start_net,
    cav1_p2_window_stop => cav1_p2_window_stop_net,
    cav2_nco_phase_adj => cav2_nco_phase_adj_net,
    cav2_nco_phase_reset => cav2_nco_phase_reset_net,
    cav2_p1_calibration_coeff => cav2_p1_calibration_coeff_net,
    cav2_p1_chan_sel => cav2_p1_chan_sel_net,
    cav2_p1_window_start => cav2_p1_window_start_net,
    cav2_p1_window_stop => cav2_p1_window_stop_net,
    cav2_p2_calibration_coeff => cav2_p2_calibration_coeff_net,
    cav2_p2_chan_sel => cav2_p2_chan_sel_net,
    cav2_p2_window_start => cav2_p2_window_start_net,
    cav2_p2_window_stop => cav2_p2_window_stop_net,
    rf_ref_chan_sel => rf_ref_chan_sel_net,
    clk_1 => q_clk_net,
    ce_1 => d_ce_net,
    clk_8 => dest_clk_net,
    ce_8 => dest_ce_net,
    out2_1 => c1p1_chan_sel,
    out3_1 => c2p1_chan_sel,
    out1_3 => ref_chan_sel,
    out2_2 => c1p2_chan_sel,
    out2_3 => c1p1_win_start,
    out2_4 => c1p1_win_stop,
    out2_5 => c1p2_win_start,
    out2_6 => c1p2_win_stop,
    out2_7 => c1_nco_reset,
    out2_8 => c1p1_cal_coeff,
    out2_9 => c1p2_cal_coeff,
    out2_10 => c1_nco_phi,
    out3_2 => c2p2_chan_sel,
    out3_3 => c2p1_win_start,
    out3_4 => c2p1_win_stop,
    out3_5 => c2p2_win_start,
    out3_6 => c2p2_win_stop,
    out3_7 => c2_nco_reset,
    out3_8 => c2p1_cal_coeff,
    out3_9 => c2p2_cal_coeff,
    out3_10 => c2_nco_phi,
    cav1_p1_amp_out => register13_q_net,
    cav1_p1_comparison_i => register14_q_net,
    cav1_p1_comparison_phase => register16_q_net,
    cav1_p1_comparison_q => register15_q_net,
    cav1_p1_dc_freq => register9_q_net,
    cav1_p1_dc_img => register8_q_net,
    cav1_p1_dc_real => register7_q_net,
    cav1_p1_if_amp => register3_q_net,
    cav1_p1_if_i => register5_q_net,
    cav1_p1_if_phase => register4_q_net,
    cav1_p1_if_q => register6_q_net,
    cav1_p1_integrated_i => register10_q_net,
    cav1_p1_integrated_q => register11_q_net,
    cav1_p1_phase_out => register12_q_net,
    cav1_p2_amp_out => register20_q_net,
    cav1_p2_comparison_i => register21_q_net,
    cav1_p2_comparison_phase => register23_q_net,
    cav1_p2_comparison_q => register22_q_net,
    cav1_p2_dc_freq => register30_q_net_x0,
    cav1_p2_dc_img => register29_q_net_x1,
    cav1_p2_dc_real => register28_q_net,
    cav1_p2_if_amp => register24_q_net,
    cav1_p2_if_i => register26_q_net,
    cav1_p2_if_phase => register25_q_net,
    cav1_p2_if_q => register1_q_net_x2,
    cav1_p2_integrated_i => register17_q_net,
    cav1_p2_integrated_q => register18_q_net,
    cav1_p2_phase_out => register19_q_net,
    cav2_p1_amp_out => register93_q_net,
    cav2_p1_comparison_i => register94_q_net,
    cav2_p1_comparison_phase => register96_q_net,
    cav2_p1_comparison_q => register95_q_net,
    cav2_p1_dc_freq => register103_q_net,
    cav2_p1_dc_img => register102_q_net,
    cav2_p1_dc_real => register101_q_net,
    cav2_p1_if_amp => register97_q_net,
    cav2_p1_if_i => register99_q_net,
    cav2_p1_if_phase => register98_q_net,
    cav2_p1_if_q => register100_q_net,
    cav2_p1_integrated_i => register90_q_net,
    cav2_p1_integrated_q => register91_q_net,
    cav2_p1_phase_out => register92_q_net,
    cav2_p2_amp_out => register121_q_net,
    cav2_p2_comparison_i => register122_q_net,
    cav2_p2_comparison_phase => register124_q_net,
    cav2_p2_comparison_q => register123_q_net,
    cav2_p2_dc_freq => register131_q_net,
    cav2_p2_dc_img => register130_q_net,
    cav2_p2_dc_real => register129_q_net,
    cav2_p2_if_amp => register125_q_net,
    cav2_p2_if_i => register127_q_net,
    cav2_p2_if_phase => register126_q_net,
    cav2_p2_if_q => register128_q_net,
    cav2_p2_integrated_i => register118_q_net,
    cav2_p2_integrated_q => register119_q_net,
    cav2_p2_phase_out => register120_q_net,
    rf_ref_amp => register76_q_net,
    rf_ref_i => register80_q_net,
    rf_ref_phase => register78_q_net,
    rf_ref_q => register82_q_net,
    status_0 => register27_q_net
  );
  dsp : entity work.appmodel_dsp 
  port map (
    amp => amp_net,
    ddcchannel => ddcchannel_net,
    ddci => ddci_net,
    ddcq => ddcq_net,
    phase => phase_net,
    phaseampchannel => phaseampchannel_net,
    cav1_nco_phase_adj => register36_q_net,
    cav1_nco_phase_reset => register35_q_net,
    cav1_p1_cal_coef => register1_q_net_x0,
    cav1_p1_chan_sel => register29_q_net_x0,
    cav1_p1_window_start => register31_q_net,
    cav1_p1_window_stop => register32_q_net,
    cav1_p2_cal_coef => register2_q_net_x0,
    cav1_p2_chan_sel => register30_q_net,
    cav1_p2_window_start => register33_q_net,
    cav1_p2_window_stop => register34_q_net,
    cav2_nco_phase_adj => register36_q_net_x0,
    cav2_nco_phase_reset => register35_q_net_x0,
    cav2_p1_cal_coef => register1_q_net_x1,
    cav2_p1_chan_sel => register29_q_net_x2,
    cav2_p1_window_start => register31_q_net_x0,
    cav2_p1_window_stop => register32_q_net_x0,
    cav2_p2_cal_coef => register2_q_net_x1,
    cav2_p2_chan_sel => register30_q_net_x1,
    cav2_p2_window_start => register33_q_net_x0,
    cav2_p2_window_stop => register34_q_net_x0,
    rf_ref_chan_sel => register2_q_net,
    clk_1 => q_clk_net_x0,
    ce_1 => d_ce_net_x0,
    clk_12 => d_clk_net,
    ce_12 => q_ce_net,
    diag1data_x0 => constant_op_net,
    diag2data_x0 => constant13_op_net,
    wfdata_2 => constant24_op_net,
    wfdata_3 => constant25_op_net,
    wfdata_4 => constant27_op_net,
    wfdata_5 => constant28_op_net,
    wfdata_6 => constant29_op_net,
    wfdata_7 => constant30_op_net,
    wfvalid_2 => constant33_op_net,
    wfvalid_3 => constant34_op_net,
    wfvalid_4 => constant35_op_net,
    wfvalid_5 => constant36_op_net,
    diag3data => constant16_op_net,
    wfvalid_6 => constant37_op_net,
    wfvalid_7 => constant38_op_net,
    wfvalid_0 => constant31_op_net_x0,
    wfvalid_1 => constant32_op_net_x0,
    diag4data => constant17_op_net,
    diag5data => constant18_op_net,
    diag6data => constant19_op_net,
    diag7data => constant20_op_net,
    diag8data => constant21_op_net,
    wfdata_0 => constant22_op_net,
    wfdata_1 => constant23_op_net,
    diag1data => mux2_y_net,
    diag1fixed => convert4_dout_net,
    diag1sevr => convert13_dout_net,
    diag2data => mux4_y_net,
    diag2fixed => convert6_dout_net,
    diag2sevr => convert14_dout_net,
    diag3data_x0 => mux5_y_net,
    diag3fixed => convert7_dout_net,
    diag3sevr => convert15_dout_net,
    diag4data_x0 => mux6_y_net,
    diag4fixed => convert8_dout_net,
    diag4sevr => convert16_dout_net,
    diag5data_x0 => mux7_y_net,
    diag5fixed => convert9_dout_net,
    diag5sevr => convert17_dout_net,
    diag6data_x0 => mux8_y_net,
    diag6fixed => convert10_dout_net,
    diag6sevr => convert18_dout_net,
    diag7data_x0 => mux9_y_net,
    diag7fixed => convert11_dout_net,
    diag7sevr => convert19_dout_net,
    diag8data_x0 => mux3_y_net,
    diag8fixed => convert12_dout_net,
    diag8sevr => convert20_dout_net,
    diagnclk => convert2_dout_net,
    diagnrst => convert_dout_net,
    diagnsync => convert1_dout_net,
    wfdata_0_x0 => convert27_dout_net,
    wfdata_1_x0 => convert28_dout_net,
    wfdata_2_x0 => convert29_dout_net,
    wfdata_3_x0 => convert30_dout_net,
    wfdata_4_x0 => convert31_dout_net,
    wfdata_5_x0 => convert32_dout_net,
    wfdata_6_x0 => convert33_dout_net,
    wfdata_7_x0 => convert34_dout_net,
    wfvalid_0_x0 => convert35_dout_net,
    wfvalid_1_x0 => convert36_dout_net,
    wfvalid_2_x0 => convert37_dout_net,
    wfvalid_3_x0 => convert38_dout_net,
    wfvalid_4_x0 => convert39_dout_net,
    wfvalid_5_x0 => convert40_dout_net,
    wfvalid_6_x0 => convert41_dout_net,
    wfvalid_7_x0 => convert42_dout_net,
    diag9fixed => convert54_dout_net,
    diag10fixed => convert55_dout_net,
    diag11fixed => convert56_dout_net,
    diag12fixed => convert57_dout_net,
    diag13fixed => convert58_dout_net,
    diag14fixed => convert51_dout_net,
    diag15fixed => convert52_dout_net,
    diag16fixed => convert53_dout_net,
    diag26fixed => convert67_dout_net,
    diag27fixed => convert68_dout_net,
    diag28fixed => convert69_dout_net,
    diag29fixed => convert70_dout_net,
    diag30fixed => convert63_dout_net,
    diag31fixed => convert64_dout_net,
    diag17fixed => convert62_dout_net,
    diag18fixed => convert71_dout_net,
    diag19fixed => convert72_dout_net,
    diag20fixed => convert73_dout_net,
    diag21fixed => convert74_dout_net,
    diag22fixed => convert59_dout_net,
    diag23fixed => convert60_dout_net,
    diag24fixed => convert61_dout_net,
    diag25fixed => convert66_dout_net,
    diag9sevr => convert65_dout_net,
    diag10sevr => convert75_dout_net,
    diag11sevr => convert76_dout_net,
    diag12sevr => convert77_dout_net,
    diag13sevr => convert78_dout_net,
    diag14sevr => convert79_dout_net,
    diag15sevr => convert80_dout_net,
    diag16sevr => convert81_dout_net,
    diag26sevr => convert91_dout_net,
    diag27sevr => convert92_dout_net,
    diag28sevr => convert93_dout_net,
    diag29sevr => convert94_dout_net,
    diag30sevr => convert95_dout_net,
    diag31sevr => convert96_dout_net,
    diag17sevr => convert82_dout_net,
    diag18sevr => convert83_dout_net,
    diag19sevr => convert84_dout_net,
    diag20sevr => convert85_dout_net,
    diag21sevr => convert86_dout_net,
    diag22sevr => convert87_dout_net,
    diag23sevr => convert88_dout_net,
    diag24sevr => convert89_dout_net,
    diag25sevr => convert90_dout_net,
    gateway_out3_x1 => nco_sin,
    gateway_out39 => down_sample1_q_net,
    gateway_out4_x1 => register9_q_net_x0,
    gateway_out40 => down_sample_q_net_x8,
    gateway_out5_x1 => nco_cos,
    gateway_out10_x0 => mult2_p_net_x2,
    gateway_out15_x0 => convert_dout_net_x3,
    gateway_out16_x0 => convert1_dout_net_x0,
    gateway_out3_x2 => nco_sin,
    gateway_out4_x2 => phase_x0,
    gateway_out5_x2 => nco_cos,
    gateway_out6_x1 => cordic_6_0_m_axis_dout_tdata_real_net,
    gateway_out7_x1 => fir_compiler_7_2_m_axis_data_tdata_real_net_x0,
    gateway_out8_x1 => fir_compiler_7_2_m_axis_data_tvalid_net_x0,
    gateway_out_x0 => inverter_op_net_x2,
    gateway_out1_x1 => convert2_dout_net_x7,
    gateway_out10_x1 => mult4_p_net_x1,
    gateway_out11_x0 => register1_q_net_x8,
    gateway_out12_x0 => convert4_dout_net_x3,
    gateway_out13_x0 => register12_q_net_x5,
    gateway_out14_x0 => mult5_p_net_x1,
    gateway_out15_x1 => register2_q_net_x7,
    gateway_out16_x1 => inverter3_op_net_x2,
    gateway_out17 => accumulator3_q_net_x2,
    gateway_out2 => inverter2_op_net_x2,
    gateway_out22 => convert9_dout_net_x4,
    gateway_out23 => convert10_dout_net_x3,
    gateway_out3 => accumulator_q_net_x2,
    gateway_out4 => accumulator2_q_net_x2,
    gateway_out5 => mult2_p_net_x3,
    gateway_out6 => inverter1_op_net_x2,
    gateway_out7 => accumulator1_q_net_x2,
    gateway_out8 => mult_p_net_x5,
    gateway_out9 => register11_q_net_x7,
    gateway_out => inverter_op_net_x1,
    gateway_out1 => convert2_dout_net_x4,
    gateway_out10 => mult4_p_net_x2,
    gateway_out11 => register1_q_net_x7,
    gateway_out12 => convert4_dout_net_x2,
    gateway_out13 => register12_q_net_x4,
    gateway_out14 => mult5_p_net_x2,
    gateway_out15 => register2_q_net_x6,
    gateway_out16 => inverter3_op_net_x1,
    gateway_out17_x0 => accumulator3_q_net_x1,
    gateway_out2_x1 => inverter2_op_net_x1,
    gateway_out22_x0 => convert9_dout_net_x2,
    gateway_out23_x0 => convert10_dout_net_x2,
    gateway_out3_x0 => accumulator_q_net_x1,
    gateway_out4_x0 => accumulator2_q_net_x1,
    gateway_out5_x0 => mult2_p_net_x4,
    gateway_out6_x0 => inverter1_op_net_x1,
    gateway_out7_x0 => accumulator1_q_net_x1,
    gateway_out8_x0 => mult_p_net_x6,
    gateway_out9_x0 => register11_q_net_x4,
    gateway_out1_x0 => delay5_q_net_x3,
    gateway_out2_x0 => delay3_q_net_x3,
    gateway_out27 => relational4_op_net_x1,
    gateway_out28 => relational3_op_net_x1,
    gateway_out29_x1 => convert11_dout_net_x2,
    gateway_out3_x6 => convert7_dout_net_x2,
    gateway_out5_x3 => convert5_dout_net_x1,
    gateway_out24_x0 => convert5_dout_net_x4,
    gateway_out25_x0 => convert10_dout_net_x2,
    gateway_out26_x0 => convert9_dout_net_x2,
    gateway_out6_x3 => convert5_dout_net_x4,
    gateway_out7_x2 => convert4_dout_net_x2,
    gateway_out8_x5 => convert2_dout_net_x4,
    gateway_out24 => convert5_dout_net_x1,
    gateway_out25 => convert10_dout_net_x3,
    gateway_out26 => convert9_dout_net_x4,
    gateway_out6_x2 => convert5_dout_net_x1,
    gateway_out7_x3 => convert4_dout_net_x3,
    gateway_out8_x4 => convert2_dout_net_x7,
    gateway_out1_x6 => delay5_q_net_x6,
    gateway_out2_x6 => delay3_q_net_x6,
    gateway_out27_x2 => relational4_op_net_x2,
    gateway_out28_x2 => relational3_op_net_x2,
    gateway_out29_x2 => convert11_dout_net_x3,
    gateway_out3_x7 => convert7_dout_net_x3,
    gateway_out5_x4 => convert5_dout_net_x4,
    gateway_out32 => down_sample1_q_net_x4,
    gateway_out34 => convert11_dout_net_x3,
    gateway_out35 => mult4_p_net_x2,
    gateway_out36 => down_sample_q_net_x3,
    gateway_out37_x0 => convert11_dout_net_x3,
    gateway_out38_x0 => mult5_p_net_x2,
    gateway_out32_x0 => down_sample1_q_net_x4,
    gateway_out34_x0 => convert11_dout_net_x2,
    gateway_out35_x0 => mult4_p_net_x1,
    gateway_out36_x0 => down_sample_q_net_x3,
    gateway_out37 => convert11_dout_net_x2,
    gateway_out38 => mult5_p_net_x1,
    gateway_out11_x2 => convert_dout_net_x6,
    gateway_out19_x0 => mult3_p_net_x2,
    gateway_out20_x0 => delay3_q_net_x5,
    gateway_out8_x2 => divide_op_net_x2,
    gateway_out27_x0 => addsub3_s_net_x5,
    gateway_out28_x0 => register_q_net_x2,
    gateway_out29 => register1_q_net_x9,
    gateway_out3_x3 => mult1_p_net_x2,
    gateway_out_x1 => mult3_p_net_x2,
    gateway_out1_x3 => relational1_op_net_x1,
    gateway_out2_x3 => delay5_q_net_x5,
    gateway_out1_x2 => mult_p_net_x3,
    gateway_out2_x2 => register2_q_net_x8,
    gateway_out11_x1 => convert_dout_net_x4,
    gateway_out19 => mult3_p_net_x1,
    gateway_out20 => delay3_q_net_x4,
    gateway_out8_x3 => divide_op_net_x1,
    gateway_out27_x1 => addsub3_s_net_x3,
    gateway_out28_x1 => register_q_net_x1,
    gateway_out29_x0 => register1_q_net_x10,
    gateway_out3_x5 => mult1_p_net_x1,
    gateway_out_x2 => mult3_p_net_x1,
    gateway_out1_x5 => relational1_op_net_x2,
    gateway_out2_x4 => delay5_q_net_x4,
    gateway_out1_x4 => mult_p_net_x4,
    gateway_out2_x5 => register2_q_net_x9,
    gateway_out39_x0 => down_sample1_q_net,
    gateway_out40_x0 => down_sample_q_net_x8,
    gateway_out10_x2 => mult2_p_net,
    gateway_out15_x2 => convert_dout_net_x5,
    gateway_out16_x2 => convert1_dout_net_x2,
    gateway_out3_x4 => nco_sin_x0,
    gateway_out4_x3 => phase_x1,
    gateway_out5_x5 => nco_cos_x0,
    gateway_out6_x7 => cordic_6_0_m_axis_dout_tdata_real_net_x0,
    gateway_out7_x7 => fir_compiler_7_2_m_axis_data_tdata_real_net,
    gateway_out8_x9 => fir_compiler_7_2_m_axis_data_tvalid_net,
    gateway_out_x3 => inverter_op_net,
    gateway_out1_x9 => convert2_dout_net_x1,
    gateway_out10_x3 => mult4_p_net,
    gateway_out11_x3 => register1_q_net_x3,
    gateway_out12_x1 => convert4_dout_net_x0,
    gateway_out13_x1 => register12_q_net_x2,
    gateway_out14_x1 => mult5_p_net,
    gateway_out15_x3 => register2_q_net_x2,
    gateway_out16_x4 => inverter3_op_net,
    gateway_out17_x2 => accumulator3_q_net,
    gateway_out2_x10 => inverter2_op_net,
    gateway_out22_x2 => convert9_dout_net_x0,
    gateway_out23_x2 => convert10_dout_net_x0,
    gateway_out3_x10 => accumulator_q_net_x0,
    gateway_out4_x5 => accumulator2_q_net,
    gateway_out5_x8 => mult2_p_net_x0,
    gateway_out6_x8 => inverter1_op_net,
    gateway_out7_x8 => accumulator1_q_net,
    gateway_out8_x10 => mult_p_net_x0,
    gateway_out9_x2 => register11_q_net_x2,
    gateway_out_x4 => inverter_op_net_x0,
    gateway_out1_x10 => convert2_dout_net_x3,
    gateway_out10_x4 => mult4_p_net_x0,
    gateway_out11_x4 => register1_q_net_x4,
    gateway_out12_x2 => convert4_dout_net_x1,
    gateway_out13_x2 => register12_q_net_x3,
    gateway_out14_x2 => mult5_p_net_x0,
    gateway_out15_x4 => register2_q_net_x3,
    gateway_out16_x3 => inverter3_op_net_x0,
    gateway_out17_x1 => accumulator3_q_net_x0,
    gateway_out2_x8 => inverter2_op_net_x0,
    gateway_out22_x1 => convert9_dout_net_x1,
    gateway_out23_x1 => convert10_dout_net_x1,
    gateway_out3_x9 => accumulator_q_net,
    gateway_out4_x4 => accumulator2_q_net_x0,
    gateway_out5_x6 => mult2_p_net_x1,
    gateway_out6_x4 => inverter1_op_net_x0,
    gateway_out7_x4 => accumulator1_q_net_x0,
    gateway_out8_x6 => mult_p_net_x1,
    gateway_out9_x1 => register11_q_net_x3,
    gateway_out1_x7 => delay5_q_net,
    gateway_out2_x7 => delay3_q_net,
    gateway_out27_x3 => relational4_op_net,
    gateway_out28_x3 => relational3_op_net,
    gateway_out29_x3 => convert11_dout_net_x1,
    gateway_out3_x8 => convert7_dout_net_x0,
    gateway_out5_x7 => convert5_dout_net,
    gateway_out24_x2 => convert5_dout_net_x0,
    gateway_out25_x2 => convert10_dout_net_x1,
    gateway_out26_x2 => convert9_dout_net_x1,
    gateway_out6_x6 => convert5_dout_net_x0,
    gateway_out7_x6 => convert4_dout_net_x1,
    gateway_out8_x8 => convert2_dout_net_x3,
    gateway_out24_x1 => convert5_dout_net,
    gateway_out25_x1 => convert10_dout_net_x0,
    gateway_out26_x1 => convert9_dout_net_x0,
    gateway_out6_x5 => convert5_dout_net,
    gateway_out7_x5 => convert4_dout_net_x0,
    gateway_out8_x7 => convert2_dout_net_x1,
    gateway_out1_x8 => delay5_q_net_x0,
    gateway_out2_x9 => delay3_q_net_x0,
    gateway_out27_x4 => relational4_op_net_x0,
    gateway_out28_x4 => relational3_op_net_x0,
    gateway_out29_x5 => convert11_dout_net_x0,
    gateway_out3_x12 => convert7_dout_net_x1,
    gateway_out5_x9 => convert5_dout_net_x0,
    gateway_out32_x2 => down_sample1_q_net_x4,
    gateway_out34_x2 => convert11_dout_net_x0,
    gateway_out35_x2 => mult4_p_net_x0,
    gateway_out36_x2 => down_sample_q_net_x3,
    gateway_out37_x2 => convert11_dout_net_x0,
    gateway_out38_x1 => mult5_p_net_x0,
    gateway_out32_x1 => down_sample1_q_net_x4,
    gateway_out34_x1 => convert11_dout_net_x1,
    gateway_out35_x1 => mult4_p_net,
    gateway_out36_x1 => down_sample_q_net_x3,
    gateway_out37_x1 => convert11_dout_net_x1,
    gateway_out38_x2 => mult5_p_net,
    gateway_out11_x5 => convert_dout_net_x0,
    gateway_out19_x1 => mult3_p_net,
    gateway_out20_x1 => delay3_q_net_x1,
    gateway_out8_x12 => divide_op_net,
    gateway_out27_x6 => addsub3_s_net_x0,
    gateway_out28_x6 => register_q_net_x0,
    gateway_out29_x6 => register1_q_net_x6,
    gateway_out3_x13 => mult1_p_net_x0,
    gateway_out_x6 => mult3_p_net,
    gateway_out1_x14 => relational1_op_net_x0,
    gateway_out2_x14 => delay5_q_net_x2,
    gateway_out1_x13 => mult_p_net_x2,
    gateway_out2_x13 => register2_q_net_x5,
    gateway_out11_x6 => convert_dout_net_x1,
    gateway_out19_x2 => mult3_p_net_x0,
    gateway_out20_x2 => delay3_q_net_x2,
    gateway_out8_x11 => divide_op_net_x0,
    gateway_out27_x5 => addsub3_s_net_x1,
    gateway_out28_x5 => register_q_net,
    gateway_out29_x4 => register1_q_net_x5,
    gateway_out3_x11 => mult1_p_net,
    gateway_out_x5 => mult3_p_net_x0,
    gateway_out1_x12 => relational1_op_net,
    gateway_out2_x12 => delay5_q_net_x1,
    gateway_out1_x11 => mult_p_net,
    gateway_out2_x11 => register2_q_net_x4,
    diag1fixed_x0 => constant8_op_net,
    diag1sevr_ctl => constant64_op_net,
    diag2fixed_x0 => constant7_op_net,
    diag2sevr_ctl => constant64_op_net,
    diag3fixed_x0 => constant6_op_net,
    diag3sevr_ctl => constant64_op_net,
    diag4fixed_x0 => constant5_op_net,
    diag4sevr_ctl => constant64_op_net,
    diag5fixed_x0 => constant4_op_net,
    diag5sevr_ctl => constant64_op_net,
    diag6fixed_x0 => constant3_op_net,
    diag6sevr_ctl => constant64_op_net,
    diag7fixed_x0 => constant2_op_net,
    diag7sevr_ctl => constant64_op_net,
    diag8fixed_x0 => constant1_op_net,
    diag8sevr_ctl => constant64_op_net,
    diagnrst_ctl => constant31_op_net,
    diagnsync_ctl => constant32_op_net,
    cav1_nco_fb => convert_dout_net_x6,
    c1p1_delay_match => constant1_op_net_x0,
    c1p1_freq_err => convert_dout_net_x4,
    c1p1_integral_logic => convert5_dout_net_x4,
    c1p1_pt_cntr => counter_op_net_x2,
    c1p1_pt_window => convert11_dout_net_x3,
    c1p1_window_func => addsub3_s_net_x4,
    c1p2_delay_match => constant2_op_net_x0,
    c1p2_integral_logic => convert5_dout_net_x1,
    c1p2_pt_cntr => counter_op_net_x1,
    c1p2_pt_window => convert11_dout_net_x2,
    c1p2_window_func => addsub3_s_net_x6,
    cav1_p1_amp_out => register14_q_net_x2,
    cav1_p1_comparison_i => addsub_s_net_x2,
    cav1_p1_comparison_phase => addsub_s_net_x2,
    cav1_p1_comparison_q => addsub_s_net_x2,
    cav1_p1_dc_freq => convert_dout_net_x4,
    cav1_p1_dc_img => convert5_dout_net_x2,
    cav1_p1_dc_real => convert6_dout_net_x0,
    cav1_p1_delayed_dc_img => dual_port_ram_doutb_net_x2,
    cav1_p1_delayed_dc_real => dual_port_ram1_doutb_net_x2,
    cav1_p1_if_amp => down_sample1_q_net_x8,
    cav1_p1_if_i => down_sample1_q_net_x5,
    cav1_p1_if_phase => down_sample_q_net_x7,
    cav1_p1_if_q => down_sample_q_net_x4,
    cav1_p1_integrated_i => convert9_dout_net_x2,
    cav1_p1_integrated_q => convert10_dout_net_x2,
    cav1_p1_integrated_ref_i => convert2_dout_net_x4,
    cav1_p1_integrated_ref_q => convert4_dout_net_x2,
    cav1_p1_phase_out => register13_q_net_x2,
    cav1_p1_ref_phase_out => register11_q_net_x6,
    cav1_p1_windowed_img => mult2_p_net_x4,
    cav1_p1_windowed_real => mult_p_net_x6,
    cav1_p1_windowed_ref_i => mult4_p_net_x2,
    cav1_p1_windowed_ref_q => mult5_p_net_x2,
    cav1_p2_amp_out => register14_q_net_x3,
    cav1_p2_comparison_i => addsub_s_net_x1,
    cav1_p2_comparison_phase => addsub_s_net_x1,
    cav1_p2_comparison_q => addsub_s_net_x1,
    cav1_p2_dc_freq => convert_dout_net_x6,
    cav1_p2_dc_img => convert_dout_net_x2,
    cav1_p2_dc_real => convert1_dout_net_x1,
    cav1_p2_dc_tvalid => convert2_dout_net_x6,
    cav1_p2_delayed_dc_img => dual_port_ram_doutb_net_x1,
    cav1_p2_delayed_dc_real => dual_port_ram1_doutb_net_x1,
    cav1_p2_if_amp => down_sample1_q_net_x7,
    cav1_p2_if_i => down_sample1_q_net_x6,
    cav1_p2_if_phase => down_sample_q_net_x6,
    cav1_p2_if_q => down_sample_q_net_x5,
    cav1_p2_integrated_i => convert9_dout_net_x4,
    cav1_p2_integrated_q => convert10_dout_net_x3,
    cav1_p2_integrated_ref_i => convert2_dout_net_x7,
    cav1_p2_integrated_ref_q => convert4_dout_net_x3,
    cav1_p2_phase_out => register13_q_net_x3,
    cav1_p2_windowed_img => mult2_p_net_x3,
    cav1_p2_windowed_real => mult_p_net_x5,
    cav1_p2_windowed_ref_i => mult4_p_net_x1,
    cav1_p2_windowed_ref_q => mult5_p_net_x1,
    cav2_p2_ref_phase_out => register11_q_net_x5,
    dsp_cav1_reset => convert3_dout_net_x0,
    flo_c1p1_window => convert2_dout_net_x9,
    flo_c1p2_window => convert2_dout_net_x5,
    cav2_nco_fb => convert_dout_net_x0,
    c2p1_delay_match => constant1_op_net_x1,
    c2p1_freq_err => convert_dout_net_x1,
    c2p1_integral_logic => convert5_dout_net_x0,
    c2p1_pt_cntr => counter_op_net_x0,
    c2p1_pt_window => convert11_dout_net_x0,
    c2p1_window_func => addsub3_s_net_x2,
    c2p2_delay_match => constant2_op_net_x1,
    c2p2_integral_logic => convert5_dout_net,
    c2p2_pt_cntr => counter_op_net,
    c2p2_pt_window => convert11_dout_net_x1,
    c2p2_window_func => addsub3_s_net,
    cav1_p2_ref_phase_out => register11_q_net_x1,
    cav2_p1_amp_out => register14_q_net_x1,
    cav2_p1_comparison_i => addsub_s_net_x0,
    cav2_p1_comparison_phase => addsub_s_net_x0,
    cav2_p1_comparison_q => addsub_s_net_x0,
    cav2_p1_dc_freq => convert_dout_net_x1,
    cav2_p1_dc_img => convert5_dout_net_x3,
    cav2_p1_dc_real => convert1_dout_net_x3,
    cav2_p1_delayed_dc_img => dual_port_ram_doutb_net,
    cav2_p1_delayed_dc_real => dual_port_ram1_doutb_net_x0,
    cav2_p1_if_amp => down_sample1_q_net_x0,
    cav2_p1_if_i => down_sample1_q_net_x1,
    cav2_p1_if_phase => down_sample_q_net,
    cav2_p1_if_q => down_sample_q_net_x0,
    cav2_p1_integrated_i => convert9_dout_net_x1,
    cav2_p1_integrated_q => convert10_dout_net_x1,
    cav2_p1_integrated_ref_i => convert2_dout_net_x3,
    cav2_p1_integrated_ref_q => convert4_dout_net_x1,
    cav2_p1_phase_out => register13_q_net_x1,
    cav2_p1_ref_phase_out => register11_q_net_x0,
    cav2_p1_windowed_img => mult2_p_net_x1,
    cav2_p1_windowed_real => mult_p_net_x1,
    cav2_p1_windowed_ref_i => mult4_p_net_x0,
    cav2_p1_windowed_ref_q => mult5_p_net_x0,
    cav2_p2_amp_out => register14_q_net_x0,
    cav2_p2_comparison_i => addsub_s_net,
    cav2_p2_comparison_phase => addsub_s_net,
    cav2_p2_comparison_q => addsub_s_net,
    cav2_p2_dc_freq => convert_dout_net_x0,
    cav2_p2_dc_img => convert6_dout_net_x1,
    cav2_p2_dc_real => convert2_dout_net_x8,
    cav2_p2_delayed_dc_img => dual_port_ram_doutb_net_x0,
    cav2_p2_delayed_dc_real => dual_port_ram1_doutb_net,
    cav2_p2_if_amp => down_sample1_q_net_x3,
    cav2_p2_if_i => down_sample1_q_net_x2,
    cav2_p2_if_phase => down_sample_q_net_x2,
    cav2_p2_if_q => down_sample_q_net_x1,
    cav2_p2_integrated_i => convert9_dout_net_x0,
    cav2_p2_integrated_q => convert10_dout_net_x0,
    cav2_p2_integrated_ref_i => convert2_dout_net_x1,
    cav2_p2_integrated_ref_q => convert4_dout_net_x0,
    cav2_p2_phase_out => register13_q_net_x0,
    cav2_p2_windowed_img => mult2_p_net_x0,
    cav2_p2_windowed_real => mult_p_net_x0,
    cav2_p2_windowed_ref_i => mult4_p_net,
    cav2_p2_windowed_ref_q => mult5_p_net,
    dsp_cav2_reset => convert3_dout_net,
    flo_c2p1_window => convert2_dout_net_x0,
    flo_c2p2_window => convert2_dout_net_x2,
    rf_ref_amp => down_sample1_q_net,
    rf_ref_i => down_sample1_q_net_x4,
    rf_ref_phase => down_sample_q_net_x8,
    rf_ref_q => down_sample_q_net_x3
  );
end structural;
-- Generated from Simulink block 
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel_default_clock_driver is
  port (
    dsp_sysclk : in std_logic;
    dsp_sysce : in std_logic;
    dsp_sysclr : in std_logic;
    axi_lite_sysclk : in std_logic;
    axi_lite_sysce : in std_logic;
    axi_lite_sysclr : in std_logic;
    dsp_clk1 : out std_logic;
    dsp_ce1 : out std_logic;
    dsp_clk12 : out std_logic;
    dsp_ce12 : out std_logic;
    axi_lite_clk1 : out std_logic;
    axi_lite_ce1 : out std_logic;
    axi_lite_clk8 : out std_logic;
    axi_lite_ce8 : out std_logic
  );
end appmodel_default_clock_driver;
architecture structural of appmodel_default_clock_driver is 
begin
  clockdriver_x2 : entity work.xlclockdriver 
  generic map (
    period => 1,
    log_2_period => 1
  )
  port map (
    sysclk => dsp_sysclk,
    sysce => dsp_sysce,
    sysclr => dsp_sysclr,
    clk => dsp_clk1,
    ce => dsp_ce1
  );
  clockdriver_x1 : entity work.xlclockdriver 
  generic map (
    period => 12,
    log_2_period => 4
  )
  port map (
    sysclk => dsp_sysclk,
    sysce => dsp_sysce,
    sysclr => dsp_sysclr,
    clk => dsp_clk12,
    ce => dsp_ce12
  );
  clockdriver_x0 : entity work.xlclockdriver 
  generic map (
    period => 1,
    log_2_period => 1
  )
  port map (
    sysclk => axi_lite_sysclk,
    sysce => axi_lite_sysce,
    sysclr => axi_lite_sysclr,
    clk => axi_lite_clk1,
    ce => axi_lite_ce1
  );
  clockdriver : entity work.xlclockdriver 
  generic map (
    period => 8,
    log_2_period => 4
  )
  port map (
    sysclk => axi_lite_sysclk,
    sysce => axi_lite_sysce,
    sysclr => axi_lite_sysclr,
    clk => axi_lite_clk8,
    ce => axi_lite_ce8
  );
end structural;
-- Generated from Simulink block 
library IEEE;
use IEEE.std_logic_1164.all;
library work;
use work.conv_pkg.all;
entity appmodel is
  port (
    amp : in std_logic_vector( 18-1 downto 0 );
    ddcchannel : in std_logic_vector( 4-1 downto 0 );
    ddci : in std_logic_vector( 18-1 downto 0 );
    ddcq : in std_logic_vector( 18-1 downto 0 );
    ddcsync : in std_logic_vector( 1-1 downto 0 );
    phase : in std_logic_vector( 18-1 downto 0 );
    phaseampchannel : in std_logic_vector( 4-1 downto 0 );
    phaseampsync : in std_logic_vector( 1-1 downto 0 );
    dsp_clk : in std_logic;
    axi_lite_clk : in std_logic;
    axi_lite_aresetn : in std_logic;
    axi_lite_s_axi_awaddr : in std_logic_vector( 12-1 downto 0 );
    axi_lite_s_axi_awvalid : in std_logic;
    axi_lite_s_axi_wdata : in std_logic_vector( 32-1 downto 0 );
    axi_lite_s_axi_wstrb : in std_logic_vector( 4-1 downto 0 );
    axi_lite_s_axi_wvalid : in std_logic;
    axi_lite_s_axi_bready : in std_logic;
    axi_lite_s_axi_araddr : in std_logic_vector( 12-1 downto 0 );
    axi_lite_s_axi_arvalid : in std_logic;
    axi_lite_s_axi_rready : in std_logic;
    diag1data : out std_logic_vector( 32-1 downto 0 );
    diag1fixed : out std_logic_vector( 1-1 downto 0 );
    diag1sevr : out std_logic_vector( 2-1 downto 0 );
    diag2data : out std_logic_vector( 32-1 downto 0 );
    diag2fixed : out std_logic_vector( 1-1 downto 0 );
    diag2sevr : out std_logic_vector( 2-1 downto 0 );
    diag3data : out std_logic_vector( 32-1 downto 0 );
    diag3fixed : out std_logic_vector( 1-1 downto 0 );
    diag3sevr : out std_logic_vector( 2-1 downto 0 );
    diag4data : out std_logic_vector( 32-1 downto 0 );
    diag4fixed : out std_logic_vector( 1-1 downto 0 );
    diag4sevr : out std_logic_vector( 2-1 downto 0 );
    diag5data : out std_logic_vector( 32-1 downto 0 );
    diag5fixed : out std_logic_vector( 1-1 downto 0 );
    diag5sevr : out std_logic_vector( 2-1 downto 0 );
    diag6data : out std_logic_vector( 32-1 downto 0 );
    diag6fixed : out std_logic_vector( 1-1 downto 0 );
    diag6sevr : out std_logic_vector( 2-1 downto 0 );
    diag7data : out std_logic_vector( 32-1 downto 0 );
    diag7fixed : out std_logic_vector( 1-1 downto 0 );
    diag7sevr : out std_logic_vector( 2-1 downto 0 );
    diag8data : out std_logic_vector( 32-1 downto 0 );
    diag8fixed : out std_logic_vector( 1-1 downto 0 );
    diag8sevr : out std_logic_vector( 2-1 downto 0 );
    diagnclk : out std_logic_vector( 1-1 downto 0 );
    diagnrst : out std_logic_vector( 1-1 downto 0 );
    diagnsync : out std_logic_vector( 1-1 downto 0 );
    wfdata_0 : out std_logic_vector( 32-1 downto 0 );
    wfdata_1 : out std_logic_vector( 32-1 downto 0 );
    wfdata_2 : out std_logic_vector( 32-1 downto 0 );
    wfdata_3 : out std_logic_vector( 32-1 downto 0 );
    wfdata_4 : out std_logic_vector( 32-1 downto 0 );
    wfdata_5 : out std_logic_vector( 32-1 downto 0 );
    wfdata_6 : out std_logic_vector( 32-1 downto 0 );
    wfdata_7 : out std_logic_vector( 32-1 downto 0 );
    wfvalid_0 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_1 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_2 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_3 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_4 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_5 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_6 : out std_logic_vector( 1-1 downto 0 );
    wfvalid_7 : out std_logic_vector( 1-1 downto 0 );
    diag9fixed : out std_logic_vector( 1-1 downto 0 );
    diag10fixed : out std_logic_vector( 1-1 downto 0 );
    diag11fixed : out std_logic_vector( 1-1 downto 0 );
    diag12fixed : out std_logic_vector( 1-1 downto 0 );
    diag13fixed : out std_logic_vector( 1-1 downto 0 );
    diag14fixed : out std_logic_vector( 1-1 downto 0 );
    diag15fixed : out std_logic_vector( 1-1 downto 0 );
    diag16fixed : out std_logic_vector( 1-1 downto 0 );
    diag26fixed : out std_logic_vector( 1-1 downto 0 );
    diag27fixed : out std_logic_vector( 1-1 downto 0 );
    diag28fixed : out std_logic_vector( 1-1 downto 0 );
    diag29fixed : out std_logic_vector( 1-1 downto 0 );
    diag30fixed : out std_logic_vector( 1-1 downto 0 );
    diag31fixed : out std_logic_vector( 1-1 downto 0 );
    diag17fixed : out std_logic_vector( 1-1 downto 0 );
    diag18fixed : out std_logic_vector( 1-1 downto 0 );
    diag19fixed : out std_logic_vector( 1-1 downto 0 );
    diag20fixed : out std_logic_vector( 1-1 downto 0 );
    diag21fixed : out std_logic_vector( 1-1 downto 0 );
    diag22fixed : out std_logic_vector( 1-1 downto 0 );
    diag23fixed : out std_logic_vector( 1-1 downto 0 );
    diag24fixed : out std_logic_vector( 1-1 downto 0 );
    diag25fixed : out std_logic_vector( 1-1 downto 0 );
    diag9sevr : out std_logic_vector( 2-1 downto 0 );
    diag10sevr : out std_logic_vector( 2-1 downto 0 );
    diag11sevr : out std_logic_vector( 2-1 downto 0 );
    diag12sevr : out std_logic_vector( 2-1 downto 0 );
    diag13sevr : out std_logic_vector( 2-1 downto 0 );
    diag14sevr : out std_logic_vector( 2-1 downto 0 );
    diag15sevr : out std_logic_vector( 2-1 downto 0 );
    diag16sevr : out std_logic_vector( 2-1 downto 0 );
    diag26sevr : out std_logic_vector( 2-1 downto 0 );
    diag27sevr : out std_logic_vector( 2-1 downto 0 );
    diag28sevr : out std_logic_vector( 2-1 downto 0 );
    diag29sevr : out std_logic_vector( 2-1 downto 0 );
    diag30sevr : out std_logic_vector( 2-1 downto 0 );
    diag31sevr : out std_logic_vector( 2-1 downto 0 );
    diag17sevr : out std_logic_vector( 2-1 downto 0 );
    diag18sevr : out std_logic_vector( 2-1 downto 0 );
    diag19sevr : out std_logic_vector( 2-1 downto 0 );
    diag20sevr : out std_logic_vector( 2-1 downto 0 );
    diag21sevr : out std_logic_vector( 2-1 downto 0 );
    diag22sevr : out std_logic_vector( 2-1 downto 0 );
    diag23sevr : out std_logic_vector( 2-1 downto 0 );
    diag24sevr : out std_logic_vector( 2-1 downto 0 );
    diag25sevr : out std_logic_vector( 2-1 downto 0 );
    gateway_out3_x0 : out std_logic_vector( 26-1 downto 0 );
    gateway_out39 : out std_logic_vector( 18-1 downto 0 );
    gateway_out4_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out40 : out std_logic_vector( 18-1 downto 0 );
    gateway_out5_x0 : out std_logic_vector( 26-1 downto 0 );
    gateway_out10_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out16_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out3_x1 : out std_logic_vector( 26-1 downto 0 );
    gateway_out4_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out5_x1 : out std_logic_vector( 26-1 downto 0 );
    gateway_out6 : out std_logic_vector( 18-1 downto 0 );
    gateway_out7 : out std_logic_vector( 34-1 downto 0 );
    gateway_out8 : out std_logic_vector( 1-1 downto 0 );
    gateway_out : out std_logic_vector( 1-1 downto 0 );
    gateway_out1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x8 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3_x9 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x7 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6_x7 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x7 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x9 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out1_x9 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x9 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x10 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x8 : out std_logic_vector( 1-1 downto 0 );
    gateway_out24_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x5 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x7 : out std_logic_vector( 20-1 downto 0 );
    gateway_out24_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x5 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x6 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x8 : out std_logic_vector( 20-1 downto 0 );
    gateway_out1_x8 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x7 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x8 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out32_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out36_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out32_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out36_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x5 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19_x1 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x11 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x5 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x5 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29_x5 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x12 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x6 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x12 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x14 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x13 : out std_logic_vector( 10-1 downto 0 );
    gateway_out11_x6 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19_x2 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x12 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x6 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x6 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29_x6 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x13 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x5 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x14 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x10 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x10 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x11 : out std_logic_vector( 10-1 downto 0 );
    gateway_out39_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out40_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out10_x3 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x3 : out std_logic_vector( 18-1 downto 0 );
    gateway_out16_x3 : out std_logic_vector( 18-1 downto 0 );
    gateway_out3_x11 : out std_logic_vector( 26-1 downto 0 );
    gateway_out4_x5 : out std_logic_vector( 18-1 downto 0 );
    gateway_out5_x9 : out std_logic_vector( 26-1 downto 0 );
    gateway_out6_x8 : out std_logic_vector( 18-1 downto 0 );
    gateway_out7_x8 : out std_logic_vector( 34-1 downto 0 );
    gateway_out8_x10 : out std_logic_vector( 1-1 downto 0 );
    gateway_out_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x11 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10_x4 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x12 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3_x3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4_x3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x4 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x4 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x3 : out std_logic_vector( 20-1 downto 0 );
    gateway_out10_x2 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out12_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out13_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out14_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out15_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out16_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out17_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out22_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out23_x1 : out std_logic_vector( 20-1 downto 0 );
    gateway_out3_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out4_x4 : out std_logic_vector( 32-1 downto 0 );
    gateway_out5_x3 : out std_logic_vector( 18-1 downto 0 );
    gateway_out6_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out8_x1 : out std_logic_vector( 18-1 downto 0 );
    gateway_out9_x0 : out std_logic_vector( 32-1 downto 0 );
    gateway_out1_x1 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x0 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out24 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x2 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x2 : out std_logic_vector( 20-1 downto 0 );
    gateway_out24_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out25_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out26_x0 : out std_logic_vector( 20-1 downto 0 );
    gateway_out6_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out7_x3 : out std_logic_vector( 20-1 downto 0 );
    gateway_out8_x3 : out std_logic_vector( 20-1 downto 0 );
    gateway_out1_x2 : out std_logic_vector( 16-1 downto 0 );
    gateway_out2_x1 : out std_logic_vector( 16-1 downto 0 );
    gateway_out27_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out28_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out29_x1 : out std_logic_vector( 1-1 downto 0 );
    gateway_out3_x6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out5_x5 : out std_logic_vector( 1-1 downto 0 );
    gateway_out32 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out36 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38 : out std_logic_vector( 18-1 downto 0 );
    gateway_out32_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out34_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out35 : out std_logic_vector( 18-1 downto 0 );
    gateway_out36_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out37_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out38_x0 : out std_logic_vector( 18-1 downto 0 );
    gateway_out11_x3 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20_x0 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x6 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x2 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29_x2 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x7 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x3 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x4 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x3 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x5 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x4 : out std_logic_vector( 10-1 downto 0 );
    gateway_out11_x2 : out std_logic_vector( 32-1 downto 0 );
    gateway_out19 : out std_logic_vector( 33-1 downto 0 );
    gateway_out20 : out std_logic_vector( 1-1 downto 0 );
    gateway_out8_x5 : out std_logic_vector( 63-1 downto 0 );
    gateway_out27_x1 : out std_logic_vector( 32-1 downto 0 );
    gateway_out28_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out29_x0 : out std_logic_vector( 33-1 downto 0 );
    gateway_out3_x5 : out std_logic_vector( 32-1 downto 0 );
    gateway_out_x2 : out std_logic_vector( 33-1 downto 0 );
    gateway_out1_x6 : out std_logic_vector( 1-1 downto 0 );
    gateway_out2_x5 : out std_logic_vector( 1-1 downto 0 );
    gateway_out1_x7 : out std_logic_vector( 32-1 downto 0 );
    gateway_out2_x6 : out std_logic_vector( 10-1 downto 0 );
    axi_lite_s_axi_awready : out std_logic;
    axi_lite_s_axi_wready : out std_logic;
    axi_lite_s_axi_bresp : out std_logic_vector( 2-1 downto 0 );
    axi_lite_s_axi_bvalid : out std_logic;
    axi_lite_s_axi_arready : out std_logic;
    axi_lite_s_axi_rdata : out std_logic_vector( 32-1 downto 0 );
    axi_lite_s_axi_rresp : out std_logic_vector( 2-1 downto 0 );
    axi_lite_s_axi_rvalid : out std_logic
  );
end appmodel;
architecture structural of appmodel is 
  attribute core_generation_info : string;
  attribute core_generation_info of structural : architecture is "appmodel,sysgen_core_2017_4,{,compilation=Synthesized Checkpoint,block_icon_display=Default,family=kintexu,part=xcku040,speed=-2-e,package=ffva1156,synthesis_language=vhdl,hdl_library=work,synthesis_strategy=Flow_PerfOptimized_high,implementation_strategy=Vivado Implementation Defaults,testbench=0,interface_doc=1,ce_clr=0,clock_period=-10,system_simulink_period=-1,waveform_viewer=1,axilite_interface=1,ip_catalog_plugin=0,hwcosim_burst_mode=0,simulation_time=1.5e-05,abs=16,accum=24,addsub=62,ceprobe=7,cmpy_v6_0=4,cmult=40,constant=198,convert=208,cordic_v6_0=15,counter=9,dds_compiler_v6_0=2,delay=132,divide=8,dpram=8,dsamp=121,fir_compiler_v7_2=2,inv=48,logical=8,mult=38,mux=8,register=524,relational=76,usamp=23,}";
  signal cav1_nco_phase_adj : std_logic_vector( 32-1 downto 0 );
  signal cav1_nco_phase_reset : std_logic_vector( 1-1 downto 0 );
  signal cav1_p1_amp_out : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_calibration_coeff : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal cav1_p1_comparison_i : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_comparison_phase : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_comparison_q : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal cav1_p1_dc_img : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_dc_real : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_if_amp : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_if_i : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_if_phase : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_if_q : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_integrated_i : std_logic_vector( 20-1 downto 0 );
  signal cav1_p1_integrated_q : std_logic_vector( 20-1 downto 0 );
  signal cav1_p1_phase_out : std_logic_vector( 18-1 downto 0 );
  signal cav1_p1_window_start : std_logic_vector( 16-1 downto 0 );
  signal cav1_p1_window_stop : std_logic_vector( 16-1 downto 0 );
  signal cav1_p2_amp_out : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_calibration_coeff : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal cav1_p2_comparison_i : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_comparison_phase : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_comparison_q : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal cav1_p2_dc_img : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_dc_real : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_if_amp : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_if_i : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_if_phase : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_if_q : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_dc_img : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_integrated_i : std_logic_vector( 20-1 downto 0 );
  signal cav1_p2_integrated_q : std_logic_vector( 20-1 downto 0 );
  signal cav1_p2_phase_out : std_logic_vector( 18-1 downto 0 );
  signal cav1_p2_window_start : std_logic_vector( 16-1 downto 0 );
  signal cav1_p2_window_stop : std_logic_vector( 16-1 downto 0 );
  signal cav2_nco_phase_adj : std_logic_vector( 32-1 downto 0 );
  signal cav2_nco_phase_reset : std_logic_vector( 1-1 downto 0 );
  signal cav2_p1_amp_out : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_calibration_coeff : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal cav2_p1_comparison_i : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_comparison_phase : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_comparison_q : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal cav2_p1_dc_img : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_dc_real : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_if_amp : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_if_i : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_if_phase : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_if_q : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_integrated_i : std_logic_vector( 20-1 downto 0 );
  signal cav2_p1_integrated_q : std_logic_vector( 20-1 downto 0 );
  signal cav2_p1_phase_out : std_logic_vector( 18-1 downto 0 );
  signal cav2_p1_window_start : std_logic_vector( 16-1 downto 0 );
  signal cav2_p1_window_stop : std_logic_vector( 16-1 downto 0 );
  signal cav2_p2_amp_out : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_calibration_coeff : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal cav2_p2_comparison_i : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_comparison_phase : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_comparison_q : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_dc_freq : std_logic_vector( 32-1 downto 0 );
  signal cav2_p2_dc_real : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_if_amp : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_if_i : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_if_phase : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_if_q : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_integrated_i : std_logic_vector( 20-1 downto 0 );
  signal cav2_p2_integrated_q : std_logic_vector( 20-1 downto 0 );
  signal cav2_p2_phase_out : std_logic_vector( 18-1 downto 0 );
  signal cav2_p2_window_start : std_logic_vector( 16-1 downto 0 );
  signal cav2_p2_window_stop : std_logic_vector( 16-1 downto 0 );
  signal ref_window_start : std_logic_vector( 16-1 downto 0 );
  signal ref_window_stop : std_logic_vector( 16-1 downto 0 );
  signal rf_ref_amp : std_logic_vector( 18-1 downto 0 );
  signal rf_ref_chan_sel : std_logic_vector( 4-1 downto 0 );
  signal rf_ref_i : std_logic_vector( 18-1 downto 0 );
  signal rf_ref_phase : std_logic_vector( 18-1 downto 0 );
  signal rf_ref_q : std_logic_vector( 18-1 downto 0 );
  signal scratchpad : std_logic_vector( 32-1 downto 0 );
  signal status_0 : std_logic_vector( 32-1 downto 0 );
  signal clk_1_net_x0 : std_logic;
  signal ce_1_net_x0 : std_logic;
  signal clk_12_net : std_logic;
  signal ce_12_net : std_logic;
  signal clk_1_net : std_logic;
  signal ce_1_net : std_logic;
  signal clk_8_net : std_logic;
  signal ce_8_net : std_logic;
  signal axi_lite_clk_net : std_logic;
begin
  axi_lite_axi_lite_interface : entity work.axi_lite_axi_lite_interface 
  port map (
    cav1_p1_amp_out => cav1_p1_amp_out,
    cav1_p1_comparison_i => cav1_p1_comparison_i,
    cav1_p1_comparison_phase => cav1_p1_comparison_phase,
    cav1_p1_comparison_q => cav1_p1_comparison_q,
    cav1_p1_dc_freq => cav1_p1_dc_freq,
    cav1_p1_dc_img => cav1_p1_dc_img,
    cav1_p1_dc_real => cav1_p1_dc_real,
    cav1_p1_if_amp => cav1_p1_if_amp,
    cav1_p1_if_i => cav1_p1_if_i,
    cav1_p1_if_phase => cav1_p1_if_phase,
    cav1_p1_if_q => cav1_p1_if_q,
    cav1_p1_integrated_i => cav1_p1_integrated_i,
    cav1_p1_integrated_q => cav1_p1_integrated_q,
    cav1_p1_phase_out => cav1_p1_phase_out,
    cav1_p2_amp_out => cav1_p2_amp_out,
    cav1_p2_comparison_i => cav1_p2_comparison_i,
    cav1_p2_comparison_phase => cav1_p2_comparison_phase,
    cav1_p2_comparison_q => cav1_p2_comparison_q,
    cav1_p2_dc_freq => cav1_p2_dc_freq,
    cav1_p2_dc_img => cav1_p2_dc_img,
    cav1_p2_dc_real => cav1_p2_dc_real,
    cav1_p2_if_amp => cav1_p2_if_amp,
    cav1_p2_if_i => cav1_p2_if_i,
    cav1_p2_if_phase => cav1_p2_if_phase,
    cav1_p2_if_q => cav1_p2_if_q,
    cav1_p2_integrated_i => cav1_p2_integrated_i,
    cav1_p2_integrated_q => cav1_p2_integrated_q,
    cav1_p2_phase_out => cav1_p2_phase_out,
    cav2_p1_amp_out => cav2_p1_amp_out,
    cav2_p1_comparison_i => cav2_p1_comparison_i,
    cav2_p1_comparison_phase => cav2_p1_comparison_phase,
    cav2_p1_comparison_q => cav2_p1_comparison_q,
    cav2_p1_dc_freq => cav2_p1_dc_freq,
    cav2_p1_dc_img => cav2_p1_dc_img,
    cav2_p1_dc_real => cav2_p1_dc_real,
    cav2_p1_if_amp => cav2_p1_if_amp,
    cav2_p1_if_i => cav2_p1_if_i,
    cav2_p1_if_phase => cav2_p1_if_phase,
    cav2_p1_if_q => cav2_p1_if_q,
    cav2_p1_integrated_i => cav2_p1_integrated_i,
    cav2_p1_integrated_q => cav2_p1_integrated_q,
    cav2_p1_phase_out => cav2_p1_phase_out,
    cav2_p2_amp_out => cav2_p2_amp_out,
    cav2_p2_comparison_i => cav2_p2_comparison_i,
    cav2_p2_comparison_phase => cav2_p2_comparison_phase,
    cav2_p2_comparison_q => cav2_p2_comparison_q,
    cav2_p2_dc_freq => cav2_p2_dc_freq,
    cav2_p2_dc_img => cav2_p2_dc_img,
    cav2_p2_dc_real => cav2_p2_dc_real,
    cav2_p2_if_amp => cav2_p2_if_amp,
    cav2_p2_if_i => cav2_p2_if_i,
    cav2_p2_if_phase => cav2_p2_if_phase,
    cav2_p2_if_q => cav2_p2_if_q,
    cav2_p2_integrated_i => cav2_p2_integrated_i,
    cav2_p2_integrated_q => cav2_p2_integrated_q,
    cav2_p2_phase_out => cav2_p2_phase_out,
    rf_ref_amp => rf_ref_amp,
    rf_ref_i => rf_ref_i,
    rf_ref_phase => rf_ref_phase,
    rf_ref_q => rf_ref_q,
    status_0 => status_0,
    axi_lite_s_axi_awaddr => axi_lite_s_axi_awaddr,
    axi_lite_s_axi_awvalid => axi_lite_s_axi_awvalid,
    axi_lite_s_axi_wdata => axi_lite_s_axi_wdata,
    axi_lite_s_axi_wstrb => axi_lite_s_axi_wstrb,
    axi_lite_s_axi_wvalid => axi_lite_s_axi_wvalid,
    axi_lite_s_axi_bready => axi_lite_s_axi_bready,
    axi_lite_s_axi_araddr => axi_lite_s_axi_araddr,
    axi_lite_s_axi_arvalid => axi_lite_s_axi_arvalid,
    axi_lite_s_axi_rready => axi_lite_s_axi_rready,
    axi_lite_aresetn => axi_lite_aresetn,
    axi_lite_aclk => axi_lite_clk,
    scratchpad => scratchpad,
    rf_ref_chan_sel => rf_ref_chan_sel,
    ref_window_stop => ref_window_stop,
    ref_window_start => ref_window_start,
    cav2_p2_window_stop => cav2_p2_window_stop,
    cav2_p2_window_start => cav2_p2_window_start,
    cav2_p2_chan_sel => cav2_p2_chan_sel,
    cav2_p2_calibration_coeff => cav2_p2_calibration_coeff,
    cav2_p1_window_stop => cav2_p1_window_stop,
    cav2_p1_window_start => cav2_p1_window_start,
    cav2_p1_chan_sel => cav2_p1_chan_sel,
    cav2_p1_calibration_coeff => cav2_p1_calibration_coeff,
    cav2_nco_phase_reset => cav2_nco_phase_reset,
    cav2_nco_phase_adj => cav2_nco_phase_adj,
    cav1_p2_window_stop => cav1_p2_window_stop,
    cav1_p2_window_start => cav1_p2_window_start,
    cav1_p2_chan_sel => cav1_p2_chan_sel,
    cav1_p2_calibration_coeff => cav1_p2_calibration_coeff,
    cav1_p1_window_stop => cav1_p1_window_stop,
    cav1_p1_window_start => cav1_p1_window_start,
    cav1_p1_chan_sel => cav1_p1_chan_sel,
    cav1_p1_calibration_coeff => cav1_p1_calibration_coeff,
    cav1_nco_phase_reset => cav1_nco_phase_reset,
    cav1_nco_phase_adj => cav1_nco_phase_adj,
    axi_lite_s_axi_awready => axi_lite_s_axi_awready,
    axi_lite_s_axi_wready => axi_lite_s_axi_wready,
    axi_lite_s_axi_bresp => axi_lite_s_axi_bresp,
    axi_lite_s_axi_bvalid => axi_lite_s_axi_bvalid,
    axi_lite_s_axi_arready => axi_lite_s_axi_arready,
    axi_lite_s_axi_rdata => axi_lite_s_axi_rdata,
    axi_lite_s_axi_rresp => axi_lite_s_axi_rresp,
    axi_lite_s_axi_rvalid => axi_lite_s_axi_rvalid,
    axi_lite_clk => axi_lite_clk_net
  );
  appmodel_default_clock_driver : entity work.appmodel_default_clock_driver 
  port map (
    dsp_sysclk => dsp_clk,
    dsp_sysce => '1',
    dsp_sysclr => '0',
    axi_lite_sysclk => axi_lite_clk_net,
    axi_lite_sysce => '1',
    axi_lite_sysclr => '0',
    dsp_clk1 => clk_1_net_x0,
    dsp_ce1 => ce_1_net_x0,
    dsp_clk12 => clk_12_net,
    dsp_ce12 => ce_12_net,
    axi_lite_clk1 => clk_1_net,
    axi_lite_ce1 => ce_1_net,
    axi_lite_clk8 => clk_8_net,
    axi_lite_ce8 => ce_8_net
  );
  appmodel_struct : entity work.appmodel_struct 
  port map (
    cav1_nco_phase_adj => cav1_nco_phase_adj,
    cav1_nco_phase_reset => cav1_nco_phase_reset,
    cav1_p1_calibration_coeff => cav1_p1_calibration_coeff,
    cav1_p1_chan_sel => cav1_p1_chan_sel,
    cav1_p1_window_start => cav1_p1_window_start,
    cav1_p1_window_stop => cav1_p1_window_stop,
    cav1_p2_calibration_coeff => cav1_p2_calibration_coeff,
    cav1_p2_chan_sel => cav1_p2_chan_sel,
    cav1_p2_window_start => cav1_p2_window_start,
    cav1_p2_window_stop => cav1_p2_window_stop,
    cav2_nco_phase_adj => cav2_nco_phase_adj,
    cav2_nco_phase_reset => cav2_nco_phase_reset,
    cav2_p1_calibration_coeff => cav2_p1_calibration_coeff,
    cav2_p1_chan_sel => cav2_p1_chan_sel,
    cav2_p1_window_start => cav2_p1_window_start,
    cav2_p1_window_stop => cav2_p1_window_stop,
    cav2_p2_calibration_coeff => cav2_p2_calibration_coeff,
    cav2_p2_chan_sel => cav2_p2_chan_sel,
    cav2_p2_window_start => cav2_p2_window_start,
    cav2_p2_window_stop => cav2_p2_window_stop,
    ref_window_start => ref_window_start,
    ref_window_stop => ref_window_stop,
    rf_ref_chan_sel => rf_ref_chan_sel,
    scratchpad => scratchpad,
    amp => amp,
    ddcchannel => ddcchannel,
    ddci => ddci,
    ddcq => ddcq,
    ddcsync => ddcsync,
    phase => phase,
    phaseampchannel => phaseampchannel,
    phaseampsync => phaseampsync,
    clk_1_x0 => clk_1_net_x0,
    ce_1_x0 => ce_1_net_x0,
    clk_12 => clk_12_net,
    ce_12 => ce_12_net,
    clk_1 => clk_1_net,
    ce_1 => ce_1_net,
    clk_8 => clk_8_net,
    ce_8 => ce_8_net,
    cav1_p1_amp_out => cav1_p1_amp_out,
    cav1_p1_comparison_i => cav1_p1_comparison_i,
    cav1_p1_comparison_phase => cav1_p1_comparison_phase,
    cav1_p1_comparison_q => cav1_p1_comparison_q,
    cav1_p1_dc_freq => cav1_p1_dc_freq,
    cav1_p1_dc_img => cav1_p1_dc_img,
    cav1_p1_dc_real => cav1_p1_dc_real,
    cav1_p1_if_amp => cav1_p1_if_amp,
    cav1_p1_if_i => cav1_p1_if_i,
    cav1_p1_if_phase => cav1_p1_if_phase,
    cav1_p1_if_q => cav1_p1_if_q,
    cav1_p1_integrated_i => cav1_p1_integrated_i,
    cav1_p1_integrated_q => cav1_p1_integrated_q,
    cav1_p1_phase_out => cav1_p1_phase_out,
    cav1_p2_amp_out => cav1_p2_amp_out,
    cav1_p2_comparison_i => cav1_p2_comparison_i,
    cav1_p2_comparison_phase => cav1_p2_comparison_phase,
    cav1_p2_comparison_q => cav1_p2_comparison_q,
    cav1_p2_dc_freq => cav1_p2_dc_freq,
    cav1_p2_dc_img => cav1_p2_dc_img,
    cav1_p2_dc_real => cav1_p2_dc_real,
    cav1_p2_if_amp => cav1_p2_if_amp,
    cav1_p2_if_i => cav1_p2_if_i,
    cav1_p2_if_phase => cav1_p2_if_phase,
    cav1_p2_if_q => cav1_p2_if_q,
    cav1_p2_integrated_i => cav1_p2_integrated_i,
    cav1_p2_integrated_q => cav1_p2_integrated_q,
    cav1_p2_phase_out => cav1_p2_phase_out,
    cav2_p1_amp_out => cav2_p1_amp_out,
    cav2_p1_comparison_i => cav2_p1_comparison_i,
    cav2_p1_comparison_phase => cav2_p1_comparison_phase,
    cav2_p1_comparison_q => cav2_p1_comparison_q,
    cav2_p1_dc_freq => cav2_p1_dc_freq,
    cav2_p1_dc_img => cav2_p1_dc_img,
    cav2_p1_dc_real => cav2_p1_dc_real,
    cav2_p1_if_amp => cav2_p1_if_amp,
    cav2_p1_if_i => cav2_p1_if_i,
    cav2_p1_if_phase => cav2_p1_if_phase,
    cav2_p1_if_q => cav2_p1_if_q,
    cav2_p1_integrated_i => cav2_p1_integrated_i,
    cav2_p1_integrated_q => cav2_p1_integrated_q,
    cav2_p1_phase_out => cav2_p1_phase_out,
    cav2_p2_amp_out => cav2_p2_amp_out,
    cav2_p2_comparison_i => cav2_p2_comparison_i,
    cav2_p2_comparison_phase => cav2_p2_comparison_phase,
    cav2_p2_comparison_q => cav2_p2_comparison_q,
    cav2_p2_dc_freq => cav2_p2_dc_freq,
    cav2_p2_dc_img => cav2_p2_dc_img,
    cav2_p2_dc_real => cav2_p2_dc_real,
    cav2_p2_if_amp => cav2_p2_if_amp,
    cav2_p2_if_i => cav2_p2_if_i,
    cav2_p2_if_phase => cav2_p2_if_phase,
    cav2_p2_if_q => cav2_p2_if_q,
    cav2_p2_integrated_i => cav2_p2_integrated_i,
    cav2_p2_integrated_q => cav2_p2_integrated_q,
    cav2_p2_phase_out => cav2_p2_phase_out,
    rf_ref_amp => rf_ref_amp,
    rf_ref_i => rf_ref_i,
    rf_ref_phase => rf_ref_phase,
    rf_ref_q => rf_ref_q,
    status_0 => status_0,
    diag1data => diag1data,
    diag1fixed => diag1fixed,
    diag1sevr => diag1sevr,
    diag2data => diag2data,
    diag2fixed => diag2fixed,
    diag2sevr => diag2sevr,
    diag3data => diag3data,
    diag3fixed => diag3fixed,
    diag3sevr => diag3sevr,
    diag4data => diag4data,
    diag4fixed => diag4fixed,
    diag4sevr => diag4sevr,
    diag5data => diag5data,
    diag5fixed => diag5fixed,
    diag5sevr => diag5sevr,
    diag6data => diag6data,
    diag6fixed => diag6fixed,
    diag6sevr => diag6sevr,
    diag7data => diag7data,
    diag7fixed => diag7fixed,
    diag7sevr => diag7sevr,
    diag8data => diag8data,
    diag8fixed => diag8fixed,
    diag8sevr => diag8sevr,
    diagnclk => diagnclk,
    diagnrst => diagnrst,
    diagnsync => diagnsync,
    wfdata_0 => wfdata_0,
    wfdata_1 => wfdata_1,
    wfdata_2 => wfdata_2,
    wfdata_3 => wfdata_3,
    wfdata_4 => wfdata_4,
    wfdata_5 => wfdata_5,
    wfdata_6 => wfdata_6,
    wfdata_7 => wfdata_7,
    wfvalid_0 => wfvalid_0,
    wfvalid_1 => wfvalid_1,
    wfvalid_2 => wfvalid_2,
    wfvalid_3 => wfvalid_3,
    wfvalid_4 => wfvalid_4,
    wfvalid_5 => wfvalid_5,
    wfvalid_6 => wfvalid_6,
    wfvalid_7 => wfvalid_7,
    diag9fixed => diag9fixed,
    diag10fixed => diag10fixed,
    diag11fixed => diag11fixed,
    diag12fixed => diag12fixed,
    diag13fixed => diag13fixed,
    diag14fixed => diag14fixed,
    diag15fixed => diag15fixed,
    diag16fixed => diag16fixed,
    diag26fixed => diag26fixed,
    diag27fixed => diag27fixed,
    diag28fixed => diag28fixed,
    diag29fixed => diag29fixed,
    diag30fixed => diag30fixed,
    diag31fixed => diag31fixed,
    diag17fixed => diag17fixed,
    diag18fixed => diag18fixed,
    diag19fixed => diag19fixed,
    diag20fixed => diag20fixed,
    diag21fixed => diag21fixed,
    diag22fixed => diag22fixed,
    diag23fixed => diag23fixed,
    diag24fixed => diag24fixed,
    diag25fixed => diag25fixed,
    diag9sevr => diag9sevr,
    diag10sevr => diag10sevr,
    diag11sevr => diag11sevr,
    diag12sevr => diag12sevr,
    diag13sevr => diag13sevr,
    diag14sevr => diag14sevr,
    diag15sevr => diag15sevr,
    diag16sevr => diag16sevr,
    diag26sevr => diag26sevr,
    diag27sevr => diag27sevr,
    diag28sevr => diag28sevr,
    diag29sevr => diag29sevr,
    diag30sevr => diag30sevr,
    diag31sevr => diag31sevr,
    diag17sevr => diag17sevr,
    diag18sevr => diag18sevr,
    diag19sevr => diag19sevr,
    diag20sevr => diag20sevr,
    diag21sevr => diag21sevr,
    diag22sevr => diag22sevr,
    diag23sevr => diag23sevr,
    diag24sevr => diag24sevr,
    diag25sevr => diag25sevr,
    gateway_out3_x0 => gateway_out3_x0,
    gateway_out39 => gateway_out39,
    gateway_out4_x0 => gateway_out4_x1,
    gateway_out40 => gateway_out40,
    gateway_out5_x1 => gateway_out5_x0,
    gateway_out10_x1 => gateway_out10_x1,
    gateway_out15_x0 => gateway_out15_x0,
    gateway_out16_x0 => gateway_out16_x0,
    gateway_out3_x1 => gateway_out3_x1,
    gateway_out4_x1 => gateway_out4_x2,
    gateway_out5 => gateway_out5_x1,
    gateway_out6 => gateway_out6,
    gateway_out7 => gateway_out7,
    gateway_out8 => gateway_out8,
    gateway_out => gateway_out,
    gateway_out1 => gateway_out1,
    gateway_out10_x0 => gateway_out10,
    gateway_out11 => gateway_out11_x0,
    gateway_out12 => gateway_out12,
    gateway_out13 => gateway_out13,
    gateway_out14 => gateway_out14,
    gateway_out15 => gateway_out15,
    gateway_out16 => gateway_out16,
    gateway_out17 => gateway_out17,
    gateway_out2 => gateway_out2,
    gateway_out22 => gateway_out22,
    gateway_out23 => gateway_out23,
    gateway_out3 => gateway_out3,
    gateway_out4 => gateway_out4,
    gateway_out5_x0 => gateway_out5,
    gateway_out6_x0 => gateway_out6_x0,
    gateway_out7_x0 => gateway_out7_x0,
    gateway_out8_x0 => gateway_out8_x0,
    gateway_out9 => gateway_out9,
    gateway_out_x0 => gateway_out_x0,
    gateway_out1_x0 => gateway_out1_x0,
    gateway_out10 => gateway_out10_x0,
    gateway_out11_x3 => gateway_out11,
    gateway_out12_x1 => gateway_out12_x1,
    gateway_out13_x1 => gateway_out13_x1,
    gateway_out14_x0 => gateway_out14_x1,
    gateway_out15_x2 => gateway_out15_x2,
    gateway_out16_x2 => gateway_out16_x2,
    gateway_out17_x1 => gateway_out17_x1,
    gateway_out2_x8 => gateway_out2_x8,
    gateway_out22_x2 => gateway_out22_x2,
    gateway_out23_x2 => gateway_out23_x2,
    gateway_out3_x9 => gateway_out3_x9,
    gateway_out4_x4 => gateway_out4_x0,
    gateway_out5_x7 => gateway_out5_x7,
    gateway_out6_x7 => gateway_out6_x7,
    gateway_out7_x7 => gateway_out7_x7,
    gateway_out8_x9 => gateway_out8_x9,
    gateway_out9_x2 => gateway_out9_x2,
    gateway_out1_x9 => gateway_out1_x9,
    gateway_out2_x9 => gateway_out2_x9,
    gateway_out27_x4 => gateway_out27_x4,
    gateway_out28_x4 => gateway_out28_x4,
    gateway_out29_x4 => gateway_out29_x4,
    gateway_out3_x10 => gateway_out3_x10,
    gateway_out5_x8 => gateway_out5_x8,
    gateway_out24_x2 => gateway_out24_x2,
    gateway_out25_x2 => gateway_out25_x2,
    gateway_out26_x2 => gateway_out26_x2,
    gateway_out6_x5 => gateway_out6_x6,
    gateway_out7_x5 => gateway_out7_x5,
    gateway_out8_x7 => gateway_out8_x7,
    gateway_out24_x1 => gateway_out24_x1,
    gateway_out25_x1 => gateway_out25_x1,
    gateway_out26_x1 => gateway_out26_x1,
    gateway_out6_x6 => gateway_out6_x5,
    gateway_out7_x6 => gateway_out7_x6,
    gateway_out8_x8 => gateway_out8_x8,
    gateway_out1_x8 => gateway_out1_x8,
    gateway_out2_x7 => gateway_out2_x7,
    gateway_out27_x3 => gateway_out27_x3,
    gateway_out28_x3 => gateway_out28_x3,
    gateway_out29_x3 => gateway_out29_x3,
    gateway_out3_x8 => gateway_out3_x8,
    gateway_out5_x6 => gateway_out5_x6,
    gateway_out32_x1 => gateway_out32_x1,
    gateway_out34_x1 => gateway_out34_x1,
    gateway_out35_x1 => gateway_out35_x1,
    gateway_out36_x1 => gateway_out36_x1,
    gateway_out37_x1 => gateway_out37_x1,
    gateway_out38_x1 => gateway_out38_x1,
    gateway_out32_x2 => gateway_out32_x2,
    gateway_out34_x2 => gateway_out34_x2,
    gateway_out35_x2 => gateway_out35_x2,
    gateway_out36_x2 => gateway_out36_x2,
    gateway_out37_x2 => gateway_out37_x2,
    gateway_out38_x2 => gateway_out38_x2,
    gateway_out11_x5 => gateway_out11_x5,
    gateway_out19_x1 => gateway_out19_x1,
    gateway_out20_x1 => gateway_out20_x1,
    gateway_out8_x11 => gateway_out8_x11,
    gateway_out27_x5 => gateway_out27_x5,
    gateway_out28_x5 => gateway_out28_x5,
    gateway_out29_x5 => gateway_out29_x5,
    gateway_out3_x12 => gateway_out3_x12,
    gateway_out_x6 => gateway_out_x6,
    gateway_out1_x12 => gateway_out1_x12,
    gateway_out2_x14 => gateway_out2_x14,
    gateway_out1_x13 => gateway_out1_x13,
    gateway_out2_x13 => gateway_out2_x13,
    gateway_out11_x6 => gateway_out11_x6,
    gateway_out19_x2 => gateway_out19_x2,
    gateway_out20_x2 => gateway_out20_x2,
    gateway_out8_x12 => gateway_out8_x12,
    gateway_out27_x6 => gateway_out27_x6,
    gateway_out28_x6 => gateway_out28_x6,
    gateway_out29_x6 => gateway_out29_x6,
    gateway_out3_x13 => gateway_out3_x13,
    gateway_out_x5 => gateway_out_x5,
    gateway_out1_x14 => gateway_out1_x14,
    gateway_out2_x10 => gateway_out2_x10,
    gateway_out1_x10 => gateway_out1_x10,
    gateway_out2_x11 => gateway_out2_x11,
    gateway_out39_x0 => gateway_out39_x0,
    gateway_out40_x0 => gateway_out40_x0,
    gateway_out10_x3 => gateway_out10_x3,
    gateway_out15_x3 => gateway_out15_x3,
    gateway_out16_x3 => gateway_out16_x3,
    gateway_out3_x11 => gateway_out3_x11,
    gateway_out4_x5 => gateway_out4_x5,
    gateway_out5_x9 => gateway_out5_x9,
    gateway_out6_x8 => gateway_out6_x8,
    gateway_out7_x8 => gateway_out7_x8,
    gateway_out8_x10 => gateway_out8_x10,
    gateway_out_x4 => gateway_out_x4,
    gateway_out1_x11 => gateway_out1_x11,
    gateway_out10_x4 => gateway_out10_x4,
    gateway_out11_x4 => gateway_out11_x4,
    gateway_out12_x2 => gateway_out12_x2,
    gateway_out13_x2 => gateway_out13_x2,
    gateway_out14_x2 => gateway_out14_x2,
    gateway_out15_x4 => gateway_out15_x4,
    gateway_out16_x4 => gateway_out16_x4,
    gateway_out17_x2 => gateway_out17_x2,
    gateway_out2_x12 => gateway_out2_x12,
    gateway_out22_x0 => gateway_out22_x0,
    gateway_out23_x0 => gateway_out23_x0,
    gateway_out3_x3 => gateway_out3_x3,
    gateway_out4_x2 => gateway_out4_x3,
    gateway_out5_x4 => gateway_out5_x4,
    gateway_out6_x4 => gateway_out6_x4,
    gateway_out7_x4 => gateway_out7_x4,
    gateway_out8_x4 => gateway_out8_x4,
    gateway_out9_x1 => gateway_out9_x1,
    gateway_out_x1 => gateway_out_x1,
    gateway_out1_x3 => gateway_out1_x3,
    gateway_out10_x2 => gateway_out10_x2,
    gateway_out11_x0 => gateway_out11_x1,
    gateway_out12_x0 => gateway_out12_x0,
    gateway_out13_x0 => gateway_out13_x0,
    gateway_out14_x1 => gateway_out14_x0,
    gateway_out15_x1 => gateway_out15_x1,
    gateway_out16_x1 => gateway_out16_x1,
    gateway_out17_x0 => gateway_out17_x0,
    gateway_out2_x2 => gateway_out2_x2,
    gateway_out22_x1 => gateway_out22_x1,
    gateway_out23_x1 => gateway_out23_x1,
    gateway_out3_x4 => gateway_out3_x4,
    gateway_out4_x3 => gateway_out4_x4,
    gateway_out5_x3 => gateway_out5_x3,
    gateway_out6_x1 => gateway_out6_x1,
    gateway_out7_x1 => gateway_out7_x1,
    gateway_out8_x1 => gateway_out8_x1,
    gateway_out9_x0 => gateway_out9_x0,
    gateway_out1_x1 => gateway_out1_x1,
    gateway_out2_x0 => gateway_out2_x0,
    gateway_out27 => gateway_out27,
    gateway_out28 => gateway_out28,
    gateway_out29 => gateway_out29,
    gateway_out3_x2 => gateway_out3_x2,
    gateway_out5_x2 => gateway_out5_x2,
    gateway_out24 => gateway_out24,
    gateway_out25 => gateway_out25,
    gateway_out26 => gateway_out26,
    gateway_out6_x2 => gateway_out6_x2,
    gateway_out7_x2 => gateway_out7_x2,
    gateway_out8_x2 => gateway_out8_x2,
    gateway_out24_x0 => gateway_out24_x0,
    gateway_out25_x0 => gateway_out25_x0,
    gateway_out26_x0 => gateway_out26_x0,
    gateway_out6_x3 => gateway_out6_x3,
    gateway_out7_x3 => gateway_out7_x3,
    gateway_out8_x3 => gateway_out8_x3,
    gateway_out1_x2 => gateway_out1_x2,
    gateway_out2_x1 => gateway_out2_x1,
    gateway_out27_x0 => gateway_out27_x0,
    gateway_out28_x1 => gateway_out28_x1,
    gateway_out29_x1 => gateway_out29_x1,
    gateway_out3_x6 => gateway_out3_x6,
    gateway_out5_x5 => gateway_out5_x5,
    gateway_out32 => gateway_out32,
    gateway_out34 => gateway_out34,
    gateway_out35_x0 => gateway_out35_x0,
    gateway_out36 => gateway_out36,
    gateway_out37 => gateway_out37,
    gateway_out38 => gateway_out38,
    gateway_out32_x0 => gateway_out32_x0,
    gateway_out34_x0 => gateway_out34_x0,
    gateway_out35 => gateway_out35,
    gateway_out36_x0 => gateway_out36_x0,
    gateway_out37_x0 => gateway_out37_x0,
    gateway_out38_x0 => gateway_out38_x0,
    gateway_out11_x2 => gateway_out11_x3,
    gateway_out19_x0 => gateway_out19_x0,
    gateway_out20_x0 => gateway_out20_x0,
    gateway_out8_x6 => gateway_out8_x6,
    gateway_out27_x2 => gateway_out27_x2,
    gateway_out28_x2 => gateway_out28_x2,
    gateway_out29_x2 => gateway_out29_x2,
    gateway_out3_x7 => gateway_out3_x7,
    gateway_out_x3 => gateway_out_x3,
    gateway_out1_x4 => gateway_out1_x4,
    gateway_out2_x3 => gateway_out2_x3,
    gateway_out1_x5 => gateway_out1_x5,
    gateway_out2_x4 => gateway_out2_x4,
    gateway_out11_x1 => gateway_out11_x2,
    gateway_out19 => gateway_out19,
    gateway_out20 => gateway_out20,
    gateway_out8_x5 => gateway_out8_x5,
    gateway_out27_x1 => gateway_out27_x1,
    gateway_out28_x0 => gateway_out28_x0,
    gateway_out29_x0 => gateway_out29_x0,
    gateway_out3_x5 => gateway_out3_x5,
    gateway_out_x2 => gateway_out_x2,
    gateway_out1_x6 => gateway_out1_x6,
    gateway_out2_x5 => gateway_out2_x5,
    gateway_out1_x7 => gateway_out1_x7,
    gateway_out2_x6 => gateway_out2_x6
  );
end structural;
